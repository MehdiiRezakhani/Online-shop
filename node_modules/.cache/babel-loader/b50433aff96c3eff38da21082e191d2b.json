{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/asus/Desktop/Practice/OnlineShop-Redux/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _regeneratorRuntime from \"C:/Users/asus/Desktop/Practice/OnlineShop-Redux/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/asus/Desktop/Practice/OnlineShop-Redux/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"C:/Users/asus/Desktop/Practice/OnlineShop-Redux/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _createClass from \"C:/Users/asus/Desktop/Practice/OnlineShop-Redux/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"C:/Users/asus/Desktop/Practice/OnlineShop-Redux/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _inherits from \"C:/Users/asus/Desktop/Practice/OnlineShop-Redux/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/asus/Desktop/Practice/OnlineShop-Redux/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _wrapNativeSuper from \"C:/Users/asus/Desktop/Practice/OnlineShop-Redux/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper\";\nimport _slicedToArray from \"C:/Users/asus/Desktop/Practice/OnlineShop-Redux/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"C:/Users/asus/Desktop/Practice/OnlineShop-Redux/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\n/**\n * @remix-run/router v1.0.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n} ////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\n\n\nvar Action;\n\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\n\nvar PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      _options$initialEntri = _options.initialEntries,\n      initialEntries = _options$initialEntri === void 0 ? [\"/\"] : _options$initialEntri,\n      initialIndex = _options.initialIndex,\n      _options$v5Compat = _options.v5Compat,\n      v5Compat = _options$v5Compat === void 0 ? false : _options$v5Compat;\n  var entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map(function (entry, index) {\n    return createMemoryLocation(entry, null, index === 0 ? \"default\" : undefined);\n  });\n  var index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  var action = Action.Pop;\n  var listener = null;\n\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n\n  function getCurrentLocation() {\n    return entries[index];\n  }\n\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    var location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n\n  var history = {\n    get index() {\n      return index;\n    },\n\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getCurrentLocation();\n    },\n\n    createHref: function createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n    push: function push(to, state) {\n      action = Action.Push;\n      var nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n\n      if (v5Compat && listener) {\n        listener({\n          action: action,\n          location: nextLocation\n        });\n      }\n    },\n    replace: function replace(to, state) {\n      action = Action.Replace;\n      var nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n\n      if (v5Compat && listener) {\n        listener({\n          action: action,\n          location: nextLocation\n        });\n      }\n    },\n    go: function go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n\n      if (listener) {\n        listener({\n          action: action,\n          location: getCurrentLocation()\n        });\n      }\n    },\n    listen: function listen(fn) {\n      listener = fn;\n      return function () {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createBrowserLocation(window, globalHistory) {\n    var _globalHistory$state, _globalHistory$state2;\n\n    var _window$location = window.location,\n        pathname = _window$location.pathname,\n        search = _window$location.search,\n        hash = _window$location.hash;\n    return createLocation(\"\", {\n      pathname: pathname,\n      search: search,\n      hash: hash\n    }, // state defaults to `null` because `window.history.state` does\n    ((_globalHistory$state = globalHistory.state) == null ? void 0 : _globalHistory$state.usr) || null, ((_globalHistory$state2 = globalHistory.state) == null ? void 0 : _globalHistory$state2.key) || \"default\");\n  }\n\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createHashLocation(window, globalHistory) {\n    var _globalHistory$state3, _globalHistory$state4;\n\n    var _parsePath = parsePath(window.location.hash.substr(1)),\n        _parsePath$pathname = _parsePath.pathname,\n        pathname = _parsePath$pathname === void 0 ? \"/\" : _parsePath$pathname,\n        _parsePath$search = _parsePath.search,\n        search = _parsePath$search === void 0 ? \"\" : _parsePath$search,\n        _parsePath$hash = _parsePath.hash,\n        hash = _parsePath$hash === void 0 ? \"\" : _parsePath$hash;\n\n    return createLocation(\"\", {\n      pathname: pathname,\n      search: search,\n      hash: hash\n    }, // state defaults to `null` because `window.history.state` does\n    ((_globalHistory$state3 = globalHistory.state) == null ? void 0 : _globalHistory$state3.usr) || null, ((_globalHistory$state4 = globalHistory.state) == null ? void 0 : _globalHistory$state4.key) || \"default\");\n  }\n\n  function createHashHref(window, to) {\n    var base = window.document.querySelector(\"base\");\n    var href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      var url = window.location.href;\n      var hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location, to) {\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n\nfunction warning$1(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\n\nfunction getHistoryState(location) {\n  return {\n    usr: location.state,\n    key: location.key\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n\n  var location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state: state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to == null ? void 0 : to.key) || key || createKey()\n  });\n\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\n\nfunction createPath(_ref) {\n  var _ref$pathname = _ref.pathname,\n      pathname = _ref$pathname === void 0 ? \"/\" : _ref$pathname,\n      _ref$search = _ref.search,\n      search = _ref$search === void 0 ? \"\" : _ref$search,\n      _ref$hash = _ref.hash,\n      hash = _ref$hash === void 0 ? \"\" : _ref$hash;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\n\nfunction parsePath(path) {\n  var parsedPath = {};\n\n  if (path) {\n    var hashIndex = path.indexOf(\"#\");\n\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    var searchIndex = path.indexOf(\"?\");\n\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nfunction getUrlBasedHistory(getLocation, _createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options2 = options,\n      _options2$window = _options2.window,\n      window = _options2$window === void 0 ? document.defaultView : _options2$window,\n      _options2$v5Compat = _options2.v5Compat,\n      v5Compat = _options2$v5Compat === void 0 ? false : _options2$v5Compat;\n  var globalHistory = window.history;\n  var action = Action.Pop;\n  var listener = null;\n\n  function handlePop() {\n    action = Action.Pop;\n\n    if (listener) {\n      listener({\n        action: action,\n        location: history.location\n      });\n    }\n  }\n\n  function push(to, state) {\n    action = Action.Push;\n    var location = createLocation(history.location, to, state);\n    validateLocation == null ? void 0 : validateLocation(location, to);\n    var historyState = getHistoryState(location);\n    var url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({\n        action: action,\n        location: location\n      });\n    }\n  }\n\n  function replace(to, state) {\n    action = Action.Replace;\n    var location = createLocation(history.location, to, state);\n    validateLocation == null ? void 0 : validateLocation(location, to);\n    var historyState = getHistoryState(location);\n    var url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({\n        action: action,\n        location: location\n      });\n    }\n  }\n\n  var history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n\n    listen: function listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return function () {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref: function createHref(to) {\n      return _createHref(window, to);\n    },\n    push: push,\n    replace: replace,\n    go: function go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n} //#endregion\n\n\nvar ResultType;\n\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {})); // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\n\nfunction convertRoutesToDataRoutes(routes, parentPath, allIds) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n\n  if (allIds === void 0) {\n    allIds = new Set();\n  }\n\n  return routes.map(function (route, index) {\n    var treePath = [].concat(_toConsumableArray(parentPath), [index]);\n    var id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(!allIds.has(id), \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    allIds.add(id);\n\n    var dataRoute = _extends({}, route, {\n      id: id,\n      children: route.children ? convertRoutesToDataRoutes(route.children, treePath, allIds) : undefined\n    });\n\n    return dataRoute;\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-routes\n */\n\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  var location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  var pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  var branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  var matches = null;\n\n  for (var i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], pathname);\n  }\n\n  return matches;\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  routes.forEach(function (route, index) {\n    var meta = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route: route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    var path = joinPaths([parentPath, meta.relativePath]);\n    var routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant(route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path: path,\n      score: computeScore(path, route.index),\n      routesMeta: routesMeta\n    });\n  });\n  return branches;\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort(function (a, b) {\n    return a.score !== b.score ? b.score - a.score // Higher score first\n    : compareIndexes(a.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }), b.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }));\n  });\n}\n\nvar paramRe = /^:\\w+$/;\nvar dynamicSegmentValue = 3;\nvar indexRouteValue = 2;\nvar emptySegmentValue = 1;\nvar staticSegmentValue = 10;\nvar splatPenalty = -2;\n\nvar isSplat = function isSplat(s) {\n  return s === \"*\";\n};\n\nfunction computeScore(path, index) {\n  var segments = path.split(\"/\");\n  var initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(function (s) {\n    return !isSplat(s);\n  }).reduce(function (score, segment) {\n    return score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue);\n  }, initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  var siblings = a.length === b.length && a.slice(0, -1).every(function (n, i) {\n    return n === b[i];\n  });\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname) {\n  var routesMeta = branch.routesMeta;\n  var matchedParams = {};\n  var matchedPathname = \"/\";\n  var matches = [];\n\n  for (var i = 0; i < routesMeta.length; ++i) {\n    var meta = routesMeta[i];\n    var end = i === routesMeta.length - 1;\n    var remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    var match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end: end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    var route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route: route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/generate-path\n */\n\n\nfunction generatePath(path, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  return path.replace(/:(\\w+)/g, function (_, key) {\n    invariant(params[key] != null, \"Missing \\\":\" + key + \"\\\" param\");\n    return params[key];\n  }).replace(/(\\/?)\\*/, function (_, prefix, __, str) {\n    var star = \"*\";\n\n    if (params[star] == null) {\n      // If no splat was provided, trim the trailing slash _unless_ it's\n      // the entire path\n      return str === \"/*\" ? \"/\" : \"\";\n    } // Apply the splat\n\n\n    return \"\" + prefix + params[star];\n  });\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-path\n */\n\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  var _compilePath = compilePath(pattern.path, pattern.caseSensitive, pattern.end),\n      _compilePath2 = _slicedToArray(_compilePath, 2),\n      matcher = _compilePath2[0],\n      paramNames = _compilePath2[1];\n\n  var match = pathname.match(matcher);\n  if (!match) return null;\n  var matchedPathname = match[0];\n  var pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  var captureGroups = match.slice(1);\n  var params = paramNames.reduce(function (memo, paramName, index) {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      var splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params: params,\n    pathname: matchedPathname,\n    pathnameBase: pathnameBase,\n    pattern: pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  var paramNames = [];\n  var regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/:(\\w+)/g, function (_, paramName) {\n    paramNames.push(paramName);\n    return \"([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else {\n    regexpSource += end ? \"\\\\/*$\" // When matching to the end, ignore trailing slashes\n    : // Otherwise, match a word boundary or a proceeding /. The word boundary restricts\n    // parent routes to matching only their own words and nothing more, e.g. parent\n    // route \"/home\" should not match \"/home2\".\n    // Additionally, allow paths starting with `.`, `-`, `~`, and url-encoded entities,\n    // but do not consume the character in the matched path so they can match against\n    // nested paths.\n    \"(?:(?=[@.~-]|%[0-9A-F]{2})|\\\\b|\\\\/|$)\";\n  }\n\n  var matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n\n  var startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  var nextChar = pathname.charAt(startIndex);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n/**\n * @private\n */\n\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/resolve-path\n */\n\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  var _ref11 = typeof to === \"string\" ? parsePath(to) : to,\n      toPathname = _ref11.pathname,\n      _ref11$search = _ref11.search,\n      search = _ref11$search === void 0 ? \"\" : _ref11$search,\n      _ref11$hash = _ref11.hash,\n      hash = _ref11$hash === void 0 ? \"\" : _ref11$hash;\n\n  var pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname: pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  var segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  var relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(function (segment) {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n/**\n * @private\n */\n\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n\n  var to = typeof toArg === \"string\" ? parsePath(toArg) : _extends({}, toArg);\n  var isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  var toPathname = isEmptyPath ? \"/\" : to.pathname;\n  var from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    var routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      var toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  var path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  var hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  var hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n/**\n * @private\n */\n\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\n\nvar joinPaths = function joinPaths(paths) {\n  return paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n};\n/**\n * @private\n */\n\n\nvar normalizePathname = function normalizePathname(pathname) {\n  return pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n};\n/**\n * @private\n */\n\n\nvar normalizeSearch = function normalizeSearch(search) {\n  return !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n};\n/**\n * @private\n */\n\n\nvar normalizeHash = function normalizeHash(hash) {\n  return !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n};\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\n\nvar json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  var responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  var headers = new Headers(responseInit.headers);\n\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers: headers\n  }));\n};\n\nvar AbortedDeferredError = /*#__PURE__*/function (_Error) {\n  _inherits(AbortedDeferredError, _Error);\n\n  var _super = _createSuper(AbortedDeferredError);\n\n  function AbortedDeferredError() {\n    _classCallCheck(this, AbortedDeferredError);\n\n    return _super.apply(this, arguments);\n  }\n\n  return AbortedDeferredError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar DeferredData = /*#__PURE__*/function () {\n  function DeferredData(data) {\n    var _this = this;\n\n    _classCallCheck(this, DeferredData);\n\n    this.pendingKeys = new Set();\n    this.subscriber = undefined;\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    var reject;\n    this.abortPromise = new Promise(function (_, r) {\n      return reject = r;\n    });\n    this.controller = new AbortController();\n\n    var onAbort = function onAbort() {\n      return reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    };\n\n    this.unlistenAbortSignal = function () {\n      return _this.controller.signal.removeEventListener(\"abort\", onAbort);\n    };\n\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce(function (acc, _ref) {\n      var _ref12 = _slicedToArray(_ref, 2),\n          key = _ref12[0],\n          value = _ref12[1];\n\n      return Object.assign(acc, _defineProperty({}, key, _this.trackPromise(key, value)));\n    }, {});\n  }\n\n  _createClass(DeferredData, [{\n    key: \"trackPromise\",\n    value: function trackPromise(key, value) {\n      var _this2 = this;\n\n      if (!(value instanceof Promise)) {\n        return value;\n      }\n\n      this.pendingKeys.add(key); // We store a little wrapper promise that will be extended with\n      // _data/_error props upon resolve/reject\n\n      var promise = Promise.race([value, this.abortPromise]).then(function (data) {\n        return _this2.onSettle(promise, key, null, data);\n      }, function (error) {\n        return _this2.onSettle(promise, key, error);\n      }); // Register rejection listeners to avoid uncaught promise rejections on\n      // errors or aborted deferred values\n\n      promise.catch(function () {});\n      Object.defineProperty(promise, \"_tracked\", {\n        get: function get() {\n          return true;\n        }\n      });\n      return promise;\n    }\n  }, {\n    key: \"onSettle\",\n    value: function onSettle(promise, key, error, data) {\n      var _this$subscriber2;\n\n      if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n        this.unlistenAbortSignal();\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return error;\n          }\n        });\n        return Promise.reject(error);\n      }\n\n      this.pendingKeys.delete(key);\n\n      if (this.done) {\n        // Nothing left to abort!\n        this.unlistenAbortSignal();\n      }\n\n      if (error) {\n        var _this$subscriber;\n\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return error;\n          }\n        });\n        (_this$subscriber = this.subscriber) == null ? void 0 : _this$subscriber.call(this, false);\n        return Promise.reject(error);\n      }\n\n      Object.defineProperty(promise, \"_data\", {\n        get: function get() {\n          return data;\n        }\n      });\n      (_this$subscriber2 = this.subscriber) == null ? void 0 : _this$subscriber2.call(this, false);\n      return data;\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(fn) {\n      this.subscriber = fn;\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      var _this3 = this;\n\n      var _this$subscriber3;\n\n      this.controller.abort();\n      this.pendingKeys.forEach(function (v, k) {\n        return _this3.pendingKeys.delete(k);\n      });\n      (_this$subscriber3 = this.subscriber) == null ? void 0 : _this$subscriber3.call(this, true);\n    }\n  }, {\n    key: \"resolveData\",\n    value: function () {\n      var _resolveData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(signal) {\n        var _this4 = this;\n\n        var aborted, onAbort;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                aborted = false;\n\n                if (this.done) {\n                  _context.next = 7;\n                  break;\n                }\n\n                onAbort = function onAbort() {\n                  return _this4.cancel();\n                };\n\n                signal.addEventListener(\"abort\", onAbort);\n                _context.next = 6;\n                return new Promise(function (resolve) {\n                  _this4.subscribe(function (aborted) {\n                    signal.removeEventListener(\"abort\", onAbort);\n\n                    if (aborted || _this4.done) {\n                      resolve(aborted);\n                    }\n                  });\n                });\n\n              case 6:\n                aborted = _context.sent;\n\n              case 7:\n                return _context.abrupt(\"return\", aborted);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function resolveData(_x) {\n        return _resolveData.apply(this, arguments);\n      }\n\n      return resolveData;\n    }()\n  }, {\n    key: \"done\",\n    get: function get() {\n      return this.pendingKeys.size === 0;\n    }\n  }, {\n    key: \"unwrappedData\",\n    get: function get() {\n      invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n      return Object.entries(this.data).reduce(function (acc, _ref2) {\n        var _ref13 = _slicedToArray(_ref2, 2),\n            key = _ref13[0],\n            value = _ref13[1];\n\n        return Object.assign(acc, _defineProperty({}, key, unwrapTrackedPromise(value)));\n      }, {});\n    }\n  }]);\n\n  return DeferredData;\n}();\n\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\n\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n\n  return value._data;\n}\n\nfunction defer(data) {\n  return new DeferredData(data);\n}\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\n\nvar redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n\n  var responseInit = init;\n\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  var headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers: headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\n\n\nvar ErrorResponse = function ErrorResponse(status, statusText, data) {\n  _classCallCheck(this, ErrorResponse);\n\n  this.status = status;\n  this.statusText = statusText || \"\";\n  this.data = data;\n};\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\n\n\nfunction isRouteErrorResponse(e) {\n  return e instanceof ErrorResponse;\n}\n\nvar IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nvar IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n}; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  var _init$hydrationData, _init$hydrationData2, _init$hydrationData3;\n\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  var dataRoutes = convertRoutesToDataRoutes(init.routes); // Cleanup function for history\n\n  var unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  var subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  var savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  var getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  var getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n\n  var initialScrollRestored = false;\n  var initialMatches = matchRoutes(dataRoutes, init.history.location, init.basename);\n  var initialErrors = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    var _getNotFoundMatches = getNotFoundMatches(dataRoutes),\n        matches = _getNotFoundMatches.matches,\n        route = _getNotFoundMatches.route,\n        error = _getNotFoundMatches.error;\n\n    initialMatches = matches;\n    initialErrors = _defineProperty({}, route.id, error);\n  }\n\n  var initialized = !initialMatches.some(function (m) {\n    return m.route.loader;\n  }) || init.hydrationData != null;\n  var router;\n  var state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized: initialized,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: ((_init$hydrationData = init.hydrationData) == null ? void 0 : _init$hydrationData.loaderData) || {},\n    actionData: ((_init$hydrationData2 = init.hydrationData) == null ? void 0 : _init$hydrationData2.actionData) || null,\n    errors: ((_init$hydrationData3 = init.hydrationData) == null ? void 0 : _init$hydrationData3.errors) || initialErrors,\n    fetchers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  var pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  var pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  var pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  var isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n\n  var isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  var cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  var cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  var fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  var incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  var pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  var fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations from their actions\n\n  var fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  var fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  var activeDeferreds = new Map(); // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(function (_ref) {\n      var historyAction = _ref.action,\n          location = _ref.location;\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n\n    return router;\n  } // Clean up a router and it's side effects\n\n\n  function dispose() {\n    var _pendingNavigationCon;\n\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n\n    subscribers.clear();\n    (_pendingNavigationCon = pendingNavigationController) == null ? void 0 : _pendingNavigationCon.abort();\n    state.fetchers.forEach(function (_, key) {\n      return deleteFetcher(key);\n    });\n  } // Subscribe to state updates for the router\n\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return function () {\n      return subscribers.delete(fn);\n    };\n  } // Update our state and notify the calling context of the change\n\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(function (subscriber) {\n      return subscriber(state);\n    });\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n\n  function completeNavigation(location, newState) {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - This should not be susceptible to false positives for\n    //   loading/submissionRedirect since there would not be actionData in the\n    //   state since the prior action would have returned a redirect response\n    //   and short circuited\n    var isActionReload = state.actionData != null && state.navigation.formMethod != null && state.navigation.state === \"loading\"; // Always preserve any existing loaderData from re-used routes\n\n    var newLoaderData = newState.loaderData ? {\n      loaderData: mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [])\n    } : {};\n    updateState(_extends({}, isActionReload ? {} : {\n      actionData: null\n    }, newState, newLoaderData, {\n      historyAction: pendingAction,\n      location: location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData ? false : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset\n    }));\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n\n  function navigate(_x2, _x3) {\n    return _navigate.apply(this, arguments);\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n\n  function _navigate() {\n    _navigate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(to, opts) {\n      var _normalizeNavigateOpt2, path, submission, error, location, historyAction, preventScrollReset;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(typeof to === \"number\")) {\n                _context2.next = 3;\n                break;\n              }\n\n              init.history.go(to);\n              return _context2.abrupt(\"return\");\n\n            case 3:\n              _normalizeNavigateOpt2 = normalizeNavigateOptions(to, opts), path = _normalizeNavigateOpt2.path, submission = _normalizeNavigateOpt2.submission, error = _normalizeNavigateOpt2.error;\n              location = createLocation(state.location, path, opts == null ? void 0 : opts.state);\n              historyAction = (opts == null ? void 0 : opts.replace) === true || submission != null ? Action.Replace : Action.Push;\n              preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n              _context2.next = 9;\n              return startNavigation(historyAction, location, {\n                submission: submission,\n                // Send through the formData serialization error if we have one so we can\n                // render at the right error boundary after we match routes\n                pendingError: error,\n                preventScrollReset: preventScrollReset,\n                replace: opts == null ? void 0 : opts.replace\n              });\n\n            case 9:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _navigate.apply(this, arguments);\n  }\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n\n  function startNavigation(_x4, _x5, _x6) {\n    return _startNavigation.apply(this, arguments);\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n\n  function _startNavigation() {\n    _startNavigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(historyAction, location, opts) {\n      var _pendingNavigationCon2, loadingNavigation, matches, _getNotFoundMatches2, notFoundMatches, _route, _error, request, pendingActionData, pendingError, actionOutput, navigation, _yield$handleLoaders, shortCircuited, loaderData, errors;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              // Abort any in-progress navigations and start a new one. Unset any ongoing\n              // uninterrupted revalidations unless told otherwise, since we want this\n              // new navigation to update history normally\n              (_pendingNavigationCon2 = pendingNavigationController) == null ? void 0 : _pendingNavigationCon2.abort();\n              pendingNavigationController = null;\n              pendingAction = historyAction;\n              isUninterruptedRevalidation = (opts == null ? void 0 : opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n              // and track whether we should reset scroll on completion\n\n              saveScrollPosition(state.location, state.matches);\n              pendingPreventScrollReset = (opts == null ? void 0 : opts.preventScrollReset) === true;\n              loadingNavigation = opts == null ? void 0 : opts.overrideNavigation;\n              matches = matchRoutes(dataRoutes, location, init.basename); // Short circuit with a 404 on the root error boundary if we match nothing\n\n              if (matches) {\n                _context3.next = 13;\n                break;\n              }\n\n              _getNotFoundMatches2 = getNotFoundMatches(dataRoutes), notFoundMatches = _getNotFoundMatches2.matches, _route = _getNotFoundMatches2.route, _error = _getNotFoundMatches2.error; // Cancel all pending deferred on 404s since we don't keep any routes\n\n              cancelActiveDeferreds();\n              completeNavigation(location, {\n                matches: notFoundMatches,\n                loaderData: {},\n                errors: _defineProperty({}, _route.id, _error)\n              });\n              return _context3.abrupt(\"return\");\n\n            case 13:\n              if (!isHashChangeOnly(state.location, location)) {\n                _context3.next = 16;\n                break;\n              }\n\n              completeNavigation(location, {\n                matches: matches\n              });\n              return _context3.abrupt(\"return\");\n\n            case 16:\n              // Create a controller/Request for this navigation\n              pendingNavigationController = new AbortController();\n              request = createRequest(location, pendingNavigationController.signal, opts == null ? void 0 : opts.submission);\n\n              if (!(opts != null && opts.pendingError)) {\n                _context3.next = 22;\n                break;\n              }\n\n              // If we have a pendingError, it means the user attempted a GET submission\n              // with binary FormData so assign here and skip to handleLoaders.  That\n              // way we handle calling loaders above the boundary etc.  It's not really\n              // different from an actionError in that sense.\n              pendingError = _defineProperty({}, findNearestBoundary(matches).route.id, opts.pendingError);\n              _context3.next = 32;\n              break;\n\n            case 22:\n              if (!(opts != null && opts.submission)) {\n                _context3.next = 32;\n                break;\n              }\n\n              _context3.next = 25;\n              return handleAction(request, location, opts.submission, matches, {\n                replace: opts.replace\n              });\n\n            case 25:\n              actionOutput = _context3.sent;\n\n              if (!actionOutput.shortCircuited) {\n                _context3.next = 28;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 28:\n              pendingActionData = actionOutput.pendingActionData;\n              pendingError = actionOutput.pendingActionError;\n              navigation = _extends({\n                state: \"loading\",\n                location: location\n              }, opts.submission);\n              loadingNavigation = navigation;\n\n            case 32:\n              _context3.next = 34;\n              return handleLoaders(request, location, matches, loadingNavigation, opts == null ? void 0 : opts.submission, opts == null ? void 0 : opts.replace, pendingActionData, pendingError);\n\n            case 34:\n              _yield$handleLoaders = _context3.sent;\n              shortCircuited = _yield$handleLoaders.shortCircuited;\n              loaderData = _yield$handleLoaders.loaderData;\n              errors = _yield$handleLoaders.errors;\n\n              if (!shortCircuited) {\n                _context3.next = 40;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 40:\n              // Clean up now that the action/loaders have completed.  Don't clean up if\n              // we short circuited because pendingNavigationController will have already\n              // been assigned to a new controller for the next navigation\n              pendingNavigationController = null;\n              completeNavigation(location, {\n                matches: matches,\n                loaderData: loaderData,\n                errors: errors\n              });\n\n            case 42:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _startNavigation.apply(this, arguments);\n  }\n\n  function handleAction(_x7, _x8, _x9, _x10, _x11) {\n    return _handleAction.apply(this, arguments);\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n\n  function _handleAction() {\n    _handleAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(request, location, submission, matches, opts) {\n      var navigation, result, actionMatch, redirectNavigation, boundaryMatch;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              interruptActiveLoads(); // Put us in a submitting state\n\n              navigation = _extends({\n                state: \"submitting\",\n                location: location\n              }, submission);\n              updateState({\n                navigation: navigation\n              }); // Call our action and get the result\n\n              actionMatch = getTargetMatch(matches, location);\n\n              if (actionMatch.route.action) {\n                _context4.next = 8;\n                break;\n              }\n\n              result = getMethodNotAllowedResult(location);\n              _context4.next = 13;\n              break;\n\n            case 8:\n              _context4.next = 10;\n              return callLoaderOrAction(\"action\", request, actionMatch);\n\n            case 10:\n              result = _context4.sent;\n\n              if (!request.signal.aborted) {\n                _context4.next = 13;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 13:\n              if (!isRedirectResult(result)) {\n                _context4.next = 18;\n                break;\n              }\n\n              redirectNavigation = _extends({\n                state: \"loading\",\n                location: createLocation(state.location, result.location)\n              }, submission);\n              _context4.next = 17;\n              return startRedirectNavigation(result, redirectNavigation, opts == null ? void 0 : opts.replace);\n\n            case 17:\n              return _context4.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 18:\n              if (!isErrorResult(result)) {\n                _context4.next = 22;\n                break;\n              }\n\n              // Store off the pending error - we use it to determine which loaders\n              // to call and will commit it when we complete the navigation\n              boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n              // action threw an error that'll be rendered in an errorElement, we fall\n              // back to PUSH so that the user can use the back button to get back to\n              // the pre-submission form location to try again\n\n              if ((opts == null ? void 0 : opts.replace) !== true) {\n                pendingAction = Action.Push;\n              }\n\n              return _context4.abrupt(\"return\", {\n                pendingActionError: _defineProperty({}, boundaryMatch.route.id, result.error)\n              });\n\n            case 22:\n              if (!isDeferredResult(result)) {\n                _context4.next = 24;\n                break;\n              }\n\n              throw new Error(\"defer() is not supported in actions\");\n\n            case 24:\n              return _context4.abrupt(\"return\", {\n                pendingActionData: _defineProperty({}, actionMatch.route.id, result.data)\n              });\n\n            case 25:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    return _handleAction.apply(this, arguments);\n  }\n\n  function handleLoaders(_x12, _x13, _x14, _x15, _x16, _x17, _x18, _x19) {\n    return _handleLoaders.apply(this, arguments);\n  }\n\n  function _handleLoaders() {\n    _handleLoaders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(request, location, matches, overrideNavigation, submission, replace, pendingActionData, pendingError) {\n      var loadingNavigation, navigation, _getMatchesToLoad, _getMatchesToLoad2, matchesToLoad, revalidatingFetchers, _yield$callLoadersAnd, results, loaderResults, fetcherResults, redirect, redirectNavigation, _processLoaderData, loaderData, errors, didAbortFetchLoads;\n\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              // Figure out the right navigation we want to use for data loading\n              loadingNavigation = overrideNavigation;\n\n              if (!loadingNavigation) {\n                navigation = {\n                  state: \"loading\",\n                  location: location,\n                  formMethod: undefined,\n                  formAction: undefined,\n                  formEncType: undefined,\n                  formData: undefined\n                };\n                loadingNavigation = navigation;\n              }\n\n              _getMatchesToLoad = getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches), _getMatchesToLoad2 = _slicedToArray(_getMatchesToLoad, 2), matchesToLoad = _getMatchesToLoad2[0], revalidatingFetchers = _getMatchesToLoad2[1]; // Cancel pending deferreds for no-longer-matched routes or routes we're\n              // about to reload.  Note that if this is an action reload we would have\n              // already cancelled all pending deferreds so this would be a no-op\n\n              cancelActiveDeferreds(function (routeId) {\n                return !(matches != null && matches.some(function (m) {\n                  return m.route.id === routeId;\n                })) || (matchesToLoad == null ? void 0 : matchesToLoad.some(function (m) {\n                  return m.route.id === routeId;\n                }));\n              }); // Short circuit if we have no loaders to run\n\n              if (!(matchesToLoad.length === 0 && revalidatingFetchers.length === 0)) {\n                _context5.next = 7;\n                break;\n              }\n\n              completeNavigation(location, {\n                matches: matches,\n                loaderData: mergeLoaderData(state.loaderData, {}, matches),\n                // Commit pending error if we're short circuiting\n                errors: pendingError || null,\n                actionData: pendingActionData || null\n              });\n              return _context5.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 7:\n              // If this is an uninterrupted revalidation, we remain in our current idle\n              // state.  If not, we need to switch to our loading state and load data,\n              // preserving any new action data or existing action data (in the case of\n              // a revalidation interrupting an actionReload)\n              if (!isUninterruptedRevalidation) {\n                revalidatingFetchers.forEach(function (_ref2) {\n                  var _state$fetchers$get;\n\n                  var _ref14 = _slicedToArray(_ref2, 1),\n                      key = _ref14[0];\n\n                  var revalidatingFetcher = {\n                    state: \"loading\",\n                    data: (_state$fetchers$get = state.fetchers.get(key)) == null ? void 0 : _state$fetchers$get.data,\n                    formMethod: undefined,\n                    formAction: undefined,\n                    formEncType: undefined,\n                    formData: undefined\n                  };\n                  state.fetchers.set(key, revalidatingFetcher);\n                });\n                updateState(_extends({\n                  navigation: loadingNavigation,\n                  actionData: pendingActionData || state.actionData || null\n                }, revalidatingFetchers.length > 0 ? {\n                  fetchers: new Map(state.fetchers)\n                } : {}));\n              }\n\n              pendingNavigationLoadId = ++incrementingLoadId;\n              revalidatingFetchers.forEach(function (_ref3) {\n                var _ref15 = _slicedToArray(_ref3, 1),\n                    key = _ref15[0];\n\n                return fetchControllers.set(key, pendingNavigationController);\n              });\n              _context5.next = 12;\n              return callLoadersAndMaybeResolveData(state.matches, matchesToLoad, revalidatingFetchers, request);\n\n            case 12:\n              _yield$callLoadersAnd = _context5.sent;\n              results = _yield$callLoadersAnd.results;\n              loaderResults = _yield$callLoadersAnd.loaderResults;\n              fetcherResults = _yield$callLoadersAnd.fetcherResults;\n\n              if (!request.signal.aborted) {\n                _context5.next = 18;\n                break;\n              }\n\n              return _context5.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 18:\n              // Clean up _after_ loaders have completed.  Don't clean up if we short\n              // circuited because fetchControllers would have been aborted and\n              // reassigned to new controllers for the next navigation\n              revalidatingFetchers.forEach(function (_ref4) {\n                var _ref16 = _slicedToArray(_ref4, 1),\n                    key = _ref16[0];\n\n                return fetchControllers.delete(key);\n              }); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n              redirect = findRedirect(results);\n\n              if (!redirect) {\n                _context5.next = 25;\n                break;\n              }\n\n              redirectNavigation = getLoaderRedirect(state, redirect);\n              _context5.next = 24;\n              return startRedirectNavigation(redirect, redirectNavigation, replace);\n\n            case 24:\n              return _context5.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 25:\n              // Process and commit output from loaders\n              _processLoaderData = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData.loaderData, errors = _processLoaderData.errors; // Wire up subscribers to update loaderData as promises settle\n\n              activeDeferreds.forEach(function (deferredData, routeId) {\n                deferredData.subscribe(function (aborted) {\n                  // Note: No need to updateState here since the TrackedPromise on\n                  // loaderData is stable across resolve/reject\n                  // Remove this instance if we were aborted or if promises have settled\n                  if (aborted || deferredData.done) {\n                    activeDeferreds.delete(routeId);\n                  }\n                });\n              });\n              markFetchRedirectsDone();\n              didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n              return _context5.abrupt(\"return\", _extends({\n                loaderData: loaderData,\n                errors: errors\n              }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n                fetchers: new Map(state.fetchers)\n              } : {}));\n\n            case 30:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n    return _handleLoaders.apply(this, arguments);\n  }\n\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n\n  function fetch(key, routeId, href, opts) {\n    if (typeof AbortController === \"undefined\") {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    var matches = matchRoutes(dataRoutes, href, init.basename);\n\n    if (!matches) {\n      setFetcherError(key, routeId, new ErrorResponse(404, \"Not Found\", null));\n      return;\n    }\n\n    var _normalizeNavigateOpt = normalizeNavigateOptions(href, opts),\n        path = _normalizeNavigateOpt.path,\n        submission = _normalizeNavigateOpt.submission;\n\n    var match = getTargetMatch(matches, path);\n\n    if (submission) {\n      handleFetcherAction(key, routeId, path, match, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n\n    fetchLoadMatches.set(key, [path, match]);\n    handleFetcherLoader(key, routeId, path, match);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n\n  function handleFetcherAction(_x20, _x21, _x22, _x23, _x24) {\n    return _handleFetcherAction.apply(this, arguments);\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n\n  function _handleFetcherAction() {\n    _handleFetcherAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(key, routeId, path, match, submission) {\n      var _state$fetchers$get2, _getMethodNotAllowedR, _error2, fetcher, abortController, fetchRequest, actionResult, loadingFetcher, redirectNavigation, nextLocation, revalidationRequest, matches, loadId, loadFetcher, _getMatchesToLoad3, _getMatchesToLoad4, matchesToLoad, revalidatingFetchers, _yield$callLoadersAnd2, results, loaderResults, fetcherResults, redirect, _redirectNavigation, _processLoaderData2, loaderData, errors, doneFetcher, didAbortFetchLoads, _pendingNavigationCon3;\n\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              interruptActiveLoads();\n              fetchLoadMatches.delete(key);\n\n              if (match.route.action) {\n                _context6.next = 6;\n                break;\n              }\n\n              _getMethodNotAllowedR = getMethodNotAllowedResult(path), _error2 = _getMethodNotAllowedR.error;\n              setFetcherError(key, routeId, _error2);\n              return _context6.abrupt(\"return\");\n\n            case 6:\n              // Put this fetcher into it's submitting state\n              fetcher = _extends({\n                state: \"submitting\"\n              }, submission, {\n                data: ((_state$fetchers$get2 = state.fetchers.get(key)) == null ? void 0 : _state$fetchers$get2.data) || undefined\n              });\n              state.fetchers.set(key, fetcher);\n              updateState({\n                fetchers: new Map(state.fetchers)\n              }); // Call the action for the fetcher\n\n              abortController = new AbortController();\n              fetchRequest = createRequest(path, abortController.signal, submission);\n              fetchControllers.set(key, abortController);\n              _context6.next = 14;\n              return callLoaderOrAction(\"action\", fetchRequest, match);\n\n            case 14:\n              actionResult = _context6.sent;\n\n              if (!fetchRequest.signal.aborted) {\n                _context6.next = 18;\n                break;\n              }\n\n              // We can delete this so long as we weren't aborted by ou our own fetcher\n              // re-submit which would have put _new_ controller is in fetchControllers\n              if (fetchControllers.get(key) === abortController) {\n                fetchControllers.delete(key);\n              }\n\n              return _context6.abrupt(\"return\");\n\n            case 18:\n              if (!isRedirectResult(actionResult)) {\n                _context6.next = 28;\n                break;\n              }\n\n              fetchControllers.delete(key);\n              fetchRedirectIds.add(key);\n              loadingFetcher = _extends({\n                state: \"loading\"\n              }, submission, {\n                data: undefined\n              });\n              state.fetchers.set(key, loadingFetcher);\n              updateState({\n                fetchers: new Map(state.fetchers)\n              });\n              redirectNavigation = _extends({\n                state: \"loading\",\n                location: createLocation(state.location, actionResult.location)\n              }, submission);\n              _context6.next = 27;\n              return startRedirectNavigation(actionResult, redirectNavigation);\n\n            case 27:\n              return _context6.abrupt(\"return\");\n\n            case 28:\n              if (!isErrorResult(actionResult)) {\n                _context6.next = 31;\n                break;\n              }\n\n              setFetcherError(key, routeId, actionResult.error);\n              return _context6.abrupt(\"return\");\n\n            case 31:\n              if (isDeferredResult(actionResult)) {\n                invariant(false, \"defer() is not supported in actions\");\n              } // Start the data load for current matches, or the next location if we're\n              // in the middle of a navigation\n\n\n              nextLocation = state.navigation.location || state.location;\n              revalidationRequest = createRequest(nextLocation, abortController.signal);\n              matches = state.navigation.state !== \"idle\" ? matchRoutes(dataRoutes, state.navigation.location, init.basename) : state.matches;\n              invariant(matches, \"Didn't find any matches after fetcher action\");\n              loadId = ++incrementingLoadId;\n              fetchReloadIds.set(key, loadId);\n              loadFetcher = _extends({\n                state: \"loading\",\n                data: actionResult.data\n              }, submission);\n              state.fetchers.set(key, loadFetcher);\n              _getMatchesToLoad3 = getMatchesToLoad(state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, _defineProperty({}, match.route.id, actionResult.data), undefined, // No need to send through errors since we short circuit above\n              fetchLoadMatches), _getMatchesToLoad4 = _slicedToArray(_getMatchesToLoad3, 2), matchesToLoad = _getMatchesToLoad4[0], revalidatingFetchers = _getMatchesToLoad4[1]; // Put all revalidating fetchers into the loading state, except for the\n              // current fetcher which we want to keep in it's current loading state which\n              // contains it's action submission info + action data\n\n              revalidatingFetchers.filter(function (_ref5) {\n                var _ref17 = _slicedToArray(_ref5, 1),\n                    staleKey = _ref17[0];\n\n                return staleKey !== key;\n              }).forEach(function (_ref6) {\n                var _state$fetchers$get3;\n\n                var _ref18 = _slicedToArray(_ref6, 1),\n                    staleKey = _ref18[0];\n\n                var revalidatingFetcher = {\n                  state: \"loading\",\n                  data: (_state$fetchers$get3 = state.fetchers.get(staleKey)) == null ? void 0 : _state$fetchers$get3.data,\n                  formMethod: undefined,\n                  formAction: undefined,\n                  formEncType: undefined,\n                  formData: undefined\n                };\n                state.fetchers.set(staleKey, revalidatingFetcher);\n                fetchControllers.set(staleKey, abortController);\n              });\n              updateState({\n                fetchers: new Map(state.fetchers)\n              });\n              _context6.next = 45;\n              return callLoadersAndMaybeResolveData(state.matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n\n            case 45:\n              _yield$callLoadersAnd2 = _context6.sent;\n              results = _yield$callLoadersAnd2.results;\n              loaderResults = _yield$callLoadersAnd2.loaderResults;\n              fetcherResults = _yield$callLoadersAnd2.fetcherResults;\n\n              if (!abortController.signal.aborted) {\n                _context6.next = 51;\n                break;\n              }\n\n              return _context6.abrupt(\"return\");\n\n            case 51:\n              fetchReloadIds.delete(key);\n              fetchControllers.delete(key);\n              revalidatingFetchers.forEach(function (_ref7) {\n                var _ref19 = _slicedToArray(_ref7, 1),\n                    staleKey = _ref19[0];\n\n                return fetchControllers.delete(staleKey);\n              });\n              redirect = findRedirect(results);\n\n              if (!redirect) {\n                _context6.next = 60;\n                break;\n              }\n\n              _redirectNavigation = getLoaderRedirect(state, redirect);\n              _context6.next = 59;\n              return startRedirectNavigation(redirect, _redirectNavigation);\n\n            case 59:\n              return _context6.abrupt(\"return\");\n\n            case 60:\n              // Process and commit output from loaders\n              _processLoaderData2 = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData2.loaderData, errors = _processLoaderData2.errors;\n              doneFetcher = {\n                state: \"idle\",\n                data: actionResult.data,\n                formMethod: undefined,\n                formAction: undefined,\n                formEncType: undefined,\n                formData: undefined\n              };\n              state.fetchers.set(key, doneFetcher);\n              didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n              // more recent than the navigation, we want the newer data so abort the\n              // navigation and complete it with the fetcher data\n\n              if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n                invariant(pendingAction, \"Expected pending action\");\n                (_pendingNavigationCon3 = pendingNavigationController) == null ? void 0 : _pendingNavigationCon3.abort();\n                completeNavigation(state.navigation.location, {\n                  matches: matches,\n                  loaderData: loaderData,\n                  errors: errors,\n                  fetchers: new Map(state.fetchers)\n                });\n              } else {\n                // otherwise just update with the fetcher data, preserving any existing\n                // loaderData for loaders that did not need to reload.  We have to\n                // manually merge here since we aren't going through completeNavigation\n                updateState(_extends({\n                  errors: errors,\n                  loaderData: mergeLoaderData(state.loaderData, loaderData, matches)\n                }, didAbortFetchLoads ? {\n                  fetchers: new Map(state.fetchers)\n                } : {}));\n                isRevalidationRequired = false;\n              }\n\n            case 65:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n    return _handleFetcherAction.apply(this, arguments);\n  }\n\n  function handleFetcherLoader(_x25, _x26, _x27, _x28) {\n    return _handleFetcherLoader.apply(this, arguments);\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n\n  function _handleFetcherLoader() {\n    _handleFetcherLoader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(key, routeId, path, match) {\n      var _state$fetchers$get4, loadingFetcher, abortController, fetchRequest, result, redirectNavigation, boundaryMatch, doneFetcher;\n\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              // Put this fetcher into it's loading state\n              loadingFetcher = {\n                state: \"loading\",\n                formMethod: undefined,\n                formAction: undefined,\n                formEncType: undefined,\n                formData: undefined,\n                data: ((_state$fetchers$get4 = state.fetchers.get(key)) == null ? void 0 : _state$fetchers$get4.data) || undefined\n              };\n              state.fetchers.set(key, loadingFetcher);\n              updateState({\n                fetchers: new Map(state.fetchers)\n              }); // Call the loader for this fetcher route match\n\n              abortController = new AbortController();\n              fetchRequest = createRequest(path, abortController.signal);\n              fetchControllers.set(key, abortController);\n              _context7.next = 8;\n              return callLoaderOrAction(\"loader\", fetchRequest, match);\n\n            case 8:\n              result = _context7.sent;\n\n              if (!isDeferredResult(result)) {\n                _context7.next = 16;\n                break;\n              }\n\n              _context7.next = 12;\n              return resolveDeferredData(result, fetchRequest.signal, true);\n\n            case 12:\n              _context7.t0 = _context7.sent;\n\n              if (_context7.t0) {\n                _context7.next = 15;\n                break;\n              }\n\n              _context7.t0 = result;\n\n            case 15:\n              result = _context7.t0;\n\n            case 16:\n              // We can delete this so long as we weren't aborted by ou our own fetcher\n              // re-load which would have put _new_ controller is in fetchControllers\n              if (fetchControllers.get(key) === abortController) {\n                fetchControllers.delete(key);\n              }\n\n              if (!fetchRequest.signal.aborted) {\n                _context7.next = 19;\n                break;\n              }\n\n              return _context7.abrupt(\"return\");\n\n            case 19:\n              if (!isRedirectResult(result)) {\n                _context7.next = 24;\n                break;\n              }\n\n              redirectNavigation = getLoaderRedirect(state, result);\n              _context7.next = 23;\n              return startRedirectNavigation(result, redirectNavigation);\n\n            case 23:\n              return _context7.abrupt(\"return\");\n\n            case 24:\n              if (!isErrorResult(result)) {\n                _context7.next = 29;\n                break;\n              }\n\n              boundaryMatch = findNearestBoundary(state.matches, routeId);\n              state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n              // do we need to behave any differently with our non-redirect errors?\n              // What if it was a non-redirect Response?\n\n              updateState({\n                fetchers: new Map(state.fetchers),\n                errors: _defineProperty({}, boundaryMatch.route.id, result.error)\n              });\n              return _context7.abrupt(\"return\");\n\n            case 29:\n              invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n              doneFetcher = {\n                state: \"idle\",\n                data: result.data,\n                formMethod: undefined,\n                formAction: undefined,\n                formEncType: undefined,\n                formData: undefined\n              };\n              state.fetchers.set(key, doneFetcher);\n              updateState({\n                fetchers: new Map(state.fetchers)\n              });\n\n            case 33:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n    return _handleFetcherLoader.apply(this, arguments);\n  }\n\n  function startRedirectNavigation(_x29, _x30, _x31) {\n    return _startRedirectNavigation.apply(this, arguments);\n  }\n\n  function _startRedirectNavigation() {\n    _startRedirectNavigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(redirect, navigation, replace) {\n      var redirectHistoryAction;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              if (redirect.revalidate) {\n                isRevalidationRequired = true;\n              }\n\n              invariant(navigation.location, \"Expected a location on the redirect navigation\"); // There's no need to abort on redirects, since we don't detect the\n              // redirect until the action/loaders have settled\n\n              pendingNavigationController = null;\n              redirectHistoryAction = replace === true ? Action.Replace : Action.Push;\n              _context8.next = 6;\n              return startNavigation(redirectHistoryAction, navigation.location, {\n                overrideNavigation: navigation\n              });\n\n            case 6:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n    return _startRedirectNavigation.apply(this, arguments);\n  }\n\n  function callLoadersAndMaybeResolveData(_x32, _x33, _x34, _x35) {\n    return _callLoadersAndMaybeResolveData.apply(this, arguments);\n  }\n\n  function _callLoadersAndMaybeResolveData() {\n    _callLoadersAndMaybeResolveData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(currentMatches, matchesToLoad, fetchersToLoad, request) {\n      var results, loaderResults, fetcherResults;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return Promise.all([].concat(_toConsumableArray(matchesToLoad.map(function (m) {\n                return callLoaderOrAction(\"loader\", request, m);\n              })), _toConsumableArray(fetchersToLoad.map(function (_ref8) {\n                var _ref20 = _slicedToArray(_ref8, 3),\n                    href = _ref20[1],\n                    match = _ref20[2];\n\n                return callLoaderOrAction(\"loader\", createRequest(href, request.signal), match);\n              }))));\n\n            case 2:\n              results = _context9.sent;\n              loaderResults = results.slice(0, matchesToLoad.length);\n              fetcherResults = results.slice(matchesToLoad.length);\n              _context9.next = 7;\n              return Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, request.signal, false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(function (_ref9) {\n                var _ref21 = _slicedToArray(_ref9, 3),\n                    match = _ref21[2];\n\n                return match;\n              }), fetcherResults, request.signal, true)]);\n\n            case 7:\n              return _context9.abrupt(\"return\", {\n                results: results,\n                loaderResults: loaderResults,\n                fetcherResults: fetcherResults\n              });\n\n            case 8:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n    return _callLoadersAndMaybeResolveData.apply(this, arguments);\n  }\n\n  function interruptActiveLoads() {\n    var _cancelledDeferredRou;\n\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    (_cancelledDeferredRou = cancelledDeferredRoutes).push.apply(_cancelledDeferredRou, _toConsumableArray(cancelActiveDeferreds())); // Abort in-flight fetcher loads\n\n\n    fetchLoadMatches.forEach(function (_, key) {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key, routeId, error) {\n    var boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: _defineProperty({}, boundaryMatch.route.id, error),\n      fetchers: new Map(state.fetchers)\n    });\n  }\n\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key) {\n    var controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys) {\n    var _iterator = _createForOfIteratorHelper(keys),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var key = _step.value;\n        var fetcher = getFetcher(key);\n        var doneFetcher = {\n          state: \"idle\",\n          data: fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined\n        };\n        state.fetchers.set(key, doneFetcher);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  function markFetchRedirectsDone() {\n    var doneKeys = [];\n\n    var _iterator2 = _createForOfIteratorHelper(fetchRedirectIds),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var key = _step2.value;\n        var fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n\n        if (fetcher.state === \"loading\") {\n          fetchRedirectIds.delete(key);\n          doneKeys.push(key);\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId) {\n    var yeetedKeys = [];\n\n    var _iterator3 = _createForOfIteratorHelper(fetchReloadIds),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var _step3$value = _slicedToArray(_step3.value, 2),\n            key = _step3$value[0],\n            id = _step3$value[1];\n\n        if (id < landedId) {\n          var fetcher = state.fetchers.get(key);\n          invariant(fetcher, \"Expected fetcher: \" + key);\n\n          if (fetcher.state === \"loading\") {\n            abortFetcher(key);\n            fetchReloadIds.delete(key);\n            yeetedKeys.push(key);\n          }\n        }\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(predicate) {\n    var cancelledRouteIds = [];\n    activeDeferreds.forEach(function (dfd, routeId) {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n\n    getScrollRestorationKey = getKey || function (location) {\n      return location.key;\n    }; // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      var y = getSavedScrollPosition(state.location, state.matches);\n\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n\n    return function () {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      var userMatches = matches.map(function (m) {\n        return createUseMatchesMatch(m, state.loaderData);\n      });\n      var key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      var userMatches = matches.map(function (m) {\n        return createUseMatchesMatch(m, state.loaderData);\n      });\n      var key = getScrollRestorationKey(location, userMatches) || location.key;\n      var y = savedScrollPositions[key];\n\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n\n    get state() {\n      return state;\n    },\n\n    get routes() {\n      return dataRoutes;\n    },\n\n    initialize: initialize,\n    subscribe: subscribe,\n    enableScrollRestoration: enableScrollRestoration,\n    navigate: navigate,\n    fetch: fetch,\n    revalidate: revalidate,\n    createHref: createHref,\n    getFetcher: getFetcher,\n    deleteFetcher: deleteFetcher,\n    dispose: dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\n\nfunction unstable_createStaticHandler(routes) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to unstable_createStaticHandler\");\n  var dataRoutes = convertRoutesToDataRoutes(routes);\n\n  function query(_x36) {\n    return _query.apply(this, arguments);\n  }\n\n  function _query() {\n    _query = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(request) {\n      var _yield$queryImpl, location, result;\n\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return queryImpl(request);\n\n            case 2:\n              _yield$queryImpl = _context10.sent;\n              location = _yield$queryImpl.location;\n              result = _yield$queryImpl.result;\n\n              if (!(result instanceof Response)) {\n                _context10.next = 7;\n                break;\n              }\n\n              return _context10.abrupt(\"return\", result);\n\n            case 7:\n              return _context10.abrupt(\"return\", _extends({\n                location: location\n              }, result));\n\n            case 8:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n    return _query.apply(this, arguments);\n  }\n\n  function queryRoute(_x37, _x38) {\n    return _queryRoute.apply(this, arguments);\n  }\n\n  function _queryRoute() {\n    _queryRoute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(request, routeId) {\n      var _yield$queryImpl2, result, routeData, value;\n\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.next = 2;\n              return queryImpl(request, routeId);\n\n            case 2:\n              _yield$queryImpl2 = _context11.sent;\n              result = _yield$queryImpl2.result;\n\n              if (!(result instanceof Response)) {\n                _context11.next = 6;\n                break;\n              }\n\n              return _context11.abrupt(\"return\", result);\n\n            case 6:\n              // Pick off the right state value to return\n              routeData = [result.errors, result.actionData, result.loaderData].find(function (v) {\n                return v;\n              });\n              value = Object.values(routeData || {})[0];\n\n              if (!isRouteErrorResponse(value)) {\n                _context11.next = 10;\n                break;\n              }\n\n              return _context11.abrupt(\"return\", new Response(value.data, {\n                status: value.status,\n                statusText: value.statusText\n              }));\n\n            case 10:\n              return _context11.abrupt(\"return\", value);\n\n            case 11:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11);\n    }));\n    return _queryRoute.apply(this, arguments);\n  }\n\n  function queryImpl(_x39, _x40) {\n    return _queryImpl.apply(this, arguments);\n  }\n\n  function _queryImpl() {\n    _queryImpl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(request, routeId) {\n      var _matchRequest, location, matches, shortCircuitState, _result, result;\n\n      return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              invariant(request.method !== \"HEAD\", \"query()/queryRoute() do not support HEAD requests\");\n              invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n              _matchRequest = matchRequest(request, routeId), location = _matchRequest.location, matches = _matchRequest.matches, shortCircuitState = _matchRequest.shortCircuitState;\n              _context12.prev = 3;\n\n              if (!shortCircuitState) {\n                _context12.next = 6;\n                break;\n              }\n\n              return _context12.abrupt(\"return\", {\n                location: location,\n                result: shortCircuitState\n              });\n\n            case 6:\n              if (!(request.method !== \"GET\")) {\n                _context12.next = 11;\n                break;\n              }\n\n              _context12.next = 9;\n              return submit(request, matches, getTargetMatch(matches, location), routeId != null);\n\n            case 9:\n              _result = _context12.sent;\n              return _context12.abrupt(\"return\", {\n                location: location,\n                result: _result\n              });\n\n            case 11:\n              _context12.next = 13;\n              return loadRouteData(request, matches, routeId != null);\n\n            case 13:\n              result = _context12.sent;\n              return _context12.abrupt(\"return\", {\n                location: location,\n                result: _extends({}, result, {\n                  actionData: null,\n                  actionHeaders: {}\n                })\n              });\n\n            case 17:\n              _context12.prev = 17;\n              _context12.t0 = _context12[\"catch\"](3);\n\n              if (!(_context12.t0 instanceof Response)) {\n                _context12.next = 21;\n                break;\n              }\n\n              return _context12.abrupt(\"return\", {\n                location: location,\n                result: _context12.t0\n              });\n\n            case 21:\n              throw _context12.t0;\n\n            case 22:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12, null, [[3, 17]]);\n    }));\n    return _queryImpl.apply(this, arguments);\n  }\n\n  function submit(_x41, _x42, _x43, _x44) {\n    return _submit.apply(this, arguments);\n  }\n\n  function _submit() {\n    _submit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(request, matches, actionMatch, isRouteRequest) {\n      var result, href, method, boundaryMatch, _boundaryMatch, _context13, context;\n\n      return _regeneratorRuntime.wrap(function _callee13$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              if (actionMatch.route.action) {\n                _context14.next = 5;\n                break;\n              }\n\n              href = createHref(new URL(request.url));\n              result = getMethodNotAllowedResult(href);\n              _context14.next = 11;\n              break;\n\n            case 5:\n              _context14.next = 7;\n              return callLoaderOrAction(\"action\", request, actionMatch, true, isRouteRequest);\n\n            case 7:\n              result = _context14.sent;\n\n              if (!request.signal.aborted) {\n                _context14.next = 11;\n                break;\n              }\n\n              method = isRouteRequest ? \"queryRoute\" : \"query\";\n              throw new Error(method + \"() call aborted\");\n\n            case 11:\n              if (!isRedirectResult(result)) {\n                _context14.next = 13;\n                break;\n              }\n\n              throw new Response(null, {\n                status: result.status,\n                headers: {\n                  Location: result.location\n                }\n              });\n\n            case 13:\n              if (!isDeferredResult(result)) {\n                _context14.next = 15;\n                break;\n              }\n\n              throw new Error(\"defer() is not supported in actions\");\n\n            case 15:\n              if (!isRouteRequest) {\n                _context14.next = 20;\n                break;\n              }\n\n              if (!isErrorResult(result)) {\n                _context14.next = 19;\n                break;\n              }\n\n              boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n              return _context14.abrupt(\"return\", {\n                matches: [actionMatch],\n                loaderData: {},\n                actionData: null,\n                errors: _defineProperty({}, boundaryMatch.route.id, result.error),\n                // Note: statusCode + headers are unused here since queryRoute will\n                // return the raw Response or value\n                statusCode: 500,\n                loaderHeaders: {},\n                actionHeaders: {}\n              });\n\n            case 19:\n              return _context14.abrupt(\"return\", {\n                matches: [actionMatch],\n                loaderData: {},\n                actionData: _defineProperty({}, actionMatch.route.id, result.data),\n                errors: null,\n                // Note: statusCode + headers are unused here since queryRoute will\n                // return the raw Response or value\n                statusCode: 200,\n                loaderHeaders: {},\n                actionHeaders: {}\n              });\n\n            case 20:\n              if (!isErrorResult(result)) {\n                _context14.next = 26;\n                break;\n              }\n\n              // Store off the pending error - we use it to determine which loaders\n              // to call and will commit it when we complete the navigation\n              _boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n              _context14.next = 24;\n              return loadRouteData(request, matches, isRouteRequest, _defineProperty({}, _boundaryMatch.route.id, result.error));\n\n            case 24:\n              _context13 = _context14.sent;\n              return _context14.abrupt(\"return\", _extends({}, _context13, {\n                statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n                actionData: null,\n                actionHeaders: _extends({}, result.headers ? _defineProperty({}, actionMatch.route.id, result.headers) : {})\n              }));\n\n            case 26:\n              _context14.next = 28;\n              return loadRouteData(request, matches, isRouteRequest);\n\n            case 28:\n              context = _context14.sent;\n              return _context14.abrupt(\"return\", _extends({}, context, result.statusCode ? {\n                statusCode: result.statusCode\n              } : {}, {\n                actionData: _defineProperty({}, actionMatch.route.id, result.data),\n                actionHeaders: _extends({}, result.headers ? _defineProperty({}, actionMatch.route.id, result.headers) : {})\n              }));\n\n            case 30:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee13);\n    }));\n    return _submit.apply(this, arguments);\n  }\n\n  function loadRouteData(_x45, _x46, _x47, _x48) {\n    return _loadRouteData.apply(this, arguments);\n  }\n\n  function _loadRouteData() {\n    _loadRouteData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(request, matches, isRouteRequest, pendingActionError) {\n      var matchesToLoad, results, method, context;\n      return _regeneratorRuntime.wrap(function _callee14$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              matchesToLoad = getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]).filter(function (m) {\n                return m.route.loader;\n              }); // Short circuit if we have no loaders to run\n\n              if (!(matchesToLoad.length === 0)) {\n                _context15.next = 3;\n                break;\n              }\n\n              return _context15.abrupt(\"return\", {\n                matches: matches,\n                loaderData: {},\n                errors: pendingActionError || null,\n                statusCode: 200,\n                loaderHeaders: {}\n              });\n\n            case 3:\n              _context15.next = 5;\n              return Promise.all(_toConsumableArray(matchesToLoad.map(function (m) {\n                return callLoaderOrAction(\"loader\", request, m, true, isRouteRequest);\n              })));\n\n            case 5:\n              results = _context15.sent;\n\n              if (!request.signal.aborted) {\n                _context15.next = 9;\n                break;\n              }\n\n              method = isRouteRequest ? \"queryRoute\" : \"query\";\n              throw new Error(method + \"() call aborted\");\n\n            case 9:\n              // Can't do anything with these without the Remix side of things, so just\n              // cancel them for now\n              results.forEach(function (result) {\n                if (isDeferredResult(result)) {\n                  result.deferredData.cancel();\n                }\n              }); // Process and commit output from loaders\n\n              context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError);\n              return _context15.abrupt(\"return\", _extends({}, context, {\n                matches: matches\n              }));\n\n            case 12:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee14);\n    }));\n    return _loadRouteData.apply(this, arguments);\n  }\n\n  function matchRequest(req, routeId) {\n    var url = new URL(req.url);\n    var location = createLocation(\"\", createPath(url), null, \"default\");\n    var matches = matchRoutes(dataRoutes, location);\n\n    if (matches && routeId) {\n      matches = matches.filter(function (m) {\n        return m.route.id === routeId;\n      });\n    } // Short circuit with a 404 if we match nothing\n\n\n    if (!matches) {\n      var _getNotFoundMatches3 = getNotFoundMatches(dataRoutes),\n          notFoundMatches = _getNotFoundMatches3.matches,\n          route = _getNotFoundMatches3.route,\n          error = _getNotFoundMatches3.error;\n\n      return {\n        location: location,\n        matches: notFoundMatches,\n        shortCircuitState: {\n          matches: notFoundMatches,\n          loaderData: {},\n          actionData: null,\n          errors: _defineProperty({}, route.id, error),\n          statusCode: 404,\n          loaderHeaders: {},\n          actionHeaders: {}\n        }\n      };\n    }\n\n    return {\n      location: location,\n      matches: matches\n    };\n  }\n\n  return {\n    dataRoutes: dataRoutes,\n    query: query,\n    queryRoute: queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\n\nfunction getStaticContextFromError(routes, context, error) {\n  var newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: _defineProperty({}, context._deepestRenderedBoundaryId || routes[0].id, error)\n  });\n\n  return newContext;\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\n\nfunction normalizeNavigateOptions(to, opts) {\n  var path = typeof to === \"string\" ? to : createPath(to); // Return location verbatim on non-submission navigations\n\n  if (!opts || !(\"formMethod\" in opts) && !(\"formData\" in opts)) {\n    return {\n      path: path\n    };\n  } // Create a Submission on non-GET navigations\n\n\n  if (opts.formMethod != null && opts.formMethod !== \"get\") {\n    return {\n      path: path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: createHref(parsePath(path)),\n        formEncType: (opts == null ? void 0 : opts.formEncType) || \"application/x-www-form-urlencoded\",\n        formData: opts.formData\n      }\n    };\n  } // No formData to flatten for GET submission\n\n\n  if (!opts.formData) {\n    return {\n      path: path\n    };\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n\n  var parsedPath = parsePath(path);\n\n  try {\n    var searchParams = convertFormDataToSearchParams(opts.formData);\n    parsedPath.search = \"?\" + searchParams;\n  } catch (e) {\n    return {\n      path: path,\n      error: new ErrorResponse(400, \"Bad Request\", \"Cannot submit binary form data using GET\")\n    };\n  }\n\n  return {\n    path: createPath(parsedPath)\n  };\n}\n\nfunction getLoaderRedirect(state, redirect) {\n  var _state$navigation = state.navigation,\n      formMethod = _state$navigation.formMethod,\n      formAction = _state$navigation.formAction,\n      formEncType = _state$navigation.formEncType,\n      formData = _state$navigation.formData;\n  var navigation = {\n    state: \"loading\",\n    location: createLocation(state.location, redirect.location),\n    formMethod: formMethod || undefined,\n    formAction: formAction || undefined,\n    formEncType: formEncType || undefined,\n    formData: formData || undefined\n  };\n  return navigation;\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  var boundaryMatches = matches;\n\n  if (boundaryId) {\n    var index = matches.findIndex(function (m) {\n      return m.route.id === boundaryId;\n    });\n\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches) {\n  var actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : null; // Pick navigation matches that are net-new or qualify for revalidation\n\n  var boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  var boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  var navigationMatches = boundaryMatches.filter(function (match, index) {\n    return match.route.loader != null && (isNewLoader(state.loaderData, state.matches[index], match) || // If this route had a pending deferred cancelled it must be revalidated\n    cancelledDeferredRoutes.some(function (id) {\n      return id === match.route.id;\n    }) || shouldRevalidateLoader(state.location, state.matches[index], submission, location, match, isRevalidationRequired, actionResult));\n  }); // Pick fetcher.loads that need to be revalidated\n\n  var revalidatingFetchers = [];\n  fetchLoadMatches == null ? void 0 : fetchLoadMatches.forEach(function (_ref10, key) {\n    var _ref24 = _slicedToArray(_ref10, 2),\n        href = _ref24[0],\n        match = _ref24[1]; // This fetcher was cancelled from a prior action submission - force reload\n\n\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push([key, href, match]);\n    } else if (isRevalidationRequired) {\n      var shouldRevalidate = shouldRevalidateLoader(href, match, submission, href, match, isRevalidationRequired, actionResult);\n\n      if (shouldRevalidate) {\n        revalidatingFetchers.push([key, href, match]);\n      }\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  var isNew = // [a] -> [a, b]\n  !currentMatch || // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  var isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(currentMatch, match) {\n  var _currentMatch$route$p;\n\n  return (// param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    ((_currentMatch$route$p = currentMatch.route.path) == null ? void 0 : _currentMatch$route$p.endsWith(\"*\")) && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\n\nfunction shouldRevalidateLoader(currentLocation, currentMatch, submission, location, match, isRevalidationRequired, actionResult) {\n  var currentUrl = createURL(currentLocation);\n  var currentParams = currentMatch.params;\n  var nextUrl = createURL(location);\n  var nextParams = match.params; // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n\n  var defaultShouldRevalidate = isNewRouteInstance(currentMatch, match) || // Clicked the same link, resubmitted a GET form\n  currentUrl.toString() === nextUrl.toString() || // Search params affect all loaders\n  currentUrl.search !== nextUrl.search || // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n  isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    var routeChoice = match.route.shouldRevalidate(_extends({\n      currentUrl: currentUrl,\n      currentParams: currentParams,\n      nextUrl: nextUrl,\n      nextParams: nextParams\n    }, submission, {\n      actionResult: actionResult,\n      defaultShouldRevalidate: defaultShouldRevalidate\n    }));\n\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nfunction callLoaderOrAction(_x49, _x50, _x51, _x52, _x53) {\n  return _callLoaderOrAction.apply(this, arguments);\n}\n\nfunction _callLoaderOrAction() {\n  _callLoaderOrAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(type, request, match, skipRedirects, isRouteRequest) {\n    var resultType, result, reject, abortPromise, onReject, handler, _result$headers$get, status, location, data;\n\n    return _regeneratorRuntime.wrap(function _callee15$(_context16) {\n      while (1) {\n        switch (_context16.prev = _context16.next) {\n          case 0:\n            if (skipRedirects === void 0) {\n              skipRedirects = false;\n            }\n\n            if (isRouteRequest === void 0) {\n              isRouteRequest = false;\n            }\n\n            abortPromise = new Promise(function (_, r) {\n              return reject = r;\n            });\n\n            onReject = function onReject() {\n              return reject();\n            };\n\n            request.signal.addEventListener(\"abort\", onReject);\n            _context16.prev = 5;\n            handler = match.route[type];\n            invariant(handler, \"Could not find the \" + type + \" to run on the \\\"\" + match.route.id + \"\\\" route\");\n            _context16.next = 10;\n            return Promise.race([handler({\n              request: request,\n              params: match.params\n            }), abortPromise]);\n\n          case 10:\n            result = _context16.sent;\n            _context16.next = 17;\n            break;\n\n          case 13:\n            _context16.prev = 13;\n            _context16.t0 = _context16[\"catch\"](5);\n            resultType = ResultType.error;\n            result = _context16.t0;\n\n          case 17:\n            _context16.prev = 17;\n            request.signal.removeEventListener(\"abort\", onReject);\n            return _context16.finish(17);\n\n          case 20:\n            if (!(result instanceof Response)) {\n              _context16.next = 41;\n              break;\n            }\n\n            // Process redirects\n            status = result.status;\n            location = result.headers.get(\"Location\"); // For SSR single-route requests, we want to hand Responses back directly\n            // without unwrapping\n\n            if (!isRouteRequest) {\n              _context16.next = 25;\n              break;\n            }\n\n            throw result;\n\n          case 25:\n            if (!(status >= 300 && status <= 399 && location != null)) {\n              _context16.next = 29;\n              break;\n            }\n\n            if (!skipRedirects) {\n              _context16.next = 28;\n              break;\n            }\n\n            throw result;\n\n          case 28:\n            return _context16.abrupt(\"return\", {\n              type: ResultType.redirect,\n              status: status,\n              location: location,\n              revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n            });\n\n          case 29:\n            if (!((_result$headers$get = result.headers.get(\"Content-Type\")) != null && _result$headers$get.startsWith(\"application/json\"))) {\n              _context16.next = 35;\n              break;\n            }\n\n            _context16.next = 32;\n            return result.json();\n\n          case 32:\n            data = _context16.sent;\n            _context16.next = 38;\n            break;\n\n          case 35:\n            _context16.next = 37;\n            return result.text();\n\n          case 37:\n            data = _context16.sent;\n\n          case 38:\n            if (!(resultType === ResultType.error)) {\n              _context16.next = 40;\n              break;\n            }\n\n            return _context16.abrupt(\"return\", {\n              type: resultType,\n              error: new ErrorResponse(status, result.statusText, data),\n              headers: result.headers\n            });\n\n          case 40:\n            return _context16.abrupt(\"return\", {\n              type: ResultType.data,\n              data: data,\n              statusCode: result.status,\n              headers: result.headers\n            });\n\n          case 41:\n            if (!(resultType === ResultType.error)) {\n              _context16.next = 43;\n              break;\n            }\n\n            return _context16.abrupt(\"return\", {\n              type: resultType,\n              error: result\n            });\n\n          case 43:\n            if (!(result instanceof DeferredData)) {\n              _context16.next = 45;\n              break;\n            }\n\n            return _context16.abrupt(\"return\", {\n              type: ResultType.deferred,\n              deferredData: result\n            });\n\n          case 45:\n            return _context16.abrupt(\"return\", {\n              type: ResultType.data,\n              data: result\n            });\n\n          case 46:\n          case \"end\":\n            return _context16.stop();\n        }\n      }\n    }, _callee15, null, [[5, 13, 17, 20]]);\n  }));\n  return _callLoaderOrAction.apply(this, arguments);\n}\n\nfunction createRequest(location, signal, submission) {\n  var url = createURL(location).toString();\n  var init = {\n    signal: signal\n  };\n\n  if (submission) {\n    var formMethod = submission.formMethod,\n        formEncType = submission.formEncType,\n        formData = submission.formData;\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData) {\n  var searchParams = new URLSearchParams();\n\n  var _iterator4 = _createForOfIteratorHelper(formData.entries()),\n      _step4;\n\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var _step4$value = _slicedToArray(_step4.value, 2),\n          key = _step4$value[0],\n          value = _step4$value[1];\n\n      invariant(typeof value === \"string\", 'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' + 'please use \"multipart/form-data\" instead.');\n      searchParams.append(key, value);\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  var loaderData = {};\n  var errors = null;\n  var statusCode;\n  var foundError = false;\n  var loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach(function (result, index) {\n    var id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      var boundaryMatch = findNearestBoundary(matches, id);\n      var error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = Object.assign(errors || {}, _defineProperty({}, boundaryMatch.route.id, error)); // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds == null ? void 0 : activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data; // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data; // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n      if (result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n\n  if (pendingError) {\n    errors = pendingError;\n  }\n\n  return {\n    loaderData: loaderData,\n    errors: errors,\n    statusCode: statusCode || 200,\n    loaderHeaders: loaderHeaders\n  };\n}\n\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  var _processRouteLoaderDa = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds),\n      loaderData = _processRouteLoaderDa.loaderData,\n      errors = _processRouteLoaderDa.errors; // Process results from our revalidating fetchers\n\n\n  for (var index = 0; index < revalidatingFetchers.length; index++) {\n    var _revalidatingFetchers = _slicedToArray(revalidatingFetchers[index], 3),\n        key = _revalidatingFetchers[0],\n        match = _revalidatingFetchers[2];\n\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    var result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (isErrorResult(result)) {\n      var _errors;\n\n      var boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n\n      if (!((_errors = errors) != null && _errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, _defineProperty({}, boundaryMatch.route.id, result.error));\n      }\n\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      var doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return {\n    loaderData: loaderData,\n    errors: errors\n  };\n}\n\nfunction mergeLoaderData(loaderData, newLoaderData, matches) {\n  var mergedLoaderData = _extends({}, newLoaderData);\n\n  matches.forEach(function (match) {\n    var id = match.route.id;\n\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\n\nfunction findNearestBoundary(matches, routeId) {\n  var eligibleMatches = routeId ? matches.slice(0, matches.findIndex(function (m) {\n    return m.route.id === routeId;\n  }) + 1) : _toConsumableArray(matches);\n  return eligibleMatches.reverse().find(function (m) {\n    return m.route.hasErrorBoundary === true;\n  }) || matches[0];\n}\n\nfunction getNotFoundMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  var route = routes.find(function (r) {\n    return r.index || r.path === \"\" || r.path === \"/\";\n  }) || {\n    id: \"__shim-404-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route: route\n    }],\n    route: route,\n    error: new ErrorResponse(404, \"Not Found\", null)\n  };\n}\n\nfunction getMethodNotAllowedResult(path) {\n  var href = typeof path === \"string\" ? path : createHref(path);\n  console.warn(\"You're trying to submit to a route that does not have an action.  To \" + \"fix this, please add an `action` function to the route for \" + (\"[\" + href + \"]\"));\n  return {\n    type: ResultType.error,\n    error: new ErrorResponse(405, \"Method Not Allowed\", \"No action found for [\" + href + \"]\")\n  };\n} // Find any returned redirect errors, starting from the lowest match\n\n\nfunction findRedirect(results) {\n  for (var i = results.length - 1; i >= 0; i--) {\n    var result = results[i];\n\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n} // Create an href to represent a \"server\" URL without the hash\n\n\nfunction createHref(location) {\n  return (location.pathname || \"\") + (location.search || \"\");\n}\n\nfunction isHashChangeOnly(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash;\n}\n\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result) {\n  return (result == null ? void 0 : result.type) === ResultType.redirect;\n}\n\nfunction resolveDeferredResults(_x54, _x55, _x56, _x57, _x58, _x59) {\n  return _resolveDeferredResults.apply(this, arguments);\n}\n\nfunction _resolveDeferredResults() {\n  _resolveDeferredResults = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(currentMatches, matchesToLoad, results, signal, isFetcher, currentLoaderData) {\n    var _loop, index;\n\n    return _regeneratorRuntime.wrap(function _callee16$(_context18) {\n      while (1) {\n        switch (_context18.prev = _context18.next) {\n          case 0:\n            _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop(index) {\n              var result, match, currentMatch, isRevalidatingLoader;\n              return _regeneratorRuntime.wrap(function _loop$(_context17) {\n                while (1) {\n                  switch (_context17.prev = _context17.next) {\n                    case 0:\n                      result = results[index];\n                      match = matchesToLoad[index];\n                      currentMatch = currentMatches.find(function (m) {\n                        return m.route.id === match.route.id;\n                      });\n                      isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData == null ? void 0 : currentLoaderData[match.route.id]) !== undefined;\n\n                      if (!(isDeferredResult(result) && (isFetcher || isRevalidatingLoader))) {\n                        _context17.next = 7;\n                        break;\n                      }\n\n                      _context17.next = 7;\n                      return resolveDeferredData(result, signal, isFetcher).then(function (result) {\n                        if (result) {\n                          results[index] = result || results[index];\n                        }\n                      });\n\n                    case 7:\n                    case \"end\":\n                      return _context17.stop();\n                  }\n                }\n              }, _loop);\n            });\n            index = 0;\n\n          case 2:\n            if (!(index < results.length)) {\n              _context18.next = 7;\n              break;\n            }\n\n            return _context18.delegateYield(_loop(index), \"t0\", 4);\n\n          case 4:\n            index++;\n            _context18.next = 2;\n            break;\n\n          case 7:\n          case \"end\":\n            return _context18.stop();\n        }\n      }\n    }, _callee16);\n  }));\n  return _resolveDeferredResults.apply(this, arguments);\n}\n\nfunction resolveDeferredData(_x60, _x61, _x62) {\n  return _resolveDeferredData.apply(this, arguments);\n}\n\nfunction _resolveDeferredData() {\n  _resolveDeferredData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(result, signal, unwrap) {\n    var aborted;\n    return _regeneratorRuntime.wrap(function _callee17$(_context19) {\n      while (1) {\n        switch (_context19.prev = _context19.next) {\n          case 0:\n            if (unwrap === void 0) {\n              unwrap = false;\n            }\n\n            _context19.next = 3;\n            return result.deferredData.resolveData(signal);\n\n          case 3:\n            aborted = _context19.sent;\n\n            if (!aborted) {\n              _context19.next = 6;\n              break;\n            }\n\n            return _context19.abrupt(\"return\");\n\n          case 6:\n            if (!unwrap) {\n              _context19.next = 14;\n              break;\n            }\n\n            _context19.prev = 7;\n            return _context19.abrupt(\"return\", {\n              type: ResultType.data,\n              data: result.deferredData.unwrappedData\n            });\n\n          case 11:\n            _context19.prev = 11;\n            _context19.t0 = _context19[\"catch\"](7);\n            return _context19.abrupt(\"return\", {\n              type: ResultType.error,\n              error: _context19.t0\n            });\n\n          case 14:\n            return _context19.abrupt(\"return\", {\n              type: ResultType.data,\n              data: result.deferredData.data\n            });\n\n          case 15:\n          case \"end\":\n            return _context19.stop();\n        }\n      }\n    }, _callee17, null, [[7, 11]]);\n  }));\n  return _resolveDeferredData.apply(this, arguments);\n}\n\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(function (v) {\n    return v === \"\";\n  });\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\n\nfunction createUseMatchesMatch(match, loaderData) {\n  var route = match.route,\n      pathname = match.pathname,\n      params = match.params;\n  return {\n    id: route.id,\n    pathname: pathname,\n    params: params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\n\nfunction getTargetMatch(matches, location) {\n  var search = typeof location === \"string\" ? parsePath(location).search : location.search;\n\n  if (matches[matches.length - 1].route.index && !hasNakedIndexQuery(search || \"\")) {\n    return matches.slice(-2)[0];\n  }\n\n  return matches.slice(-1)[0];\n}\n\nfunction createURL(location) {\n  var base = typeof window !== \"undefined\" && typeof window.location !== \"undefined\" ? window.location.origin : \"unknown://unknown\";\n  var href = typeof location === \"string\" ? location : createHref(location);\n  return new URL(href, base);\n} //#endregion\n\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_FETCHER, IDLE_NAVIGATION, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, defer, generatePath, getStaticContextFromError, getToPathname, invariant, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename, unstable_createStaticHandler, warning };","map":{"version":3,"sources":["../history.ts","../utils.ts","../router.ts"],"names":["Action","PopStateEventType","options","initialEntries","v5Compat","entries","createMemoryLocation","index","clampIndex","initialIndex","action","listener","Math","state","location","createLocation","getCurrentLocation","warning","JSON","history","createHref","createPath","push","nextLocation","replace","go","listen","hash","window","pathname","search","usr","getUrlBasedHistory","parsePath","base","href","url","hashIndex","console","key","current","createKey","parsedPath","path","searchIndex","document","globalHistory","validateLocation","historyState","getHistoryState","getLocation","ResultType","parentPath","allIds","treePath","id","route","invariant","dataRoute","children","convertRoutesToDataRoutes","undefined","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","parentsMeta","routes","meta","relativePath","caseSensitive","childrenIndex","joinPaths","routesMeta","score","computeScore","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","segments","initialScore","segment","siblings","n","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","generatePath","star","str","pattern","compilePath","captureGroups","paramName","splatValue","memo","safelyDecodeURIComponent","paramNames","regexpSource","matcher","decodeURIComponent","startIndex","nextChar","value","resolvePath","to","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","isPathRelative","isEmptyPath","toArg","from","routePathnameIndex","routePathnames","toSegments","hasExplicitTrailingSlash","hasCurrentTrailingSlash","locationPathname","paths","json","init","responseInit","status","headers","DeferredData","constructor","data","Array","reject","onAbort","trackPromise","promise","Promise","error","get","onSettle","subscriber","subscribe","cancel","resolveData","aborted","signal","resolve","done","unwrappedData","unwrapTrackedPromise","isTrackedPromise","redirect","ErrorResponse","statusText","e","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","dataRoutes","unlistenHistory","subscribers","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","initialMatches","matchRoutes","initialErrors","getNotFoundMatches","initialized","m","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","pendingAction","HistoryAction","pendingPreventScrollReset","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","startNavigation","deleteFetcher","isActionReload","newLoaderData","mergeLoaderData","newState","updateState","getSavedScrollPosition","normalizeNavigateOptions","opts","submission","pendingError","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","pendingNavigationController","saveScrollPosition","loadingNavigation","cancelActiveDeferreds","completeNavigation","isHashChangeOnly","request","createRequest","findNearestBoundary","actionOutput","handleAction","pendingActionData","handleLoaders","actionMatch","getTargetMatch","result","getMethodNotAllowedResult","callLoaderOrAction","shortCircuited","isRedirectResult","redirectNavigation","startRedirectNavigation","isErrorResult","boundaryMatch","pendingActionError","isDeferredResult","getMatchesToLoad","routeId","matchesToLoad","revalidatingFetchers","revalidatingFetcher","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","getLoaderRedirect","processLoaderData","deferredData","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","abortFetcher","setFetcherError","handleFetcherAction","handleFetcherLoader","fetcher","abortController","fetchRequest","actionResult","loadingFetcher","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","redirectHistoryAction","results","loaderResults","resolveDeferredResults","controller","getFetcher","doneKeys","markFetchersDone","yeetedKeys","cancelledRouteIds","predicate","dfd","getKey","y","userMatches","createUseMatchesMatch","router","initialize","enableScrollRestoration","navigate","fetch","revalidate","dispose","_internalFetchControllers","_internalActiveDeferreds","queryImpl","routeData","v","isRouteErrorResponse","shortCircuitState","matchRequest","submit","loadRouteData","actionHeaders","method","isRouteRequest","Location","statusCode","loaderHeaders","context","getLoaderMatchesUntilBoundary","processRouteLoaderData","req","query","queryRoute","getStaticContextFromError","newContext","searchParams","convertFormDataToSearchParams","boundaryMatches","boundaryId","navigationMatches","shouldRevalidateLoader","shouldRevalidate","isNew","currentMatch","isMissingData","currentLoaderData","endsWith","currentUrl","createURL","currentParams","nextUrl","nextParams","defaultShouldRevalidate","isNewRouteInstance","routeChoice","skipRedirects","abortPromise","onReject","handler","resultType","type","startsWith","foundError","mergedLoaderData","eligibleMatches","r","currentMatches","isRevalidatingLoader","isFetcher","unwrap","handle","hasNakedIndexQuery"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAA;AACA;AACA;;AAEA;;AAEG;;;IACH,M;;AAAA,CAAA,UAAA,MAAA,EAAkB;AAChB;;;;;;AAMG;AACHA,EAAAA,MAAAA,CAAAA,KAAAA,CAAAA,GAAAA,KAAAA;AAEA;;;;AAIG;;AACHA,EAAAA,MAAAA,CAAAA,MAAAA,CAAAA,GAAAA,MAAAA;AAEA;;;AAGG;;AACHA,EAAAA,MAAAA,CAAAA,SAAAA,CAAAA,GAAAA,SAAAA;AArBF,CAAA,EAAYA,MAAM,KAANA,MAAM,GAAlB,EAAkB,CAAlB;;AAkKA,IAAMC,iBAAiB,GAAvB,UAAA;AA+BA;;;AAGG;;AACa,SAAA,mBAAA,CAAA,OAAA,EACoB;AAAA,MAAlCC,OAAkC,KAAA,KAAA,CAAA,EAAA;AAAlCA,IAAAA,OAAkC,GAAF,EAAhCA;AAAkC;;AAElC,iBAAA,OAAA;AAAA,uCAAMC,cAAN;AAAA,MAAMA,cAAN,sCAAuB,CAAnB,GAAmB,CAAvB;AAAA,MAAI,YAAJ,YAAI,YAAJ;AAAA,mCAA4CC,QAA5C;AAAA,MAA4CA,QAA5C,kCAAuD,KAAvD;AACA,MAHkC,OAGlC,CAHkC,CAAA;;AAIlCC,EAAAA,OAAO,GAAGF,cAAc,CAAdA,GAAAA,CAAmB,UAAA,KAAA,EAAA,KAAA;AAAA,WAC3BG,oBAAoB,CAAA,KAAA,EAAA,IAAA,EAAcC,KAAK,KAALA,CAAAA,GAAAA,SAAAA,GADpCF,SACsB,CADO;AAAA,GAAnBF,CAAVE;AAGA,MAAIE,KAAK,GAAGC,UAAU,CACpBC,YAAY,IAAZA,IAAAA,GAAuBJ,OAAO,CAAPA,MAAAA,GAAvBI,CAAAA,GADF,YAAsB,CAAtB;AAGA,MAAIC,MAAM,GAAGV,MAAM,CAAnB,GAAA;AACA,MAAIW,QAAQ,GAAZ,IAAA;;AAEA,WAAA,UAAA,CAAA,CAAA,EAA6B;AAC3B,WAAOC,IAAI,CAAJA,GAAAA,CAASA,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAATA,CAASA,CAATA,EAAyBP,OAAO,CAAPA,MAAAA,GAAhC,CAAOO,CAAP;AACD;;AACD,WAAA,kBAAA,GAA2B;AACzB,WAAOP,OAAO,CAAd,KAAc,CAAd;AACD;;AACD,WAAA,oBAAA,CAAA,EAAA,EAAA,KAAA,EAAA,GAAA,EAGc;AAAA,QADZQ,KACY,KAAA,KAAA,CAAA,EAAA;AADZA,MAAAA,KACY,GADC,IAAbA;AACY;;AAEZ,QAAIC,QAAQ,GAAGC,cAAc,CAC3BV,OAAO,GAAGW,kBAAkB,GAArB,QAAA,GADoB,GAAA,EAAA,EAAA,EAAA,KAAA,EAA7B,GAA6B,CAA7B;AAMAC,IAAAA,SAAO,CACLH,QAAQ,CAARA,QAAAA,CAAAA,MAAAA,CAAAA,CAAAA,MADK,GAAA,EAAA,6DAEsDI,IAAI,CAAJA,SAAAA,CAF7DD,EAE6DC,CAFtD,CAAPD;AAMA,WAAA,QAAA;AACD;;AAED,MAAIE,OAAO,GAAkB;AAC3B,QAAA,KAAA,GAAS;AACP,aAAA,KAAA;AAFyB,KAAA;;AAI3B,QAAA,MAAA,GAAU;AACR,aAAA,MAAA;AALyB,KAAA;;AAO3B,QAAA,QAAA,GAAY;AACV,aAAOH,kBAAP,EAAA;AARyB,KAAA;;AAU3BI,IAAAA,UAV2B,sBAUjB,EAViB,EAUd;AACX,aAAO,OAAA,EAAA,KAAA,QAAA,GAAA,EAAA,GAA8BC,UAAU,CAA/C,EAA+C,CAA/C;AAXyB,KAAA;AAa3BC,IAAAA,IAb2B,gBAavB,EAbuB,EAavB,KAbuB,EAab;AACZZ,MAAAA,MAAM,GAAGV,MAAM,CAAfU,IAAAA;AACA,UAAIa,YAAY,GAAGjB,oBAAoB,CAAA,EAAA,EAAvC,KAAuC,CAAvC;AACAC,MAAAA,KAAK,IAALA,CAAAA;AACAF,MAAAA,OAAO,CAAPA,MAAAA,CAAAA,KAAAA,EAAsBA,OAAO,CAA7BA,MAAAA,EAAAA,YAAAA;;AACA,UAAID,QAAQ,IAAZ,QAAA,EAA0B;AACxBO,QAAAA,QAAQ,CAAC;AAAED,UAAAA,MAAF,EAAEA,MAAF;AAAUI,UAAAA,QAAQ,EAAES;AAApB,SAAD,CAARZ;AACD;AApBwB,KAAA;AAsB3Ba,IAAAA,OAtB2B,mBAsBpB,EAtBoB,EAsBpB,KAtBoB,EAsBV;AACfd,MAAAA,MAAM,GAAGV,MAAM,CAAfU,OAAAA;AACA,UAAIa,YAAY,GAAGjB,oBAAoB,CAAA,EAAA,EAAvC,KAAuC,CAAvC;AACAD,MAAAA,OAAO,CAAPA,KAAO,CAAPA,GAAAA,YAAAA;;AACA,UAAID,QAAQ,IAAZ,QAAA,EAA0B;AACxBO,QAAAA,QAAQ,CAAC;AAAED,UAAAA,MAAF,EAAEA,MAAF;AAAUI,UAAAA,QAAQ,EAAES;AAApB,SAAD,CAARZ;AACD;AA5BwB,KAAA;AA8B3Bc,IAAAA,EA9B2B,cA8BzB,KA9ByB,EA8BnB;AACNf,MAAAA,MAAM,GAAGV,MAAM,CAAfU,GAAAA;AACAH,MAAAA,KAAK,GAAGC,UAAU,CAACD,KAAK,GAAxBA,KAAkB,CAAlBA;;AACA,UAAA,QAAA,EAAc;AACZI,QAAAA,QAAQ,CAAC;AAAED,UAAAA,MAAF,EAAEA,MAAF;AAAUI,UAAAA,QAAQ,EAAEE,kBAAkB;AAAtC,SAAD,CAARL;AACD;AAnCwB,KAAA;AAqC3Be,IAAAA,MArC2B,kBAqCrB,EArCqB,EAqCR;AACjBf,MAAAA,QAAQ,GAARA,EAAAA;AACA,aAAO,YAAK;AACVA,QAAAA,QAAQ,GAARA,IAAAA;AADF,OAAA;AAGD;AA1C0B,GAA7B;AA6CA,SAAA,OAAA;AACD;AAkBD;;;;;;AAMG;;;AACa,SAAA,oBAAA,CAAA,OAAA,EACqB;AAAA,MAAnCT,OAAmC,KAAA,KAAA,CAAA,EAAA;AAAnCA,IAAAA,OAAmC,GAAF,EAAjCA;AAAmC;;AAEnC,WAAA,qBAAA,CAAA,MAAA,EAAA,aAAA,EAEkC;AAAA,QAAA,oBAAA,EAAA,qBAAA;;AAEhC,2BAAiC0B,MAAM,CAAvC,QAAA;AAAA,QAAI,QAAJ,oBAAI,QAAJ;AAAA,QAAI,MAAJ,oBAAI,MAAJ;AAAA,QAAwBD,IAAxB,oBAAwBA,IAAxB;AACA,WAAOZ,cAAc,CAAA,EAAA,EAEnB;AAAEc,MAAAA,QAAF,EAAEA,QAAF;AAAYC,MAAAA,MAAZ,EAAYA,MAAZ;AAAoBH,MAAAA,IAAAA,EAAAA;AAApB,KAFmB,EAAA;AAInB,KAAA,CAAA,oBAAA,GAAA,aAAa,CAAb,KAAA,KAAqBI,IAArB,GAAqBA,KAAAA,CAArB,GAAqBA,oBAAAA,CAArB,GAAA,KAJmB,IAAA,EAKnB,CAAA,CAAA,qBAAA,GAAA,aAAa,CAAb,KAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,qBAAA,CAAA,GAAA,KALF,SAAqB,CAArB;AAOD;;AAED,WAAA,iBAAA,CAAA,MAAA,EAAA,EAAA,EAAiD;AAC/C,WAAO,OAAA,EAAA,KAAA,QAAA,GAAA,EAAA,GAA8BV,UAAU,CAA/C,EAA+C,CAA/C;AACD;;AAED,SAAOW,kBAAkB,CAAA,qBAAA,EAAA,iBAAA,EAAA,IAAA,EAAzB,OAAyB,CAAzB;AAMD;AAsBD;;;;;;;AAOG;;;AACa,SAAA,iBAAA,CAAA,OAAA,EACkB;AAAA,MAAhC9B,OAAgC,KAAA,KAAA,CAAA,EAAA;AAAhCA,IAAAA,OAAgC,GAAF,EAA9BA;AAAgC;;AAEhC,WAAA,kBAAA,CAAA,MAAA,EAAA,aAAA,EAEkC;AAAA,QAAA,qBAAA,EAAA,qBAAA;;AAEhC,qBAII+B,SAAS,CAACL,MAAM,CAANA,QAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAJd,CAIcA,CAAD,CAJb;AAAA,yCACEC,QADF;AAAA,QACEA,QADF,oCAAI,GAAJ;AAAA,uCAEEC,MAFF;AAAA,QAEEA,MAFF,kCAAI,EAAJ;AAAA,qCAGEH,IAHF;AAAA,QAGEA,IAHF,gCAGS,EAHT;;AAKA,WAAOZ,cAAc,CAAA,EAAA,EAEnB;AAAEc,MAAAA,QAAF,EAAEA,QAAF;AAAYC,MAAAA,MAAZ,EAAYA,MAAZ;AAAoBH,MAAAA,IAAAA,EAAAA;AAApB,KAFmB,EAAA;AAInB,KAAA,CAAA,qBAAA,GAAA,aAAa,CAAb,KAAA,KAAqBI,IAArB,GAAqBA,KAAAA,CAArB,GAAqBA,qBAAAA,CAArB,GAAA,KAJmB,IAAA,EAKnB,CAAA,CAAA,qBAAA,GAAA,aAAa,CAAb,KAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,qBAAA,CAAA,GAAA,KALF,SAAqB,CAArB;AAOD;;AAED,WAAA,cAAA,CAAA,MAAA,EAAA,EAAA,EAA8C;AAC5C,QAAIG,IAAI,GAAGN,MAAM,CAANA,QAAAA,CAAAA,aAAAA,CAAX,MAAWA,CAAX;AACA,QAAIO,IAAI,GAAR,EAAA;;AAEA,QAAID,IAAI,IAAIA,IAAI,CAAJA,YAAAA,CAAZ,MAAYA,CAAZ,EAAuC;AACrC,UAAIE,GAAG,GAAGR,MAAM,CAANA,QAAAA,CAAV,IAAA;AACA,UAAIS,SAAS,GAAGD,GAAG,CAAHA,OAAAA,CAAhB,GAAgBA,CAAhB;AACAD,MAAAA,IAAI,GAAGE,SAAS,KAAK,CAAdA,CAAAA,GAAAA,GAAAA,GAAyBD,GAAG,CAAHA,KAAAA,CAAAA,CAAAA,EAAhCD,SAAgCC,CAAhCD;AACD;;AAED,WAAOA,IAAI,GAAJA,GAAAA,IAAc,OAAA,EAAA,KAAA,QAAA,GAAA,EAAA,GAA8Bd,UAAU,CAA7D,EAA6D,CAAtDc,CAAP;AACD;;AAED,WAAA,oBAAA,CAAA,QAAA,EAAA,EAAA,EAAwD;AACtDlB,IAAAA,SAAO,CACLH,QAAQ,CAARA,QAAAA,CAAAA,MAAAA,CAAAA,CAAAA,MADK,GAAA,EAAA,+DAEwDI,IAAI,CAAJA,SAAAA,CAFxD,EAEwDA,CAFxD,GAAPD,GAAO,CAAPA;AAMD;;AAED,SAAOe,kBAAkB,CAAA,kBAAA,EAAA,cAAA,EAAA,oBAAA,EAAzB,OAAyB,CAAzB;AAMD,C,CAAA;AAGD;AACA;AACA;;;AAEA,SAAA,SAAA,CAAA,IAAA,EAAA,OAAA,EAA2C;AACzC,MAAI,CAAJ,IAAA,EAAW;AACT;AACA,QAAI,OAAA,OAAA,KAAJ,WAAA,EAAoCM,OAAO,CAAPA,IAAAA,CAAAA,OAAAA;;AAEpC,QAAI;AACF;AACA;AACA;AACA;AACA;AACA,YAAM,IAAA,KAAA,CANJ,OAMI,CAAN,CANE,CAAA;AAAJ,KAAA,CAQE,OAAA,CAAA,EAAU,CAAE;AACf;AACF;;AAED,SAAA,SAAA,GAAkB;AAChB,SAAO1B,IAAI,CAAJA,MAAAA,GAAAA,QAAAA,CAAAA,EAAAA,EAAAA,MAAAA,CAAAA,CAAAA,EAAP,CAAOA,CAAP;AACD;AAED;;AAEG;;;AACH,SAAA,eAAA,CAAA,QAAA,EAA2C;AACzC,SAAO;AACLmB,IAAAA,GAAG,EAAEjB,QAAQ,CADR,KAAA;AAELyB,IAAAA,GAAG,EAAEzB,QAAQ,CAACyB;AAFT,GAAP;AAID;AAED;;AAEG;;;AACG,SAAA,cAAA,CAAA,OAAA,EAAA,EAAA,EAAA,KAAA,EAAA,GAAA,EAIQ;AAAA,MADZ1B,KACY,KAAA,KAAA,CAAA,EAAA;AADZA,IAAAA,KACY,GADC,IAAbA;AACY;;AAEZ,MAAIC,QAAQ,GAAA,QAAA,CAAA;AACVe,IAAAA,QAAQ,EAAE,OAAA,OAAA,KAAA,QAAA,GAAA,OAAA,GAAwCW,OAAO,CAD/C,QAAA;AAEVV,IAAAA,MAAM,EAFI,EAAA;AAGVH,IAAAA,IAAI,EAAE;AAHI,GAAA,EAIN,OAAA,EAAA,KAAA,QAAA,GAAyBM,SAAS,CAAlC,EAAkC,CAAlC,GAJM,EAAA,EAAA;AAKVpB,IAAAA,KALU,EAKVA,KALU;AAMV;AACA;AACA;AACA;AACA0B,IAAAA,GAAG,EAAG,CAAA,EAAe,IAAf,IAAA,GAAA,KAAA,CAAA,GAAA,EAAe,CAAf,GAAA,KAAA,GAAA,IAA+BE,SAAS;AAVpC,GAAA,CAAZ;;AAYA,SAAA,QAAA;AACD;AAED;;AAEG;;;AACa,SAAA,UAAA,CAIA,IAJA,EAIA;AAJW,sBAIX,IAJW,CACzBZ,QADyB;AAAA,MACzBA,QADyB,8BAAA,GAAA;AAAA,oBAIX,IAJW,CAEzBC,MAFyB;AAAA,MAEzBA,MAFyB,4BAAA,EAAA;AAAA,kBAIX,IAJW,CAGzBH,IAHyB;AAAA,MAGzBA,IAHyB,0BAGlB,EAHkB;AAKzB,MAAIG,MAAM,IAAIA,MAAM,KAApB,GAAA,EACED,QAAQ,IAAIC,MAAM,CAANA,MAAAA,CAAAA,CAAAA,MAAAA,GAAAA,GAAAA,MAAAA,GAAoC,MAAhDD,MAAAA;AACF,MAAIF,IAAI,IAAIA,IAAI,KAAhB,GAAA,EACEE,QAAQ,IAAIF,IAAI,CAAJA,MAAAA,CAAAA,CAAAA,MAAAA,GAAAA,GAAAA,IAAAA,GAAgC,MAA5CE,IAAAA;AACF,SAAA,QAAA;AACD;AAED;;AAEG;;;AACG,SAAA,SAAA,CAAA,IAAA,EAAgC;AACpC,MAAIa,UAAU,GAAd,EAAA;;AAEA,MAAA,IAAA,EAAU;AACR,QAAIL,SAAS,GAAGM,IAAI,CAAJA,OAAAA,CAAhB,GAAgBA,CAAhB;;AACA,QAAIN,SAAS,IAAb,CAAA,EAAoB;AAClBK,MAAAA,UAAU,CAAVA,IAAAA,GAAkBC,IAAI,CAAJA,MAAAA,CAAlBD,SAAkBC,CAAlBD;AACAC,MAAAA,IAAI,GAAGA,IAAI,CAAJA,MAAAA,CAAAA,CAAAA,EAAPA,SAAOA,CAAPA;AACD;;AAED,QAAIC,WAAW,GAAGD,IAAI,CAAJA,OAAAA,CAAlB,GAAkBA,CAAlB;;AACA,QAAIC,WAAW,IAAf,CAAA,EAAsB;AACpBF,MAAAA,UAAU,CAAVA,MAAAA,GAAoBC,IAAI,CAAJA,MAAAA,CAApBD,WAAoBC,CAApBD;AACAC,MAAAA,IAAI,GAAGA,IAAI,CAAJA,MAAAA,CAAAA,CAAAA,EAAPA,WAAOA,CAAPA;AACD;;AAED,QAAA,IAAA,EAAU;AACRD,MAAAA,UAAU,CAAVA,QAAAA,GAAAA,IAAAA;AACD;AACF;;AAED,SAAA,UAAA;AACD;;AASD,SAAA,kBAAA,CAAA,WAAA,EAAA,WAAA,EAAA,gBAAA,EAAA,OAAA,EAIiC;AAAA,MAA/BxC,OAA+B,KAAA,KAAA,CAAA,EAAA;AAA/BA,IAAAA,OAA+B,GAAF,EAA7BA;AAA+B;;AAE/B,kBAAA,OAAA;AAAA,mCAAM0B,MAAN;AAAA,MAAMA,MAAN,iCAAeiB,QAAQ,CAAnB,WAAJ;AAAA,qCAAsCzC,QAAtC;AAAA,MAAsCA,QAAtC,mCAAiD,KAAjD;AACA,MAAI0C,aAAa,GAAGlB,MAAM,CAA1B,OAAA;AACA,MAAIlB,MAAM,GAAGV,MAAM,CAAnB,GAAA;AACA,MAAIW,QAAQ,GAAZ,IAAA;;AAEA,WAAA,SAAA,GAAkB;AAChBD,IAAAA,MAAM,GAAGV,MAAM,CAAfU,GAAAA;;AACA,QAAA,QAAA,EAAc;AACZC,MAAAA,QAAQ,CAAC;AAAED,QAAAA,MAAF,EAAEA,MAAF;AAAUI,QAAAA,QAAQ,EAAEK,OAAO,CAACL;AAA5B,OAAD,CAARH;AACD;AACF;;AAED,WAAA,IAAA,CAAA,EAAA,EAAA,KAAA,EAAiC;AAC/BD,IAAAA,MAAM,GAAGV,MAAM,CAAfU,IAAAA;AACA,QAAII,QAAQ,GAAGC,cAAc,CAACI,OAAO,CAAR,QAAA,EAAA,EAAA,EAA7B,KAA6B,CAA7B;AACA4B,IAAAA,gBAAgB,IAAhBA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,gBAAgB,CAAA,QAAA,EAAhBA,EAAgB,CAAhBA;AAEA,QAAIC,YAAY,GAAGC,eAAe,CAAlC,QAAkC,CAAlC;AACA,QAAIb,GAAG,GAAGjB,OAAO,CAAPA,UAAAA,CANqB,QAMrBA,CAAV,CAN+B,CAAA;;AAS/B,QAAI;AACF2B,MAAAA,aAAa,CAAbA,SAAAA,CAAAA,YAAAA,EAAAA,EAAAA,EAAAA,GAAAA;AADF,KAAA,CAEE,OAAA,KAAA,EAAc;AACd;AACA;AACAlB,MAAAA,MAAM,CAANA,QAAAA,CAAAA,MAAAA,CAAAA,GAAAA;AACD;;AAED,QAAIxB,QAAQ,IAAZ,QAAA,EAA0B;AACxBO,MAAAA,QAAQ,CAAC;AAAED,QAAAA,MAAF,EAAEA,MAAF;AAAUI,QAAAA,QAAAA,EAAAA;AAAV,OAAD,CAARH;AACD;AACF;;AAED,WAAA,OAAA,CAAA,EAAA,EAAA,KAAA,EAAoC;AAClCD,IAAAA,MAAM,GAAGV,MAAM,CAAfU,OAAAA;AACA,QAAII,QAAQ,GAAGC,cAAc,CAACI,OAAO,CAAR,QAAA,EAAA,EAAA,EAA7B,KAA6B,CAA7B;AACA4B,IAAAA,gBAAgB,IAAhBA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,gBAAgB,CAAA,QAAA,EAAhBA,EAAgB,CAAhBA;AAEA,QAAIC,YAAY,GAAGC,eAAe,CAAlC,QAAkC,CAAlC;AACA,QAAIb,GAAG,GAAGjB,OAAO,CAAPA,UAAAA,CAAV,QAAUA,CAAV;AACA2B,IAAAA,aAAa,CAAbA,YAAAA,CAAAA,YAAAA,EAAAA,EAAAA,EAAAA,GAAAA;;AAEA,QAAI1C,QAAQ,IAAZ,QAAA,EAA0B;AACxBO,MAAAA,QAAQ,CAAC;AAAED,QAAAA,MAAF,EAAEA,MAAF;AAAUI,QAAAA,QAAQ,EAAEA;AAApB,OAAD,CAARH;AACD;AACF;;AAED,MAAIQ,OAAO,GAAY;AACrB,QAAA,MAAA,GAAU;AACR,aAAA,MAAA;AAFmB,KAAA;;AAIrB,QAAA,QAAA,GAAY;AACV,aAAO+B,WAAW,CAAA,MAAA,EAAlB,aAAkB,CAAlB;AALmB,KAAA;;AAOrBxB,IAAAA,MAPqB,kBAOf,EAPe,EAOF;AACjB,UAAA,QAAA,EAAc;AACZ,cAAM,IAAA,KAAA,CAAN,4CAAM,CAAN;AACD;;AACDE,MAAAA,MAAM,CAANA,gBAAAA,CAAAA,iBAAAA,EAAAA,SAAAA;AACAjB,MAAAA,QAAQ,GAARA,EAAAA;AAEA,aAAO,YAAK;AACViB,QAAAA,MAAM,CAANA,mBAAAA,CAAAA,iBAAAA,EAAAA,SAAAA;AACAjB,QAAAA,QAAQ,GAARA,IAAAA;AAFF,OAAA;AAdmB,KAAA;AAmBrBS,IAAAA,UAnBqB,sBAmBX,EAnBW,EAmBR;AACX,aAAOA,WAAU,CAAA,MAAA,EAAjB,EAAiB,CAAjB;AApBmB,KAAA;AAsBrBE,IAAAA,IAtBqB,EAsBrBA,IAtBqB;AAuBrBE,IAAAA,OAvBqB,EAuBrBA,OAvBqB;AAwBrBC,IAAAA,EAxBqB,cAwBnB,CAxBmB,EAwBjB;AACF,aAAOqB,aAAa,CAAbA,EAAAA,CAAP,CAAOA,CAAP;AACD;AA1BoB,GAAvB;AA6BA,SAAA,OAAA;AACD,C,CAAA;;;AC9lBD,IAAA,UAAA;;AAAA,CAAA,UAAA,UAAA,EAAsB;AACpBK,EAAAA,UAAAA,CAAAA,MAAAA,CAAAA,GAAAA,MAAAA;AACAA,EAAAA,UAAAA,CAAAA,UAAAA,CAAAA,GAAAA,UAAAA;AACAA,EAAAA,UAAAA,CAAAA,UAAAA,CAAAA,GAAAA,UAAAA;AACAA,EAAAA,UAAAA,CAAAA,OAAAA,CAAAA,GAAAA,OAAAA;AAJF,CAAA,EAAYA,UAAU,KAAVA,UAAU,GAAtB,EAAsB,CAAtB,E,CAAA;AAgOA;;;AACM,SAAA,yBAAA,CAAA,MAAA,EAAA,UAAA,EAAA,MAAA,EAGmC;AAAA,MADvCC,UACuC,KAAA,KAAA,CAAA,EAAA;AADvCA,IAAAA,UACuC,GADhB,EAAvBA;AACuC;;AAAA,MAAvCC,MAAuC,KAAA,KAAA,CAAA,EAAA;AAAvCA,IAAAA,MAAuC,GAAjB,IAAA,GAAA,EAAtBA;AAAuC;;AAEvC,SAAO,MAAM,CAAN,GAAA,CAAW,UAAA,KAAA,EAAA,KAAA,EAAiB;AACjC,QAAIC,QAAQ,gCAAG,UAAH,IAAZ,KAAY,EAAZ;AACA,QAAIC,EAAE,GAAG,OAAOC,KAAK,CAAZ,EAAA,KAAA,QAAA,GAA+BA,KAAK,CAApC,EAAA,GAA0CF,QAAQ,CAARA,IAAAA,CAAnD,GAAmDA,CAAnD;AACAG,IAAAA,SAAS,CACP,CAACJ,MAAM,CAANA,GAAAA,CADM,EACNA,CADM,EAEP,wCAAA,EAAA,GAAA,aAAA,GAFFI,wDAAS,CAATA;AAKAJ,IAAAA,MAAM,CAANA,GAAAA,CAAAA,EAAAA;;AACA,QAAIK,SAAS,GAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEXH,MAAAA,EAFW,EAEXA,EAFW;AAGXI,MAAAA,QAAQ,EAAEH,KAAK,CAALA,QAAAA,GACNI,yBAAyB,CAACJ,KAAK,CAAN,QAAA,EAAA,QAAA,EADnBA,MACmB,CADnBA,GAENK;AALO,KAAA,CAAb;;AAOA,WAAA,SAAA;AAhBF,GAAO,CAAP;AAkBD;AAED;;;;AAIG;;;AACG,SAAA,WAAA,CAAA,MAAA,EAAA,WAAA,EAAA,QAAA,EAKU;AAAA,MAAdC,QAAc,KAAA,KAAA,CAAA,EAAA;AAAdA,IAAAA,QAAc,GAAH,GAAXA;AAAc;;AAEd,MAAIhD,QAAQ,GACV,OAAA,WAAA,KAAA,QAAA,GAAkCmB,SAAS,CAA3C,WAA2C,CAA3C,GADF,WAAA;AAGA,MAAIJ,QAAQ,GAAGkC,aAAa,CAACjD,QAAQ,CAARA,QAAAA,IAAD,GAAA,EAA5B,QAA4B,CAA5B;;AAEA,MAAIe,QAAQ,IAAZ,IAAA,EAAsB;AACpB,WAAA,IAAA;AACD;;AAED,MAAImC,QAAQ,GAAGC,aAAa,CAA5B,MAA4B,CAA5B;AACAC,EAAAA,iBAAiB,CAAjBA,QAAiB,CAAjBA;AAEA,MAAIC,OAAO,GAAX,IAAA;;AACA,OAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBD,OAAO,IAAPA,IAAAA,IAAmBC,CAAC,GAAGJ,QAAQ,CAA/C,MAAA,EAAwD,EAAxD,CAAA,EAA6D;AAC3DG,IAAAA,OAAO,GAAGE,gBAAgB,CAA0BL,QAAQ,CAAlC,CAAkC,CAAlC,EAA1BG,QAA0B,CAA1BA;AACD;;AAED,SAAA,OAAA;AACD;;AAmBD,SAAA,aAAA,CAAA,MAAA,EAAA,QAAA,EAAA,WAAA,EAAA,UAAA,EAMiB;AAAA,MAFfH,QAEe,KAAA,KAAA,CAAA,EAAA;AAFfA,IAAAA,QAEe,GAF4B,EAA3CA;AAEe;;AAAA,MADfM,WACe,KAAA,KAAA,CAAA,EAAA;AADfA,IAAAA,WACe,GAD6B,EAA5CA;AACe;;AAAA,MAAflB,UAAe,KAAA,KAAA,CAAA,EAAA;AAAfA,IAAAA,UAAe,GAAF,EAAbA;AAAe;;AAEfmB,EAAAA,MAAM,CAANA,OAAAA,CAAe,UAAA,KAAA,EAAA,KAAA,EAAiB;AAC9B,QAAIC,IAAI,GAA+B;AACrCC,MAAAA,YAAY,EAAEjB,KAAK,CAALA,IAAAA,IADuB,EAAA;AAErCkB,MAAAA,aAAa,EAAElB,KAAK,CAALA,aAAAA,KAFsB,IAAA;AAGrCmB,MAAAA,aAAa,EAHwB,KAAA;AAIrCnB,MAAAA,KAAAA,EAAAA;AAJqC,KAAvC;;AAOA,QAAIgB,IAAI,CAAJA,YAAAA,CAAAA,UAAAA,CAAJ,GAAIA,CAAJ,EAAuC;AACrCf,MAAAA,SAAS,CACPe,IAAI,CAAJA,YAAAA,CAAAA,UAAAA,CADO,UACPA,CADO,EAEP,2BAAwBA,IAAI,CAA5B,YAAA,GACMpB,uBADN,IACMA,OADN,UACMA,GADN,gDAAA,IAFFK,6DAAS,CAATA;AAOAe,MAAAA,IAAI,CAAJA,YAAAA,GAAoBA,IAAI,CAAJA,YAAAA,CAAAA,KAAAA,CAAwBpB,UAAU,CAAtDoB,MAAoBA,CAApBA;AACD;;AAED,QAAI7B,IAAI,GAAGiC,SAAS,CAAC,CAAA,UAAA,EAAaJ,IAAI,CAAtC,YAAqB,CAAD,CAApB;AACA,QAAIK,UAAU,GAAGP,WAAW,CAAXA,MAAAA,CApBa,IAoBbA,CAAjB,CApB8B,CAAA;AAuB9B;AACA;;AACA,QAAId,KAAK,CAALA,QAAAA,IAAkBA,KAAK,CAALA,QAAAA,CAAAA,MAAAA,GAAtB,CAAA,EAAiD;AAC/CC,MAAAA,SAAS,CACPD,KAAK,CAALA,KAAAA,KADO,IAAA,EAEP,6DAAA,wCAAA,IAAA,GAFFC,KAEE,CAFO,CAATA;AAMAQ,MAAAA,aAAa,CAACT,KAAK,CAAN,QAAA,EAAA,QAAA,EAAA,UAAA,EAAbS,IAAa,CAAbA;AAhC4B,KAAA,CAAA;AAoC9B;;;AACA,QAAIT,KAAK,CAALA,IAAAA,IAAAA,IAAAA,IAAsB,CAACA,KAAK,CAAhC,KAAA,EAAwC;AACtC;AACD;;AAEDQ,IAAAA,QAAQ,CAARA,IAAAA,CAAc;AAAErB,MAAAA,IAAF,EAAEA,IAAF;AAAQmC,MAAAA,KAAK,EAAEC,YAAY,CAAA,IAAA,EAAOvB,KAAK,CAAvC,KAA2B,CAA3B;AAAgDqB,MAAAA,UAAAA,EAAAA;AAAhD,KAAdb;AAzCFO,GAAAA;AA4CA,SAAA,QAAA;AACD;;AAED,SAAA,iBAAA,CAAA,QAAA,EAAkD;AAChDP,EAAAA,QAAQ,CAARA,IAAAA,CAAc,UAAA,CAAA,EAAA,CAAA;AAAA,WACZgB,CAAC,CAADA,KAAAA,KAAYC,CAAC,CAAbD,KAAAA,GACIC,CAAC,CAADA,KAAAA,GAAUD,CAAC,CADfA,KAAAA,CAAAA;AAAAA,MAEIE,cAAc,CACZF,CAAC,CAADA,UAAAA,CAAAA,GAAAA,CAAkBR,UAAAA,IAAD;AAAA,aAAUA,IAAI,CADnB,aACK;AAAA,KAAjBQ,CADY,EAEZC,CAAC,CAADA,UAAAA,CAAAA,GAAAA,CAAkBT,UAAAA,IAAD;AAAA,aAAUA,IAAI,CALvCR,aAKyB;AAAA,KAAjBiB,CAFY,CAHN;AAAA,GAAdjB;AAQD;;AAED,IAAMmB,OAAO,GAAb,QAAA;AACA,IAAMC,mBAAmB,GAAzB,CAAA;AACA,IAAMC,eAAe,GAArB,CAAA;AACA,IAAMC,iBAAiB,GAAvB,CAAA;AACA,IAAMC,kBAAkB,GAAxB,EAAA;AACA,IAAMC,YAAY,GAAG,CAArB,CAAA;;AACA,IAAMC,OAAO,GAAIC,SAAXD,OAAWC,CAAAA,CAAD;AAAA,SAAeA,CAAC,KAAhC,GAAgB;AAAA,CAAhB;;AAEA,SAAA,YAAA,CAAA,IAAA,EAAA,KAAA,EAA8D;AAC5D,MAAIC,QAAQ,GAAGhD,IAAI,CAAJA,KAAAA,CAAf,GAAeA,CAAf;AACA,MAAIiD,YAAY,GAAGD,QAAQ,CAA3B,MAAA;;AACA,MAAIA,QAAQ,CAARA,IAAAA,CAAJ,OAAIA,CAAJ,EAA4B;AAC1BC,IAAAA,YAAY,IAAZA,YAAAA;AACD;;AAED,MAAA,KAAA,EAAW;AACTA,IAAAA,YAAY,IAAZA,eAAAA;AACD;;AAED,SAAOD,QAAQ,CAARA,MAAAA,CACID,UAAAA,CAAD;AAAA,WAAO,CAACD,OAAO,CADlBE,CACkB,CAAf;AAAA,GADHA,EAAAA,MAAAA,CAGH,UAAA,KAAA,EAAA,OAAA;AAAA,WACEb,KAAK,IACJK,OAAO,CAAPA,IAAAA,CAAAA,OAAAA,IAAAA,mBAAAA,GAEGU,OAAO,KAAPA,EAAAA,GAAAA,iBAAAA,GAPHF,kBAII,CADP;AAAA,GAHGA,EAAP,YAAOA,CAAP;AAYD;;AAED,SAAA,cAAA,CAAA,CAAA,EAAA,CAAA,EAAgD;AAC9C,MAAIG,QAAQ,GACVd,CAAC,CAADA,MAAAA,KAAaC,CAAC,CAAdD,MAAAA,IAAyBA,CAAC,CAADA,KAAAA,CAAAA,CAAAA,EAAW,CAAXA,CAAAA,EAAAA,KAAAA,CAAqB,UAAA,CAAA,EAAA,CAAA;AAAA,WAAUe,CAAC,KAAKd,CAAC,CADjE,CACiE,CAAjB;AAAA,GAArBD,CAD3B;AAGA,SAAOc,QAAQ,GAAA;AAEX;AACA;AACA;AACAd,EAAAA,CAAC,CAACA,CAAC,CAADA,MAAAA,GAAFA,CAAC,CAADA,GAAkBC,CAAC,CAACA,CAAC,CAADA,MAAAA,GALT,CAKQ,CALR,GAAA;AAOX;AAPJ,GAAA;AASD;;AAED,SAAA,gBAAA,CAAA,MAAA,EAAA,QAAA,EAKkB;AAEhB,MAAMJ,UAAN,GAAA,MAAA,CAAMA,UAAN;AAEA,MAAImB,aAAa,GAAjB,EAAA;AACA,MAAIC,eAAe,GAAnB,GAAA;AACA,MAAI9B,OAAO,GAAX,EAAA;;AACA,OAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGS,UAAU,CAA9B,MAAA,EAAuC,EAAvC,CAAA,EAA4C;AAC1C,QAAIL,IAAI,GAAGK,UAAU,CAArB,CAAqB,CAArB;AACA,QAAIqB,GAAG,GAAG9B,CAAC,KAAKS,UAAU,CAAVA,MAAAA,GAAhB,CAAA;AACA,QAAIsB,iBAAiB,GACnBF,eAAe,KAAfA,GAAAA,GAAAA,QAAAA,GAEIpE,QAAQ,CAARA,KAAAA,CAAeoE,eAAe,CAA9BpE,MAAAA,KAHN,GAAA;AAIA,QAAIuE,KAAK,GAAGC,SAAS,CACnB;AAAE1D,MAAAA,IAAI,EAAE6B,IAAI,CAAZ,YAAA;AAA2BE,MAAAA,aAAa,EAAEF,IAAI,CAA9C,aAAA;AAA8D0B,MAAAA,GAAAA,EAAAA;AAA9D,KADmB,EAArB,iBAAqB,CAArB;AAKA,QAAI,CAAJ,KAAA,EAAY,OAAA,IAAA;AAEZI,IAAAA,MAAM,CAANA,MAAAA,CAAAA,aAAAA,EAA6BF,KAAK,CAAlCE,MAAAA;AAEA,QAAI9C,KAAK,GAAGgB,IAAI,CAAhB,KAAA;AAEAL,IAAAA,OAAO,CAAPA,IAAAA,CAAa;AACX;AACAoC,MAAAA,MAAM,EAFK,aAAA;AAGX1E,MAAAA,QAAQ,EAAE+C,SAAS,CAAC,CAAA,eAAA,EAAkBwB,KAAK,CAHhC,QAGS,CAAD,CAHR;AAIXI,MAAAA,YAAY,EAAEC,iBAAiB,CAC7B7B,SAAS,CAAC,CAAA,eAAA,EAAkBwB,KAAK,CALxB,YAKC,CAAD,CADoB,CAJpB;AAOX5C,MAAAA,KAAAA,EAAAA;AAPW,KAAbW;;AAUA,QAAIiC,KAAK,CAALA,YAAAA,KAAJ,GAAA,EAAgC;AAC9BH,MAAAA,eAAe,GAAGrB,SAAS,CAAC,CAAA,eAAA,EAAkBwB,KAAK,CAAnDH,YAA4B,CAAD,CAA3BA;AACD;AACF;;AAED,SAAA,OAAA;AACD;AAED;;;;AAIG;;;SACaS,Y,CACd/D,I,EACA4D,M,EAEa;AAAA,MAFbA,MAEa,KAAA,KAAA,CAAA,EAAA;AAFbA,IAAAA,MAEa,GAAT,EAFJA;AAEa;;AAEb,SAAO,IAAI,CAAJ,OAAA,CAAA,SAAA,EACe,UAAA,CAAA,EAAA,GAAA,EAA4B;AAC9C9C,IAAAA,SAAS,CAAC8C,MAAM,CAANA,GAAM,CAANA,IAAD,IAAA,EAAmChE,gBAAnC,GAAmCA,GAA5CkB,UAAS,CAATA;AACA,WAAO8C,MAAM,CAAb,GAAa,CAAb;AAHG,GAAA,EAAA,OAAA,CAAA,SAAA,EAKe,UAAA,CAAA,EAAA,MAAA,EAAA,EAAA,EAAA,GAAA,EAAuB;AACzC,QAAMI,IAAI,GAAV,GAAA;;AAEA,QAAIJ,MAAM,CAANA,IAAM,CAANA,IAAJ,IAAA,EAA0B;AACxB;AACA;AACA,aAAOK,GAAG,KAAHA,IAAAA,GAAAA,GAAAA,GAAP,EAAA;AANuC,KAAA,CAAA;;;AAUzC,WAAA,KAAA,MAAA,GAAmBL,MAAM,CAAzB,IAAyB,CAAzB;AAfJ,GAAO,CAAP;AAiBD;AAiDD;;;;;AAKG;;;AACa,SAAA,SAAA,CAAA,OAAA,EAAA,QAAA,EAKE;AAEhB,MAAI,OAAA,OAAA,KAAJ,QAAA,EAAiC;AAC/BM,IAAAA,OAAO,GAAG;AAAElE,MAAAA,IAAI,EAAN,OAAA;AAAiB+B,MAAAA,aAAa,EAA9B,KAAA;AAAuCwB,MAAAA,GAAG,EAAE;AAA5C,KAAVW;AACD;;AAED,qBAA4BC,WAAW,CACrCD,OAAO,CAD8B,IAAA,EAErCA,OAAO,CAF8B,aAAA,EAGrCA,OAAO,CAHT,GAAuC,CAAvC;AAAA;AAAA,MAAI,OAAJ;AAAA,MAAI,UAAJ;;AAMA,MAAIT,KAAK,GAAGvE,QAAQ,CAARA,KAAAA,CAAZ,OAAYA,CAAZ;AACA,MAAI,CAAJ,KAAA,EAAY,OAAA,IAAA;AAEZ,MAAIoE,eAAe,GAAGG,KAAK,CAA3B,CAA2B,CAA3B;AACA,MAAII,YAAY,GAAGP,eAAe,CAAfA,OAAAA,CAAAA,SAAAA,EAAnB,IAAmBA,CAAnB;AACA,MAAIc,aAAa,GAAGX,KAAK,CAALA,KAAAA,CAApB,CAAoBA,CAApB;AACA,MAAIG,MAAM,GAAW,UAAU,CAAV,MAAA,CACnB,UAAA,IAAA,EAAA,SAAA,EAAA,KAAA,EAA2B;AACzB;AACA;AACA,QAAIS,SAAS,KAAb,GAAA,EAAuB;AACrB,UAAIC,UAAU,GAAGF,aAAa,CAAbA,KAAa,CAAbA,IAAjB,EAAA;AACAP,MAAAA,YAAY,GAAGP,eAAe,CAAfA,KAAAA,CAAAA,CAAAA,EACHA,eAAe,CAAfA,MAAAA,GAAyBgB,UAAU,CADhChB,MAAAA,EAAAA,OAAAA,CAAAA,SAAAA,EAAfO,IAAeP,CAAfO;AAGD;;AAEDU,IAAAA,IAAI,CAAJA,SAAI,CAAJA,GAAkBC,wBAAwB,CACxCJ,aAAa,CAAbA,KAAa,CAAbA,IADwC,EAAA,EAA1CG,SAA0C,CAA1CA;AAIA,WAAA,IAAA;AAfiB,GAAA,EAArB,EAAqB,CAArB;AAoBA,SAAO;AACLX,IAAAA,MADK,EACLA,MADK;AAEL1E,IAAAA,QAAQ,EAFH,eAAA;AAGL2E,IAAAA,YAHK,EAGLA,YAHK;AAILK,IAAAA,OAAAA,EAAAA;AAJK,GAAP;AAMD;;AAED,SAAA,WAAA,CAAA,IAAA,EAAA,aAAA,EAAA,GAAA,EAGY;AAAA,MADVnC,aACU,KAAA,KAAA,CAAA,EAAA;AADVA,IAAAA,aACU,GADM,KAAhBA;AACU;;AAAA,MAAVwB,GAAU,KAAA,KAAA,CAAA,EAAA;AAAVA,IAAAA,GAAU,GAAJ,IAANA;AAAU;;AAEVjF,EAAAA,OAAO,CACL0B,IAAI,KAAJA,GAAAA,IAAgB,CAACA,IAAI,CAAJA,QAAAA,CAAjBA,GAAiBA,CAAjBA,IAAuCA,IAAI,CAAJA,QAAAA,CADlC,IACkCA,CADlC,EAEL,kBAAA,IAAA,GAAA,mCAAA,IAAA,OACMA,IAAI,CAAJA,OAAAA,CAAAA,KAAAA,EADN,IACMA,CADN,GAAA,oCAAA,IAAA,kEAAA,IAAA,uCAGsCA,IAAI,CAAJA,OAAAA,CAAAA,KAAAA,EAHtC,IAGsCA,CAHtC,GAFF1B,KAEE,CAFK,CAAPA;AAQA,MAAImG,UAAU,GAAd,EAAA;AACA,MAAIC,YAAY,GACd,MACA,IAAI,CAAJ,OAAA,CAAA,SAAA,EAAA,EAAA,EAC0B;AAD1B,GAAA,OAAA,CAAA,MAAA,EAAA,GAAA,EAEwB;AAFxB,GAAA,OAAA,CAAA,qBAAA,EAAA,MAAA,EAG0C;AAH1C,GAAA,OAAA,CAAA,SAAA,EAIsB,UAAA,CAAA,EAAA,SAAA,EAAiC;AACnDD,IAAAA,UAAU,CAAVA,IAAAA,CAAAA,SAAAA;AACA,WAAA,WAAA;AARN,GAEE,CAFF;;AAWA,MAAIzE,IAAI,CAAJA,QAAAA,CAAJ,GAAIA,CAAJ,EAAwB;AACtByE,IAAAA,UAAU,CAAVA,IAAAA,CAAAA,GAAAA;AACAC,IAAAA,YAAY,IACV1E,IAAI,KAAJA,GAAAA,IAAgBA,IAAI,KAApBA,IAAAA,GAAAA,OAAAA,CAAAA;AAAAA,MAHoB,mBAEtB0E,CAFsB,CAAA;AAAxB,GAAA,MAMO;AACLA,IAAAA,YAAY,IAAInB,GAAG,GAAA,OAAA,CAAA;AAAA,M;AAGf;AACA;AACA;AACA;AACA;AAPJmB,2CAAAA;AASD;;AAED,MAAIC,OAAO,GAAG,IAAA,MAAA,CAAA,YAAA,EAAyB5C,aAAa,GAAA,SAAA,GAApD,GAAc,CAAd;AAEA,SAAO,CAAA,OAAA,EAAP,UAAO,CAAP;AACD;;AAED,SAAA,wBAAA,CAAA,KAAA,EAAA,SAAA,EAAkE;AAChE,MAAI;AACF,WAAO6C,kBAAkB,CAAzB,KAAyB,CAAzB;AADF,GAAA,CAEE,OAAA,KAAA,EAAc;AACdtG,IAAAA,OAAO,CAAA,KAAA,EAEL,mCAAA,SAAA,GAAA,gCAAA,IAAA,mBAAA,KAAA,GAAA,iDAAA,KAAA,qCAAA,KAAA,GAFFA,IAEE,CAFK,CAAPA;AAOA,WAAA,KAAA;AACD;AACF;AAED;;AAEG;;;AACa,SAAA,aAAA,CAAA,QAAA,EAAA,QAAA,EAEE;AAEhB,MAAI6C,QAAQ,KAAZ,GAAA,EAAsB,OAAA,QAAA;;AAEtB,MAAI,CAACjC,QAAQ,CAARA,WAAAA,GAAAA,UAAAA,CAAkCiC,QAAQ,CAA/C,WAAuCA,EAAlCjC,CAAL,EAAgE;AAC9D,WAAA,IAAA;AALc,GAAA,CAAA;AAShB;;;AACA,MAAI2F,UAAU,GAAG1D,QAAQ,CAARA,QAAAA,CAAAA,GAAAA,IACbA,QAAQ,CAARA,MAAAA,GADaA,CAAAA,GAEbA,QAAQ,CAFZ,MAAA;AAGA,MAAI2D,QAAQ,GAAG5F,QAAQ,CAARA,MAAAA,CAAf,UAAeA,CAAf;;AACA,MAAI4F,QAAQ,IAAIA,QAAQ,KAAxB,GAAA,EAAkC;AAChC;AACA,WAAA,IAAA;AACD;;AAED,SAAO5F,QAAQ,CAARA,KAAAA,CAAAA,UAAAA,KAAP,GAAA;AACD;;AAUe,SAAA,SAAA,CAAA,KAAA,EAAA,OAAA,EAAsC;AACpD,MAAI6F,KAAK,KAALA,KAAAA,IAAmBA,KAAK,KAAxBA,IAAAA,IAAqC,OAAA,KAAA,KAAzC,WAAA,EAAuE;AACrE,UAAM,IAAA,KAAA,CAAN,OAAM,CAAN;AACD;AACF;AAED;;AAEG;;;AACa,SAAA,OAAA,CAAA,IAAA,EAAA,OAAA,EAAkC;AAChD,MAAI,CAAJ,IAAA,EAAW;AACT;AACA,QAAI,OAAA,OAAA,KAAJ,WAAA,EAAoCpF,OAAO,CAAPA,IAAAA,CAAAA,OAAAA;;AAEpC,QAAI;AACF;AACA;AACA;AACA;AACA;AACA,YAAM,IAAA,KAAA,CANJ,OAMI,CAAN,CANE,CAAA;AAAJ,KAAA,CAQE,OAAA,CAAA,EAAU,CAAE;AACf;AACF;AAED;;;;AAIG;;;SACaqF,W,CAAYC,E,EAAQC,Y,EAAkB;AAAA,MAAlBA,YAAkB,KAAA,KAAA,CAAA,EAAA;AAAlBA,IAAAA,YAAkB,GAAH,GAAfA;AAAkB;;AACpD,eAII,OAAA,EAAA,KAAA,QAAA,GAAyB5F,SAAS,CAAlC,EAAkC,CAAlC,GAJJ,EAAA;AAAA,MAAI,UAAJ,UACEJ,QADF;AAAA,6BAEEC,MAFF;AAAA,MAEEA,MAFF,8BAAI,EAAJ;AAAA,2BAGEH,IAHF;AAAA,MAGEA,IAHF,4BAGS,EAHT;;AAMA,MAAIE,QAAQ,GAAGiG,UAAU,GACrBA,UAAU,CAAVA,UAAAA,CAAAA,GAAAA,IAAAA,UAAAA,GAEEC,eAAe,CAAA,UAAA,EAHI,YAGJ,CAHI,GAAzB,YAAA;AAMA,SAAO;AACLlG,IAAAA,QADK,EACLA,QADK;AAELC,IAAAA,MAAM,EAAEkG,eAAe,CAFlB,MAEkB,CAFlB;AAGLrG,IAAAA,IAAI,EAAEsG,aAAa,CAAA,IAAA;AAHd,GAAP;AAKD;;AAED,SAAA,eAAA,CAAA,YAAA,EAAA,YAAA,EAAmE;AACjE,MAAItC,QAAQ,GAAGkC,YAAY,CAAZA,OAAAA,CAAAA,MAAAA,EAAAA,EAAAA,EAAAA,KAAAA,CAAf,GAAeA,CAAf;AACA,MAAIK,gBAAgB,GAAGzD,YAAY,CAAZA,KAAAA,CAAvB,GAAuBA,CAAvB;AAEAyD,EAAAA,gBAAgB,CAAhBA,OAAAA,CAA0BrC,UAAAA,OAAD,EAAY;AACnC,QAAIA,OAAO,KAAX,IAAA,EAAsB;AACpB;AACA,UAAIF,QAAQ,CAARA,MAAAA,GAAJ,CAAA,EAAyBA,QAAQ,CAARA,GAAAA;AAF3B,KAAA,MAGO,IAAIE,OAAO,KAAX,GAAA,EAAqB;AAC1BF,MAAAA,QAAQ,CAARA,IAAAA,CAAAA,OAAAA;AACD;AANHuC,GAAAA;AASA,SAAOvC,QAAQ,CAARA,MAAAA,GAAAA,CAAAA,GAAsBA,QAAQ,CAARA,IAAAA,CAAtBA,GAAsBA,CAAtBA,GAAP,GAAA;AACD;AAED;;AAEG;;;AACG,SAAA,SAAA,CAAA,KAAA,EAAA,cAAA,EAAA,gBAAA,EAAA,cAAA,EAIkB;AAAA,MAAtBwC,cAAsB,KAAA,KAAA,CAAA,EAAA;AAAtBA,IAAAA,cAAsB,GAAL,KAAjBA;AAAsB;;AAEtB,MAAIP,EAAE,GAAG,OAAA,KAAA,KAAA,QAAA,GAA4B3F,SAAS,CAArC,KAAqC,CAArC,GAAA,QAAA,CAAA,EAAA,EAAT,KAAS,CAAT;AACA,MAAImG,WAAW,GAAGC,KAAK,KAALA,EAAAA,IAAgBT,EAAE,CAAFA,QAAAA,KAAlC,EAAA;AACA,MAAIE,UAAU,GAAGM,WAAW,GAAA,GAAA,GAASR,EAAE,CAAvC,QAAA;AAEA,MANsB,IAMtB,CANsB,CAAA;AAStB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAIO,cAAc,IAAIL,UAAU,IAAhC,IAAA,EAA0C;AACxCQ,IAAAA,IAAI,GAAJA,gBAAAA;AADF,GAAA,MAEO;AACL,QAAIC,kBAAkB,GAAGC,cAAc,CAAdA,MAAAA,GAAzB,CAAA;;AAEA,QAAIV,UAAU,CAAVA,UAAAA,CAAJ,IAAIA,CAAJ,EAAiC;AAC/B,UAAIW,UAAU,GAAGX,UAAU,CAAVA,KAAAA,CADc,GACdA,CAAjB,CAD+B,CAAA;AAI/B;AACA;;AACA,aAAOW,UAAU,CAAVA,CAAU,CAAVA,KAAP,IAAA,EAA+B;AAC7BA,QAAAA,UAAU,CAAVA,KAAAA;AACAF,QAAAA,kBAAkB,IAAlBA,CAAAA;AACD;;AAEDX,MAAAA,EAAE,CAAFA,QAAAA,GAAca,UAAU,CAAVA,IAAAA,CAAdb,GAAca,CAAdb;AAdG,KAAA,CAAA;AAkBL;;;AACAU,IAAAA,IAAI,GAAGC,kBAAkB,IAAlBA,CAAAA,GAA0BC,cAAc,CAAxCD,kBAAwC,CAAxCA,GAAPD,GAAAA;AACD;;AAED,MAAI3F,IAAI,GAAGgF,WAAW,CAAA,EAAA,EAzCA,IAyCA,CAAtB,CAzCsB,CAAA;;AA4CtB,MAAIe,wBAAwB,GAC1BZ,UAAU,IAAIA,UAAU,KAAxBA,GAAAA,IAAoCA,UAAU,CAAVA,QAAAA,CA7ChB,GA6CgBA,CADtC,CA5CsB,CAAA;;AA+CtB,MAAIa,uBAAuB,GACzB,CAACP,WAAW,IAAIN,UAAU,KAA1B,GAAA,KAAuCc,gBAAgB,CAAhBA,QAAAA,CADzC,GACyCA,CADzC;;AAEA,MACE,CAACjG,IAAI,CAAJA,QAAAA,CAAAA,QAAAA,CAAD,GAACA,CAAD,KACC+F,wBAAwB,IAF3B,uBACE,CADF,EAGE;AACA/F,IAAAA,IAAI,CAAJA,QAAAA,IAAAA,GAAAA;AACD;;AAED,SAAA,IAAA;AACD;AAED;;AAEG;;;AACG,SAAA,aAAA,CAAA,EAAA,EAA8B;AAClC;AACA,SAAOiF,EAAE,KAAFA,EAAAA,IAAcA,EAAW,CAAXA,QAAAA,KAAdA,EAAAA,GAAAA,GAAAA,GAEH,OAAA,EAAA,KAAA,QAAA,GACA3F,SAAS,CAATA,EAAS,CAATA,CADA,QAAA,GAEA2F,EAAE,CAJN,QAAA;AAKD;AAED;;AAEG;;;IACUhD,SAAS,GAAIiE,SAAbjE,SAAaiE,CAAAA,KAAD;AAAA,SACvBA,KAAK,CAALA,IAAAA,CAAAA,GAAAA,EAAAA,OAAAA,CAAAA,QAAAA,EADK,GACLA,CADuB;AAAA,C;AAGzB;;AAEG;;;IACUpC,iBAAiB,GAAI5E,SAArB4E,iBAAqB5E,CAAAA,QAAD;AAAA,SAC/BA,QAAQ,CAARA,OAAAA,CAAAA,MAAAA,EAAAA,EAAAA,EAAAA,OAAAA,CAAAA,MAAAA,EADK,GACLA,CAD+B;AAAA,C;AAGjC;;AAEG;;;AACI,IAAMmG,eAAe,GAAIlG,SAAnBkG,eAAmBlG,CAAAA,MAAD;AAAA,SAC7B,CAAA,MAAA,IAAWA,MAAM,KAAjB,GAAA,GAAA,EAAA,GAEIA,MAAM,CAANA,UAAAA,CAAAA,GAAAA,IAAAA,MAAAA,GAEA,MALC,MAAwB;AAAA,CAAxB;AAOP;;AAEG;;;AACI,IAAMmG,aAAa,GAAItG,SAAjBsG,aAAiBtG,CAAAA,IAAD;AAAA,SAC3B,CAAA,IAAA,IAASA,IAAI,KAAb,GAAA,GAAA,EAAA,GAA6BA,IAAI,CAAJA,UAAAA,CAAAA,GAAAA,IAAAA,IAAAA,GAA8B,MADtD,IAAsB;AAAA,CAAtB;AAQP;;;AAGG;;;AACI,IAAMmH,IAAI,GAAiB,SAArBA,IAAqB,CAAA,IAAA,EAAA,IAAA,EAAoB;AAAA,MAAbC,IAAa,KAAA,KAAA,CAAA,EAAA;AAAbA,IAAAA,IAAa,GAAN,EAAPA;AAAa;;AACpD,MAAIC,YAAY,GAAG,OAAA,IAAA,KAAA,QAAA,GAA2B;AAAEC,IAAAA,MAAM,EAAEF;AAAV,GAA3B,GAAnB,IAAA;AAEA,MAAIG,OAAO,GAAG,IAAA,OAAA,CAAYF,YAAY,CAAtC,OAAc,CAAd;;AACA,MAAI,CAACE,OAAO,CAAPA,GAAAA,CAAL,cAAKA,CAAL,EAAkC;AAChCA,IAAAA,OAAO,CAAPA,GAAAA,CAAAA,cAAAA,EAAAA,iCAAAA;AACD;;AAED,SAAO,IAAA,QAAA,CAAahI,IAAI,CAAJA,SAAAA,CAAb,IAAaA,CAAb,EAAA,QAAA,CAAA,EAAA,EAAA,YAAA,EAAA;AAELgI,IAAAA,OAAAA,EAAAA;AAFK,GAAA,CAAA,CAAP;AARK,CAAA;;IAoBD,oB;;;;;;;;;;;;iCAAA,K;;IAEOC,Y;AAQXC,wBAAAA,IAAAA,EAAyC;AAAA;;AAAA;;AAPjC,SAAA,WAAA,GAAoC,IAApC,GAAoC,EAApC;AAIA,SAAA,UAAA,GAAA,SAAA;AAIN3F,IAAAA,SAAS,CACP4F,IAAI,IAAI,OAAA,IAAA,KAARA,QAAAA,IAAoC,CAACC,KAAK,CAALA,OAAAA,CAD9B,IAC8BA,CAD9B,EAD8B,oCAC9B,CAAT7F,CADuC,CAAA;AAOvC;;AACA,QAAA,MAAA;AACA,SAAA,YAAA,GAAoB,IAAA,OAAA,CAAY,UAAA,CAAA,EAAA,CAAA;AAAA,aAAW8F,MAAM,GAAjD,CAAgC;AAAA,KAAZ,CAApB;AACA,SAAA,UAAA,GAAkB,IAAlB,eAAkB,EAAlB;;AACA,QAAIC,OAAO,GAAG,SAAVA,OAAU;AAAA,aACZD,MAAM,CAAC,IAAA,oBAAA,CADT,uBACS,CAAD,CADM;AAAA,KAAd;;AAEA,SAAA,mBAAA,GAA2B;AAAA,aACzB,KAAA,CAAA,UAAA,CAAA,MAAA,CAAA,mBAAA,CAAA,OAAA,EADF,OACE,CADyB;AAAA,KAA3B;;AAEA,SAAA,UAAA,CAAA,MAAA,CAAA,gBAAA,CAAA,OAAA,EAAA,OAAA;AAEA,SAAA,IAAA,GAAY,MAAM,CAAN,OAAA,CAAA,IAAA,EAAA,MAAA,CACV,UAAA,GAAA,EAAA,IAAA,EAAA;AAAA,kCAAA,IAAA;AAAA,UAAM,GAAN;AAAA,UAAA,KAAA;;AAAA,aACE,MAAM,CAAN,MAAA,CAAA,GAAA,sBACE,GADF,EACS,KAAA,CAAA,YAAA,CAAA,GAAA,EAAA,KAAA,CADT,EADF;AADU,KAAA,EAAZ,EAAY,CAAZ;AAOD;;;;WAEOE,sBAAY,GAAZA,EAAY,KAAZA,EAE2B;AAAA;;AAEjC,UAAI,EAAE/B,KAAK,YAAX,OAAI,CAAJ,EAAiC;AAC/B,eAAA,KAAA;AACD;;AAED,WAAA,WAAA,CAAA,GAAA,CANiC,GAMjC,EANiC,CAAA;AASjC;;AACA,UAAIgC,OAAO,GAAmBC,OAAO,CAAPA,IAAAA,CAAa,CAAA,KAAA,EAAQ,KAArBA,YAAa,CAAbA,EAAAA,IAAAA,CAC3BN,UAAAA,IAAD;AAAA,eAAU,MAAA,CAAA,QAAA,CAAA,OAAA,EAAA,GAAA,EAAA,IAAA,EADkBM,IAClB,CAAV;AAAA,OAD4BA,EAE3BC,UAAAA,KAAD;AAAA,eAAW,MAAA,CAAA,QAAA,CAAA,OAAA,EAAA,GAAA,EAZoB,KAYpB,CAAX;AAAA,OAF4BD,CAA9B,CAViC,CAAA;AAgBjC;;AACAD,MAAAA,OAAO,CAAPA,KAAAA,CAAc,YAAO,CAArBA,CAAAA;AAEApD,MAAAA,MAAM,CAANA,cAAAA,CAAAA,OAAAA,EAAAA,UAAAA,EAA2C;AAAEuD,QAAAA,GAAG,EAAE;AAAA,iBAAM,IAAN;AAAA;AAAP,OAA3CvD;AACA,aAAA,OAAA;AACD;;;WAEOwD,kBAAQ,OAARA,EAAQ,GAARA,EAAQ,KAARA,EAAQ,IAARA,EAIQ;AAAA,UAAA,iBAAA;;AAEd,UACE,KAAA,UAAA,CAAA,MAAA,CAAA,OAAA,IACAF,KAAK,YAFP,oBAAA,EAGE;AACA,aAAA,mBAAA;AACAtD,QAAAA,MAAM,CAANA,cAAAA,CAAAA,OAAAA,EAAAA,QAAAA,EAAyC;AAAEuD,UAAAA,GAAG,EAAE;AAAA,mBAAMD,KAAN;AAAA;AAAP,SAAzCtD;AACA,eAAOqD,OAAO,CAAPA,MAAAA,CAAP,KAAOA,CAAP;AACD;;AAED,WAAA,WAAA,CAAA,MAAA,CAAA,GAAA;;AAEA,UAAI,KAAJ,IAAA,EAAe;AACb;AACA,aAAA,mBAAA;AACD;;AAED,UAAA,KAAA,EAAW;AAAA,YAAA,gBAAA;;AACTrD,QAAAA,MAAM,CAANA,cAAAA,CAAAA,OAAAA,EAAAA,QAAAA,EAAyC;AAAEuD,UAAAA,GAAG,EAAE;AAAA,mBAAMD,KAAN;AAAA;AAAP,SAAzCtD;AACA,SAAKyD,gBAAAA,GAAAA,KAAL,UAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,gBAAA,CAAA,IAAA,CAAA,IAAA,EAAA,KAAA,CAAA;AACA,eAAOJ,OAAO,CAAPA,MAAAA,CAAP,KAAOA,CAAP;AACD;;AAEDrD,MAAAA,MAAM,CAANA,cAAAA,CAAAA,OAAAA,EAAAA,OAAAA,EAAwC;AAAEuD,QAAAA,GAAG,EAAE;AAAA,iBAAMR,IAAN;AAAA;AAAP,OAAxC/C;AACA,OAAKyD,iBAAAA,GAAAA,KAAL,UAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,iBAAA,CAAA,IAAA,CAAA,IAAA,EAAA,KAAA,CAAA;AACA,aAAA,IAAA;AACD;;;WAEDC,mBAAS,EAATA,EAAwC;AACtC,WAAA,UAAA,GAAA,EAAA;AACD;;;WAEDC,kBAAM;AAAA;;AAAA,UAAA,iBAAA;;AACJ,WAAA,UAAA,CAAA,KAAA;AACA,WAAA,WAAA,CAAA,OAAA,CAAyB,UAAA,CAAA,EAAA,CAAA;AAAA,eAAU,MAAA,CAAA,WAAA,CAAA,MAAA,CAAnC,CAAmC,CAAV;AAAA,OAAzB;AACA,OAAKF,iBAAAA,GAAAA,KAAL,UAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,iBAAA,CAAA,IAAA,CAAA,IAAA,EAAA,IAAA,CAAA;AACD;;;;kFAEKG,iBAAW,MAAXA;AAAAA;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AACAC,gBAAAA,OADAD,GACJ,KADIA;;AAAAA,oBAEC,KAAL,IAFIA;AAAAA;AAAAA;AAAAA;;AAGEV,gBAAAA,OAHFU,GAGY,SAAVV,OAAU;AAAA,yBAAM,MAAA,CAApB,MAAoB,EAAN;AAAA,iBAHZU;;AAIFE,gBAAAA,MAAM,CAANA,gBAAAA,CAAAA,OAAAA,EAAAA,OAAAA;AAJEF;AAAAA,uBAKc,IAAA,OAAA,CAAaG,UAAAA,OAAD,EAAY;AACtC,kBAAA,MAAKL,CAAL,SAAA,CAAgBG,UAAAA,OAAD,EAAY;AACzBC,oBAAAA,MAAM,CAANA,mBAAAA,CAAAA,OAAAA,EAAAA,OAAAA;;AACA,wBAAID,OAAO,IAAI,MAAKG,CAApB,IAAA,EAA0B;AACxBD,sBAAAA,OAAO,CAAPA,OAAO,CAAPA;AACD;AAJH,mBAAA;AADFF,iBAAgB,CALdD;;AAAAA;AAKFC,gBAAAA,OALED;;AAAAA;AAAAA,iDAcJ,OAdIA;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;;;SAiBFI,eAAI;AACN,aAAO,KAAA,WAAA,CAAA,IAAA,KAAP,CAAA;AACD;;;SAEGC,eAAa;AACf9G,MAAAA,SAAS,CACP,KAAA,IAAA,KAAA,IAAA,IAAsB,KADf,IAAA,EAATA,2DAAS,CAATA;AAKA,aAAO,MAAM,CAAN,OAAA,CAAe,KAAf,IAAA,EAAA,MAAA,CACL,UAAA,GAAA,EAAA,KAAA,EAAA;AAAA,oCAAA,KAAA;AAAA,YAAM,GAAN;AAAA,YAAA,KAAA;;AAAA,eACE,MAAM,CAAN,MAAA,CAAA,GAAA,sBACE,GADF,EACS+G,oBAAoB,CAAA,KAAA,CAD7B,EADF;AADK,OAAA,EAAP,EAAO,CAAP;AAOD;;;;;;AAGH,SAAA,gBAAA,CAAA,KAAA,EAAoC;AAClC,SACE9C,KAAK,YAALA,OAAAA,IAA6BA,KAAwB,CAAxBA,QAAAA,KAD/B,IAAA;AAGD;;AAED,SAAA,oBAAA,CAAA,KAAA,EAAwC;AACtC,MAAI,CAAC+C,gBAAgB,CAArB,KAAqB,CAArB,EAA8B;AAC5B,WAAA,KAAA;AACD;;AAED,MAAI/C,KAAK,CAAT,MAAA,EAAkB;AAChB,UAAMA,KAAK,CAAX,MAAA;AACD;;AACD,SAAOA,KAAK,CAAZ,KAAA;AACD;;AAEK,SAAA,KAAA,CAAA,IAAA,EAA6C;AACjD,SAAO,IAAA,YAAA,CAAP,IAAO,CAAP;AACD;AAOD;;;AAGG;;;AACI,IAAMgD,QAAQ,GAAqB,SAA7BA,QAA6B,CAAA,GAAA,EAAA,IAAA,EAAoB;AAAA,MAAd3B,IAAc,KAAA,KAAA,CAAA,EAAA;AAAdA,IAAAA,IAAc,GAAP,GAAPA;AAAc;;AAC5D,MAAIC,YAAY,GAAhB,IAAA;;AACA,MAAI,OAAA,YAAA,KAAJ,QAAA,EAAsC;AACpCA,IAAAA,YAAY,GAAG;AAAEC,MAAAA,MAAM,EAAED;AAAV,KAAfA;AADF,GAAA,MAEO,IAAI,OAAOA,YAAY,CAAnB,MAAA,KAAJ,WAAA,EAAgD;AACrDA,IAAAA,YAAY,CAAZA,MAAAA,GAAAA,GAAAA;AACD;;AAED,MAAIE,OAAO,GAAG,IAAA,OAAA,CAAYF,YAAY,CAAtC,OAAc,CAAd;AACAE,EAAAA,OAAO,CAAPA,GAAAA,CAAAA,UAAAA,EAAAA,GAAAA;AAEA,SAAO,IAAA,QAAA,CAAA,IAAA,EAAA,QAAA,CAAA,EAAA,EAAA,YAAA,EAAA;AAELA,IAAAA,OAAAA,EAAAA;AAFK,GAAA,CAAA,CAAP;AAXK,CAAA;AAiBP;;;AAGG;;;IACUyB,a,GAKXvB,uBAAAA,MAAAA,EAAAA,UAAAA,EAAAA,IAAAA,EAAqE;AAAA;;AACnE,OAAA,MAAA,GAAA,MAAA;AACA,OAAA,UAAA,GAAkBwB,UAAU,IAA5B,EAAA;AACA,OAAA,IAAA,GAAA,IAAA;AACD,C;AAGH;;;AAGG;;;AACG,SAAA,oBAAA,CAAA,CAAA,EAAqC;AACzC,SAAOC,CAAC,YAAR,aAAA;AACD;;AC3nBM,IAAMC,eAAe,GAA6B;AACvDjK,EAAAA,KAAK,EADkD,MAAA;AAEvDC,EAAAA,QAAQ,EAF+C,SAAA;AAGvDiK,EAAAA,UAAU,EAH6C,SAAA;AAIvDC,EAAAA,UAAU,EAJ6C,SAAA;AAKvDC,EAAAA,WAAW,EAL4C,SAAA;AAMvDC,EAAAA,QAAQ,EAAErH;AAN6C,CAAlD;AASA,IAAMsH,YAAY,GAA0B;AACjDtK,EAAAA,KAAK,EAD4C,MAAA;AAEjDwI,EAAAA,IAAI,EAF6C,SAAA;AAGjD0B,EAAAA,UAAU,EAHuC,SAAA;AAIjDC,EAAAA,UAAU,EAJuC,SAAA;AAKjDC,EAAAA,WAAW,EALsC,SAAA;AAMjDC,EAAAA,QAAQ,EAAErH;AANuC,CAA5C,C,CAA4C;AAUnD;AACA;AACA;;AAEA;;AAEG;;AACG,SAAA,YAAA,CAAA,IAAA,EAAuC;AAAA,MAAA,mBAAA,EAAA,oBAAA,EAAA,oBAAA;;AAC3CJ,EAAAA,SAAS,CACPsF,IAAI,CAAJA,MAAAA,CAAAA,MAAAA,GADO,CAAA,EAATtF,2DAAS,CAATA;AAKA,MAAI2H,UAAU,GAAGxH,yBAAyB,CAACmF,IAAI,CANJ,MAMD,CAA1C,CAN2C,CAAA;;AAQ3C,MAAIsC,eAAe,GARwB,IAQ3C,CAR2C,CAAA;;AAU3C,MAAIC,WAAW,GAAG,IAVyB,GAUzB,EAAlB,CAV2C,CAAA;;AAY3C,MAAIC,oBAAoB,GAZmB,IAY3C,CAZ2C,CAAA;;AAc3C,MAAIC,uBAAuB,GAdgB,IAc3C,CAd2C,CAAA;;AAgB3C,MAAIC,iBAAiB,GAhBsB,IAgB3C,CAhB2C,CAAA;AAkB3C;AACA;AACA;;AACA,MAAIC,qBAAqB,GAAzB,KAAA;AAEA,MAAIC,cAAc,GAAGC,WAAW,CAAA,UAAA,EAE9B7C,IAAI,CAAJA,OAAAA,CAF8B,QAAA,EAG9BA,IAAI,CAHN,QAAgC,CAAhC;AAKA,MAAI8C,aAAa,GAAjB,IAAA;;AAEA,MAAIF,cAAc,IAAlB,IAAA,EAA4B;AAC1B;AACA;AACA,8BAAgCG,kBAAkB,CAAlD,UAAkD,CAAlD;AAAA,QAAI,OAAJ,uBAAI,OAAJ;AAAA,QAAI,KAAJ,uBAAI,KAAJ;AAAA,QAAsBlC,KAAtB,uBAAsBA,KAAtB;;AACA+B,IAAAA,cAAc,GAAdA,OAAAA;AACAE,IAAAA,aAAa,uBAAMrI,KAAK,CAAN,EAAL,EAAiBoG,KAAjB,CAAbiC;AACD;;AAED,MAAIE,WAAW,GACb,CAACJ,cAAc,CAAdA,IAAAA,CAAqBK,UAAAA,CAAD;AAAA,WAAOA,CAAC,CAADA,KAAAA,CAA5B,MAAqB;AAAA,GAApBL,CAAD,IAA+C5C,IAAI,CAAJA,aAAAA,IADjD,IAAA;AAGA,MAAA,MAAA;AACA,MAAIlI,KAAK,GAAgB;AACvBoL,IAAAA,aAAa,EAAElD,IAAI,CAAJA,OAAAA,CADQ,MAAA;AAEvBjI,IAAAA,QAAQ,EAAEiI,IAAI,CAAJA,OAAAA,CAFa,QAAA;AAGvB5E,IAAAA,OAAO,EAHgB,cAAA;AAIvB4H,IAAAA,WAJuB,EAIvBA,WAJuB;AAKvBG,IAAAA,UAAU,EALa,eAAA;AAMvBC,IAAAA,qBAAqB,EANE,IAAA;AAOvBC,IAAAA,kBAAkB,EAPK,KAAA;AAQvBC,IAAAA,YAAY,EARW,MAAA;AASvBC,IAAAA,UAAU,EAAE,CAAA,CAAA,mBAAA,GAAA,IAAI,CAAJ,aAAA,KAAoBA,IAApB,GAAoBA,KAAAA,CAApB,GAAoBA,mBAAAA,CAApB,UAAA,KATW,EAAA;AAUvBC,IAAAA,UAAU,EAAE,CAAA,CAAA,oBAAA,GAAA,IAAI,CAAJ,aAAA,KAAoBA,IAApB,GAAoBA,KAAAA,CAApB,GAAoBA,oBAAAA,CAApB,UAAA,KAVW,IAAA;AAWvBC,IAAAA,MAAM,EAAE,CAAA,CAAA,oBAAA,GAAA,IAAI,CAAJ,aAAA,KAAoBA,IAApB,GAAoBA,KAAAA,CAApB,GAAoBA,oBAAAA,CAApB,MAAA,KAXe,aAAA;AAYvBC,IAAAA,QAAQ,EAAE,IAAA,GAAA;AAZa,GAAzB,CA1C2C,CAAA;AA0D3C;;AACA,MAAIC,aAAa,GAAkBC,MAAa,CA3DL,GA2D3C,CA3D2C,CAAA;AA6D3C;;AACA,MAAIC,yBAAyB,GA9Dc,KA8D3C,CA9D2C,CAAA;;AAgE3C,MAhE2C,2BAgE3C,CAhE2C,CAAA;AAkE3C;;AACA,MAAIC,2BAA2B,GAnEY,KAmE3C,CAnE2C,CAAA;AAqE3C;AACA;AACA;;AACA,MAAIC,sBAAsB,GAxEiB,KAwE3C,CAxE2C,CAAA;AA0E3C;;AACA,MAAIC,uBAAuB,GA3EgB,EA2E3C,CA3E2C,CAAA;AA6E3C;;AACA,MAAIC,qBAAqB,GA9EkB,EA8E3C,CA9E2C,CAAA;;AAgF3C,MAAIC,gBAAgB,GAAG,IAhFoB,GAgFpB,EAAvB,CAhF2C,CAAA;;AAkF3C,MAAIC,kBAAkB,GAlFqB,CAkF3C,CAlF2C,CAAA;AAoF3C;AACA;;AACA,MAAIC,uBAAuB,GAAG,CAtFa,CAsF3C,CAtF2C,CAAA;;AAwF3C,MAAIC,cAAc,GAAG,IAxFsB,GAwFtB,EAArB,CAxF2C,CAAA;;AA0F3C,MAAIC,gBAAgB,GAAG,IA1FoB,GA0FpB,EAAvB,CA1F2C,CAAA;;AA4F3C,MAAIC,gBAAgB,GAAG,IA5FoB,GA4FpB,EAAvB,CA5F2C,CAAA;AA8F3C;AACA;AACA;;AACA,MAAIC,eAAe,GAAG,IAjGqB,GAiGrB,EAAtB,CAjG2C,CAAA;AAoG3C;AACA;;AACA,WAAA,UAAA,GAAmB;AACjB;AACA;AACAlC,IAAAA,eAAe,GAAG,IAAI,CAAJ,OAAA,CAAA,MAAA,CAChB,UAAA,IAAA,EAAA;AAAA,UAAC,aAAD,GAAA,IAAA,CAAG3K,MAAH;AAAA,UAA0BI,QAA1B,GAAA,IAAA,CAA0BA,QAA1B;AAAA,aACE0M,eAAe,CAAA,aAAA,EADjB,QACiB,CADjB;AAJe,KAGC,CAAlBnC,CAHiB,CAAA;;AASjB,QAAI,CAACxK,KAAK,CAAV,WAAA,EAAwB;AACtB2M,MAAAA,eAAe,CAACb,MAAa,CAAd,GAAA,EAAoB9L,KAAK,CAAxC2M,QAAe,CAAfA;AACD;;AAED,WAAA,MAAA;AAnHyC,GAAA,CAAA;;;AAuH3C,WAAA,OAAA,GAAgB;AAAA,QAAA,qBAAA;;AACd,QAAA,eAAA,EAAqB;AACnBnC,MAAAA,eAAe;AAChB;;AACDC,IAAAA,WAAW,CAAXA,KAAAA;AACA,KAAA,qBAAA,GAAA,2BAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,qBAAA,CAAA,KAAA,EAAA;AACAzK,IAAAA,KAAK,CAALA,QAAAA,CAAAA,OAAAA,CAAuB,UAAA,CAAA,EAAA,GAAA;AAAA,aAAY4M,aAAa,CAAhD5M,GAAgD,CAAzB;AAAA,KAAvBA;AA7HyC,GAAA,CAAA;;;AAiI3C,WAAA,SAAA,CAAA,EAAA,EAAuC;AACrCyK,IAAAA,WAAW,CAAXA,GAAAA,CAAAA,EAAAA;AACA,WAAO;AAAA,aAAMA,WAAW,CAAXA,MAAAA,CAAb,EAAaA,CAAN;AAAA,KAAP;AAnIyC,GAAA,CAAA;;;AAuI3C,WAAA,WAAA,CAAA,QAAA,EAAmD;AACjDzK,IAAAA,KAAK,GACAA,QAAAA,CAAAA,EAAAA,EADA,KACAA,EADLA,QACKA,CADLA;AAIAyK,IAAAA,WAAW,CAAXA,OAAAA,CAAqBvB,UAAAA,UAAD;AAAA,aAAgBA,UAAU,CAA9CuB,KAA8C,CAA1B;AAAA,KAApBA;AA5IyC,GAAA,CAAA;AAgJ3C;AACA;AACA;AACA;;;AACA,WAAA,kBAAA,CAAA,QAAA,EAAA,QAAA,EAE4E;AAE1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAIoC,cAAc,GAChB7M,KAAK,CAALA,UAAAA,IAAAA,IAAAA,IACAA,KAAK,CAALA,UAAAA,CAAAA,UAAAA,IADAA,IAAAA,IAEAA,KAAK,CAALA,UAAAA,CAAAA,KAAAA,KAbwE,SAU1E,CAV0E,CAAA;;AAgB1E,QAAI8M,aAAa,GAAG,QAAQ,CAAR,UAAA,GAChB;AACErB,MAAAA,UAAU,EAAEsB,eAAe,CACzB/M,KAAK,CADoB,UAAA,EAEzBgN,QAAQ,CAFiB,UAAA,EAGzBA,QAAQ,CAARA,OAAAA,IAHyB,EAAA;AAD7B,KADgB,GAApB,EAAA;AAUAC,IAAAA,WAAW,CAILJ,QAAAA,CAAAA,EAAAA,EAAAA,cAAc,GAAA,EAAA,GAAQ;AAAEnB,MAAAA,UAAU,EAAE;AAAd,KAAtBmB,EAJK,QAILA,EAJK,aAILA,EAJK;AAOTzB,MAAAA,aAAa,EAPJ,aAAA;AAQTnL,MAAAA,QARS,EAQTA,QARS;AASTiL,MAAAA,WAAW,EATF,IAAA;AAUTG,MAAAA,UAAU,EAVD,eAAA;AAWTG,MAAAA,YAAY,EAXH,MAAA;AAYT;AACAF,MAAAA,qBAAqB,EAAEtL,KAAK,CAALA,UAAAA,CAAAA,QAAAA,GAAAA,KAAAA,GAEnBkN,sBAAsB,CAAA,QAAA,EAAWF,QAAQ,CAARA,OAAAA,IAAoBhN,KAAK,CAfrD,OAeiB,CAfjB;AAgBTuL,MAAAA,kBAAkB,EAAEQ;AAhBX,KAILc,CAJK,CAAXI;AAmBA,QAAA,2BAAA,EAAA,CAAA,KAEO,IAAIpB,aAAa,KAAKC,MAAa,CAAnC,GAAA,EAAA,CAAA,KAEA,IAAID,aAAa,KAAKC,MAAa,CAAnC,IAAA,EAA0C;AAC/C5D,MAAAA,IAAI,CAAJA,OAAAA,CAAAA,IAAAA,CAAAA,QAAAA,EAA4BjI,QAAQ,CAApCiI,KAAAA;AADK,KAAA,MAEA,IAAI2D,aAAa,KAAKC,MAAa,CAAnC,OAAA,EAA6C;AAClD5D,MAAAA,IAAI,CAAJA,OAAAA,CAAAA,OAAAA,CAAAA,QAAAA,EAA+BjI,QAAQ,CAAvCiI,KAAAA;AApDwE,KAAA,CAAA;;AAwD1E2D,IAAAA,aAAa,GAAGC,MAAa,CAA7BD,GAAAA;AACAE,IAAAA,yBAAyB,GAAzBA,KAAAA;AACAC,IAAAA,2BAA2B,GAA3BA,KAAAA;AACAC,IAAAA,sBAAsB,GAAtBA,KAAAA;AACAC,IAAAA,uBAAuB,GAAvBA,EAAAA;AACAC,IAAAA,qBAAqB,GAArBA,EAAAA;AAnNyC,GAAA,CAAA;AAuN3C;;;AAvN2C,WAwN3C,QAxN2C;AAAA;AAAA,IAAA;AAwP3C;AACA;;;AAzP2C;AAAA,yEAwN3C,kBAAA,EAAA,EAAA,IAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oBAIM,OAAA,EAAA,KAAJ,QAJF;AAAA;AAAA;AAAA;;AAKIjE,cAAAA,IAAI,CAAJA,OAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AALJ;;AAAA;AAAA,uCASoCiF,wBAAwB,CAAA,EAAA,EAA1D,IAA0D,CAT5D,EASM,IATN,0BASM,IATN,EASM,UATN,0BASM,UATN,EAS0BpE,KAT1B,0BAS0BA,KAT1B;AAWM9I,cAAAA,QAXN,GAWiBC,cAAc,CAACF,KAAK,CAAN,QAAA,EAAA,IAAA,EAAuBoN,IAAvB,IAAA,IAAuBA,GAAvB,KAAA,CAAuBA,GAAAA,IAAI,CAAxD,KAA6B,CAX/B;AAYMhC,cAAAA,aAZN,GAaI,CAAA,IAAI,IAAJ,IAAA,GAAA,KAAA,CAAA,GAAA,IAAI,CAAJ,OAAA,MAAA,IAAA,IAA0BiC,UAAU,IAApC,IAAA,GACIvB,MAAa,CADjB,OAAA,GAEIA,MAAa,CAHnB,IAZF;AAgBMP,cAAAA,kBAhBN,GAiBI6B,IAAI,IAAI,wBAARA,IAAAA,GACIA,IAAI,CAAJA,kBAAAA,KADJA,IAAAA,GADF,SAhBF;AAAA;AAAA,qBAqBeT,eAAe,CAAA,aAAA,EAAA,QAAA,EAA0B;AACpDU,gBAAAA,UADoD,EACpDA,UADoD;AAEpD;AACA;AACAC,gBAAAA,YAAY,EAJwC,KAAA;AAKpD/B,gBAAAA,kBALoD,EAKpDA,kBALoD;AAMpD5K,gBAAAA,OAAO,EAAEyM,IAAF,IAAEA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,IAAI,CAAEzM;AANqC,eAA1B,CArB9B;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAxN2C;AAAA;AAAA;;AA0P3C,WAAA,UAAA,GAAmB;AACjB4M,IAAAA,oBAAoB;AACpBN,IAAAA,WAAW,CAAC;AAAEzB,MAAAA,YAAY,EAAE;AAAhB,KAAD,CAAXyB,CAFiB,CAAA;AAKjB;;AACA,QAAIjN,KAAK,CAALA,UAAAA,CAAAA,KAAAA,KAAJ,YAAA,EAA6C;AAC3C;AAPe,KAAA,CAAA;AAWjB;AACA;;;AACA,QAAIA,KAAK,CAALA,UAAAA,CAAAA,KAAAA,KAAJ,MAAA,EAAuC;AACrC2M,MAAAA,eAAe,CAAC3M,KAAK,CAAN,aAAA,EAAsBA,KAAK,CAA3B,QAAA,EAAsC;AACnDwN,QAAAA,8BAA8B,EAAE;AADmB,OAAtC,CAAfb;AAGA;AAjBe,KAAA,CAAA;AAqBjB;AACA;;;AACAA,IAAAA,eAAe,CACbd,aAAa,IAAI7L,KAAK,CADT,aAAA,EAEbA,KAAK,CAALA,UAAAA,CAFa,QAAA,EAGb;AAAEyN,MAAAA,kBAAkB,EAAEzN,KAAK,CAACqL;AAA5B,KAHa,CAAfsB;AAjRyC,GAAA,CAAA;AAyR3C;AACA;;;AA1R2C,WA2R3C,eA3R2C;AAAA;AAAA,IAAA;AAwZ3C;;;AAxZ2C;AAAA,gFA2R3C,kBAAA,aAAA,EAAA,QAAA,EAAA,IAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAYE;AACA;AACA;AACA,eAAA,sBAAA,GAAA,2BAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,sBAAA,CAAA,KAAA,EAAA;AACAe,cAAAA,2BAA2B,GAA3BA,IAAAA;AACA7B,cAAAA,aAAa,GAAbA,aAAAA;AACAG,cAAAA,2BAA2B,GAAG,CAAA,IAAI,IAAJ,IAAA,GAAA,KAAA,CAAA,GAAA,IAAI,CAAJ,8BAAA,MAR7B,IAQDA,CAlBF,CAUG;AAWD;;AACA2B,cAAAA,kBAAkB,CAAC3N,KAAK,CAAN,QAAA,EAAiBA,KAAK,CAAxC2N,OAAkB,CAAlBA;AACA5B,cAAAA,yBAAyB,GAAG,CAAA,IAAI,IAAJ,IAAA,GAAA,KAAA,CAAA,GAAA,IAAI,CAAJ,kBAAA,MAA5BA,IAAAA;AAEI6B,cAAAA,iBAzBN,GAyB0BR,IAAH,IAAGA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,IAAI,CAA5B,kBAzBF;AA0BM9J,cAAAA,OA1BN,GA0BgByH,WAAW,CAAA,UAAA,EAAA,QAAA,EAAuB7C,IAAI,CAhBnD,QAgBwB,CA1B3B,EAUG;;AAVH,kBA6BE,OA7BF;AAAA;AAAA;AAAA;;AAAA,qCAkCQ+C,kBAAkB,CALV,UAKU,CAlC1B,EA8BQ,eA9BR,wBA+BM3H,OA/BN,EA8BQ,MA9BR,wBA8BQ,KA9BR,EAiCMyF,MAjCN,wBAiCMA,KAjCN,EA6BgB;;AAOZ8E,cAAAA,qBAAqB;AACrBC,cAAAA,kBAAkB,CAAA,QAAA,EAAW;AAC3BxK,gBAAAA,OAAO,EADoB,eAAA;AAE3BmI,gBAAAA,UAAU,EAFiB,EAAA;AAG3BE,gBAAAA,MAAM,sBACHhJ,MAAK,CAAN,EADI,EACQoG,MADR;AAHqB,eAAX,CAAlB+E;AArCJ;;AAAA;AAAA,mBAgDMC,gBAAgB,CAAC/N,KAAK,CAAN,QAAA,EAApB,QAAoB,CAhDtB;AAAA;AAAA;AAAA;;AAiDI8N,cAAAA,kBAAkB,CAAA,QAAA,EAAW;AAAExK,gBAAAA,OAAAA,EAAAA;AAAF,eAAX,CAAlBwK;AAjDJ;;AAAA;AAUG;AA4CDJ,cAAAA,2BAA2B,GAAG,IAA9BA,eAA8B,EAA9BA;AACIM,cAAAA,OAvDN,GAuDgBC,aAAa,CAAA,QAAA,EAEzBP,2BAA2B,CAFF,MAAA,EAGzBN,IAHyB,IAAA,IAGzBA,GAHyB,KAAA,CAGzBA,GAAAA,IAAI,CAHN,UAA2B,CAvD7B;;AAAA,oBA+DMA,IAAJ,IAAA,IAAIA,IAAAA,IAAI,CAAR,YA/DF;AAAA;AAAA;AAAA;;AAgEI;AACA;AACA;AACA;AACAE,cAAAA,YAAY,uBACTY,mBAAmB,CAAnBA,OAAmB,CAAnBA,CAAAA,KAAAA,CAAD,EADU,EAC+Bd,IAAI,CAACE,YADpC,CAAZA;AApEJ;AAAA;;AAAA;AAAA,oBAuEaF,IAAJ,IAAA,IAAIA,IAAAA,IAAI,CAAR,UAvET;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAyE6BgB,YAAY,CAAA,OAAA,EAAA,QAAA,EAGnChB,IAAI,CAH+B,UAAA,EAAA,OAAA,EAKnC;AAAEzM,gBAAAA,OAAO,EAAEyM,IAAI,CAACzM;AAAhB,eALmC,CAzEzC;;AAAA;AAyEQwN,cAAAA,YAzER;;AAAA,mBAiFQA,YAAY,CAAhB,cAjFJ;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAqFIE,cAAAA,iBAAiB,GAAGF,YAAY,CAAhCE,iBAAAA;AACAf,cAAAA,YAAY,GAAGa,YAAY,CAA3Bb,kBAAAA;AAEIjC,cAAAA,UAxFR,GAwFkB,QAAA,CAAA;AACZrL,gBAAAA,KAAK,EADO,SAAA;AAEZC,gBAAAA,QAAAA,EAAAA;AAFY,eAAA,EAGTmN,IAAI,CAHT,UAAc,CAxFlB;AA6FIQ,cAAAA,iBAAiB,GAAjBA,UAAAA;;AA7FJ;AAAA;AAAA,qBAiGqDU,aAAa,CAAA,OAAA,EAAA,QAAA,EAAA,OAAA,EAAA,iBAAA,EAK9DlB,IAL8D,IAAA,IAK9DA,GAL8D,KAAA,CAK9DA,GAAAA,IAAI,CAL0D,UAAA,EAM9DA,IAN8D,IAM9DA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,IAAI,CAN0D,OAAA,EAAA,iBAAA,EAAhE,YAAgE,CAjGlE;;AAAA;AAAA;AAiGM,cAAA,cAjGN,wBAiGM,cAjGN;AAiGM,cAAA,UAjGN,wBAiGM,UAjGN;AAiGoCzB,cAAAA,MAjGpC,wBAiGoCA,MAjGpC;;AAAA,mBA4GE,cA5GF;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAUG;AAuGD;AACA;AACA+B,cAAAA,2BAA2B,GAA3BA,IAAAA;AAEAI,cAAAA,kBAAkB,CAAA,QAAA,EAAW;AAC3BxK,gBAAAA,OAD2B,EAC3BA,OAD2B;AAE3BmI,gBAAAA,UAF2B,EAE3BA,UAF2B;AAG3BE,gBAAAA,MAAAA,EAAAA;AAH2B,eAAX,CAAlBmC;;AArHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA3R2C;AAAA;AAAA;;AAAA,WAyZ3C,YAzZ2C;AAAA;AAAA,IAAA;AA8d3C;;;AA9d2C;AAAA,6EAyZ3C,kBAAA,OAAA,EAAA,QAAA,EAAA,UAAA,EAAA,OAAA,EAAA,IAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOEP,cAAAA,oBAF4B,GAL9B,CAK8B;;AAKxBlC,cAAAA,UAVN,GAUgB,QAAA,CAAA;AACZrL,gBAAAA,KAAK,EADO,YAAA;AAEZC,gBAAAA,QAAAA,EAAAA;AAFY,eAAA,EAAd,UAAc,CAVhB;AAeEgN,cAAAA,WAAW,CAAC;AAAE5B,gBAAAA,UAAAA,EAAAA;AAAF,eAAD,CAAX4B,CAfF,CAK8B;;AAcxBsB,cAAAA,WAnBN,GAmBoBC,cAAc,CAAA,OAAA,EAAhC,QAAgC,CAnBlC;;AAAA,kBAqBOD,WAAW,CAAXA,KAAAA,CAAL,MArBF;AAAA;AAAA;AAAA;;AAsBIE,cAAAA,MAAM,GAAGC,yBAAyB,CAAlCD,QAAkC,CAAlCA;AAtBJ;AAAA;;AAAA;AAAA;AAAA,qBAwBmBE,kBAAkB,CAAA,QAAA,EAAA,OAAA,EAAjCF,WAAiC,CAxBrC;;AAAA;AAwBIA,cAAAA,MAxBJ;;AAAA,mBA0BQT,OAAO,CAAPA,MAAAA,CAAJ,OA1BJ;AAAA;AAAA;AAAA;;AAAA,gDA2Ba;AAAEY,gBAAAA,cAAc,EAAE;AAAlB,eA3Bb;;AAAA;AAAA,mBA+BMC,gBAAgB,CAApB,MAAoB,CA/BtB;AAAA;AAAA;AAAA;;AAgCQC,cAAAA,kBAhCR,GAgC0B,QAAA,CAAA;AACpB9O,gBAAAA,KAAK,EADe,SAAA;AAEpBC,gBAAAA,QAAQ,EAAEC,cAAc,CAACF,KAAK,CAAN,QAAA,EAAiByO,MAAM,CAAvB,QAAA;AAFJ,eAAA,EAAtB,UAAsB,CAhC1B;AAAA;AAAA,qBAqCUM,uBAAuB,CAAA,MAAA,EAAA,kBAAA,EAA6B3B,IAA7B,IAA6BA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,IAAI,CAA9D,OAA6B,CArCjC;;AAAA;AAAA,gDAsCW;AAAEwB,gBAAAA,cAAc,EAAE;AAAlB,eAtCX;;AAAA;AAAA,mBAyCMI,aAAa,CAAjB,MAAiB,CAzCnB;AAAA;AAAA;AAAA;;AA0CI;AACA;AACIC,cAAAA,aA5CR,GA4CwBf,mBAAmB,CAAA,OAAA,EAAUK,WAAW,CAAXA,KAAAA,CAHxB,EAGc,CA5C3C,EAyC6B;AAMzB;AACA;AACA;;AACA,kBAAI,CAAA,IAAI,IAAJ,IAAA,GAAA,KAAA,CAAA,GAAA,IAAI,CAAJ,OAAA,MAAJ,IAAA,EAA4B;AAC1B1C,gBAAAA,aAAa,GAAGC,MAAa,CAA7BD,IAAAA;AACD;;AApDL,gDAsDW;AACLqD,gBAAAA,kBAAkB,sBAAKD,aAAa,CAAbA,KAAAA,CAAD,EAAJ,EAA8BR,MAAM,CAAC1F,KAArC;AADb,eAtDX;;AAAA;AAAA,mBA2DMoG,gBAAgB,CAApB,MAAoB,CA3DtB;AAAA;AAAA;AAAA;;AAAA,oBA4DU,IAAA,KAAA,CAAN,qCAAM,CA5DV;;AAAA;AAAA,gDA+DS;AACLd,gBAAAA,iBAAiB,sBAAKE,WAAW,CAAXA,KAAAA,CAAD,EAAJ,EAA4BE,MAAM,CAACjG,IAAnC;AADZ,eA/DT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAzZ2C;AAAA;AAAA;;AAAA,WA+d3C,aA/d2C;AAAA;AAAA;;AAAA;AAAA,8EA+d3C,kBAAA,OAAA,EAAA,QAAA,EAAA,OAAA,EAAA,kBAAA,EAAA,UAAA,EAAA,OAAA,EAAA,iBAAA,EAAA,YAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAUE;AACIoF,cAAAA,iBAXN,GAWE,kBAXF;;AAYE,kBAAI,CAAJ,iBAAA,EAAwB;AAClBvC,gBAAAA,UADkB,GACwB;AAC5CrL,kBAAAA,KAAK,EADuC,SAAA;AAE5CC,kBAAAA,QAF4C,EAE5CA,QAF4C;AAG5CiK,kBAAAA,UAAU,EAHkC,SAAA;AAI5CC,kBAAAA,UAAU,EAJkC,SAAA;AAK5CC,kBAAAA,WAAW,EALiC,SAAA;AAM5CC,kBAAAA,QAAQ,EAAErH;AANkC,iBADxB;AAStB4K,gBAAAA,iBAAiB,GAAjBA,UAAAA;AACD;;AAtBH,kCAwB8CwB,gBAAgB,CAAA,KAAA,EAAA,OAAA,EAAA,UAAA,EAAA,QAAA,EAAA,sBAAA,EAAA,uBAAA,EAAA,qBAAA,EAAA,iBAAA,EAAA,YAAA,EAhBpC,gBAgBoC,CAxB9D,6DAwBM,aAxBN,0BAwBM,oBAxBN,0BAQ0B;AA8BxB;AACA;;AACAvB,cAAAA,qBAAqB,CAClBwB,UAAAA,OAAD;AAAA,uBACE,EAAC/L,OAAD,IAAA,IAACA,IAAAA,OAAO,CAAPA,IAAAA,CAAe6H,UAAAA,CAAD;AAAA,yBAAOA,CAAC,CAADA,KAAAA,CAAAA,EAAAA,KAAtB,OAAe;AAAA,iBAAd7H,CAAD,MACAgM,aADA,IAAA,IACAA,GADA,KAAA,CACAA,GAAAA,aAAa,CAAbA,IAAAA,CAAqBnE,UAAAA,CAAD;AAAA,yBAAOA,CAAC,CAADA,KAAAA,CAAAA,EAAAA,KAnCP,OAmCA;AAAA,iBAApBmE,CADA,CADF;AAAA,eADmB,CAArBzB,CAxCF,CAQ0B;;AAR1B,oBA+CMyB,aAAa,CAAbA,MAAAA,KAAAA,CAAAA,IAA8BC,oBAAoB,CAApBA,MAAAA,KAAlC,CA/CF;AAAA;AAAA;AAAA;;AAgDIzB,cAAAA,kBAAkB,CAAA,QAAA,EAAW;AAC3BxK,gBAAAA,OAD2B,EAC3BA,OAD2B;AAE3BmI,gBAAAA,UAAU,EAAEsB,eAAe,CAAC/M,KAAK,CAAN,UAAA,EAAA,EAAA,EAFA,OAEA,CAFA;AAG3B;AACA2L,gBAAAA,MAAM,EAAE2B,YAAY,IAJO,IAAA;AAK3B5B,gBAAAA,UAAU,EAAE2C,iBAAiB,IAAI;AALN,eAAX,CAAlBP;AAhDJ,gDAuDW;AAAEc,gBAAAA,cAAc,EAAE;AAAlB,eAvDX;;AAAA;AAQ0B;AAmDxB;AACA;AACA;AACA,kBAAI,CAAJ,2BAAA,EAAkC;AAChCW,gBAAAA,oBAAoB,CAApBA,OAAAA,CAA6B,UAAA,KAAU,EAAA;AAAA,sBAAA,mBAAA;;AAAT,8CAAS,KAAT;AAAA,sBAAA,GAAA;;AAC5B,sBAAIC,mBAAmB,GAA6B;AAClDxP,oBAAAA,KAAK,EAD6C,SAAA;AAElDwI,oBAAAA,IAAI,EAAA,CAAA,mBAAA,GAAExI,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAAF,GAAEA,CAAF,KAAEA,IAAF,GAAEA,KAAAA,CAAF,GAAEA,mBAAAA,CAF4C,IAAA;AAGlDkK,oBAAAA,UAAU,EAHwC,SAAA;AAIlDC,oBAAAA,UAAU,EAJwC,SAAA;AAKlDC,oBAAAA,WAAW,EALuC,SAAA;AAMlDC,oBAAAA,QAAQ,EAAErH;AANwC,mBAApD;AAQAhD,kBAAAA,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAAAA,GAAAA,EAAAA,mBAAAA;AATFuP,iBAAAA;AAWAtC,gBAAAA,WAAW,CAAA,QAAA,CAAA;AACT5B,kBAAAA,UAAU,EADD,iBAAA;AAETK,kBAAAA,UAAU,EAAE2C,iBAAiB,IAAIrO,KAAK,CAA1BqO,UAAAA,IAAyC;AAF5C,iBAAA,EAGL,oBAAoB,CAApB,MAAA,GAAA,CAAA,GACA;AAAEzC,kBAAAA,QAAQ,EAAE,IAAA,GAAA,CAAQ5L,KAAK,CAAb,QAAA;AAAZ,iBADA,GAHNiN,EAAW,CAAA,CAAXA;AAOD;;AAEDX,cAAAA,uBAAuB,GAAG,EAA1BA,kBAAAA;AACAiD,cAAAA,oBAAoB,CAApBA,OAAAA,CAA6B,UAAA,KAAA,EAAA;AAAA,4CAAA,KAAA;AAAA,oBAAA,GAAA;;AAAA,uBAC3BnD,gBAAgB,CAAhBA,GAAAA,CAAAA,GAAAA,EAD2B,2BAC3BA,CAD2B;AAA7BmD,eAAAA;AApFF;AAAA,qBAyFUG,8BAA8B,CAClC1P,KAAK,CAD6B,OAAA,EAAA,aAAA,EAAA,oBAAA,EADtC,OACsC,CAzFxC;;AAAA;AAAA;AAwFM,cAAA,OAxFN,yBAwFM,OAxFN;AAwFM,cAAA,aAxFN,yBAwFM,aAxFN;AAwFgCyP,cAAAA,cAxFhC,yBAwFgCA,cAxFhC;;AAAA,mBAgGMzB,OAAO,CAAPA,MAAAA,CAAJ,OAhGF;AAAA;AAAA;AAAA;;AAAA,gDAiGW;AAAEY,gBAAAA,cAAc,EAAE;AAAlB,eAjGX;;AAAA;AAQ0B;AA6FxB;AACA;AACAW,cAAAA,oBAAoB,CAApBA,OAAAA,CAA6B,UAAA,KAAA,EAAA;AAAA,4CAAA,KAAA;AAAA,oBAAA,GAAA;;AAAA,uBAAWnD,gBAAgB,CAAhBA,MAAAA,CAAX,GAAWA,CAAX;AA/FL,eA+FxBmD,EAvGF,CAQ0B;;AAkGpB1F,cAAAA,QA1GN,GA0GiB8F,YAAY,CAA3B,OAA2B,CA1G7B;;AAAA,mBA2GE,QA3GF;AAAA;AAAA;AAAA;;AA4GQb,cAAAA,kBA5GR,GA4G6Bc,iBAAiB,CAAA,KAAA,EAA1C,QAA0C,CA5G9C;AAAA;AAAA,qBA6GUb,uBAAuB,CAAA,QAAA,EAAA,kBAAA,EAA7B,OAA6B,CA7GjC;;AAAA;AAAA,gDA8GW;AAAEH,gBAAAA,cAAc,EAAE;AAAlB,eA9GX;;AAAA;AAQ0B;AAR1B,mCAkH+BiB,iBAAiB,CAAA,KAAA,EAAA,OAAA,EAAA,aAAA,EAAA,aAAA,EAAA,YAAA,EAAA,oBAAA,EAAA,cAAA,EA1GtB,eA0GsB,CAlHhD,EAkHM,UAlHN,sBAkHM,UAlHN,EAkHoBlE,MAlHpB,sBAkHoBA,MAlHpB,EAQ0B;;AAsHxBe,cAAAA,eAAe,CAAfA,OAAAA,CAAwB,UAAA,YAAA,EAAA,OAAA,EAA0B;AAChDoD,gBAAAA,YAAY,CAAZA,SAAAA,CAAwBxG,UAAAA,OAAD,EAAY;AACjC;AACA;AACA;AACA,sBAAIA,OAAO,IAAIwG,YAAY,CAA3B,IAAA,EAAkC;AAChCpD,oBAAAA,eAAe,CAAfA,MAAAA,CAAAA,OAAAA;AACD;AANHoD,iBAAAA;AADFpD,eAAAA;AAWAqD,cAAAA,sBAAsB;AAClBC,cAAAA,kBA1IN,GA0I2BC,oBAAoB,CAA7C,uBAA6C,CA1I/C;AAAA,gDA4IE,QAAA,CAAA;AACExE,gBAAAA,UADF,EACEA,UADF;AAEEE,gBAAAA,MAAAA,EAAAA;AAFF,eAAA,EAGM,kBAAkB,IAAI4D,oBAAoB,CAApBA,MAAAA,GAAtB,CAAA,GACA;AAAE3D,gBAAAA,QAAQ,EAAE,IAAA,GAAA,CAAQ5L,KAAK,CAAb,QAAA;AAAZ,eADA,GAHN,EAAA,CA5IF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA/d2C;AAAA;AAAA;;AAonB3C,WAAA,UAAA,CAAA,GAAA,EAA4C;AAC1C,WAAOA,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAAAA,GAAAA,KAAP,YAAA;AArnByC,GAAA,CAAA;;;AAynB3C,WAAA,KAAA,CAAA,GAAA,EAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAI2B;AAEzB,QAAI,OAAA,eAAA,KAAJ,WAAA,EAA4C;AAC1C,YAAM,IAAA,KAAA,CACJ,8EAAA,8EAAA,GADF,6CAAM,CAAN;AAKD;;AAED,QAAIoM,gBAAgB,CAAhBA,GAAAA,CAAJ,GAAIA,CAAJ,EAA+B8D,YAAY,CAAZA,GAAY,CAAZA;AAE/B,QAAI5M,OAAO,GAAGyH,WAAW,CAAA,UAAA,EAAA,IAAA,EAAmB7C,IAAI,CAAhD,QAAyB,CAAzB;;AACA,QAAI,CAAJ,OAAA,EAAc;AACZiI,MAAAA,eAAe,CAAA,GAAA,EAAA,OAAA,EAAe,IAAA,aAAA,CAAA,GAAA,EAAA,WAAA,EAA9BA,IAA8B,CAAf,CAAfA;AACA;AACD;;AAED,gCAA2BhD,wBAAwB,CAAA,IAAA,EAAnD,IAAmD,CAAnD;AAAA,QAAI,IAAJ,yBAAI,IAAJ;AAAA,QAAYE,UAAZ,yBAAYA,UAAZ;;AACA,QAAI9H,KAAK,GAAGiJ,cAAc,CAAA,OAAA,EAA1B,IAA0B,CAA1B;;AAEA,QAAA,UAAA,EAAgB;AACd4B,MAAAA,mBAAmB,CAAA,GAAA,EAAA,OAAA,EAAA,IAAA,EAAA,KAAA,EAAnBA,UAAmB,CAAnBA;AACA;AAvBuB,KAAA,CAAA;AA2BzB;;;AACA3D,IAAAA,gBAAgB,CAAhBA,GAAAA,CAAAA,GAAAA,EAA0B,CAAA,IAAA,EAA1BA,KAA0B,CAA1BA;AACA4D,IAAAA,mBAAmB,CAAA,GAAA,EAAA,OAAA,EAAA,IAAA,EAAnBA,KAAmB,CAAnBA;AA1pByC,GAAA,CAAA;AA8pB3C;;;AA9pB2C,WA+pB3C,mBA/pB2C;AAAA;AAAA,IAAA;;;AAAA;AAAA,oFA+pB3C,kBAAA,GAAA,EAAA,OAAA,EAAA,IAAA,EAAA,KAAA,EAAA,UAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAOE9C,cAAAA,oBAAoB;AACpBd,cAAAA,gBAAgB,CAAhBA,MAAAA,CAAAA,GAAAA;;AARF,kBAUOlH,KAAK,CAALA,KAAAA,CAAL,MAVF;AAAA;AAAA;AAAA;;AAAA,sCAWoBmJ,yBAAyB,CAAzC,IAAyC,CAX7C,EAWU3F,OAXV,yBAWUA,KAXV;AAYIoH,cAAAA,eAAe,CAAA,GAAA,EAAA,OAAA,EAAfA,OAAe,CAAfA;AAZJ;;AAAA;AAKwB;AAYlBG,cAAAA,OAjBN,GAiBa,QAAA,CAAA;AACTtQ,gBAAAA,KAAK,EAAE;AADE,eAAA,EAAA,UAAA,EAAA;AAGTwI,gBAAAA,IAAI,EAAE,CAAA,CAAA,oBAAA,GAAA,KAAK,CAAL,QAAA,CAAA,GAAA,CAAA,GAAA,CAAA,KAAyBA,IAAzB,GAAyBA,KAAAA,CAAzB,GAAyBA,oBAAAA,CAAzB,IAAA,KAAiCxF;AAH9B,eAAA,CAjBb;AAsBEhD,cAAAA,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAAAA,GAAAA,EAAAA,OAAAA;AACAiN,cAAAA,WAAW,CAAC;AAAErB,gBAAAA,QAAQ,EAAE,IAAA,GAAA,CAAQ5L,KAAK,CAAb,QAAA;AAAZ,eAAD,CAAXiN,CAvBF,CAKwB;;AAqBlBsD,cAAAA,eA1BN,GA0BwB,IAAtB,eAAsB,EA1BxB;AA2BMC,cAAAA,YA3BN,GA2BqBvC,aAAa,CAAA,IAAA,EAAOsC,eAAe,CAAtB,MAAA,EAAhC,UAAgC,CA3BlC;AA4BEnE,cAAAA,gBAAgB,CAAhBA,GAAAA,CAAAA,GAAAA,EAAAA,eAAAA;AA5BF;AAAA,qBA8B2BuC,kBAAkB,CAAA,QAAA,EAAA,YAAA,EAA3C,KAA2C,CA9B7C;;AAAA;AA8BM8B,cAAAA,YA9BN;;AAAA,mBAgCMD,YAAY,CAAZA,MAAAA,CAAJ,OAhCF;AAAA;AAAA;AAAA;;AAiCI;AACA;AACA,kBAAIpE,gBAAgB,CAAhBA,GAAAA,CAAAA,GAAAA,MAAJ,eAAA,EAAmD;AACjDA,gBAAAA,gBAAgB,CAAhBA,MAAAA,CAAAA,GAAAA;AACD;;AArCL;;AAAA;AAAA,mBAyCMyC,gBAAgB,CAApB,YAAoB,CAzCtB;AAAA;AAAA;AAAA;;AA0CIzC,cAAAA,gBAAgB,CAAhBA,MAAAA,CAAAA,GAAAA;AACAI,cAAAA,gBAAgB,CAAhBA,GAAAA,CAAAA,GAAAA;AACIkE,cAAAA,cA5CR,GA4CsB,QAAA,CAAA;AAChB1Q,gBAAAA,KAAK,EAAE;AADS,eAAA,EAAA,UAAA,EAAA;AAGhBwI,gBAAAA,IAAI,EAAExF;AAHU,eAAA,CA5CtB;AAiDIhD,cAAAA,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAAAA,GAAAA,EAAAA,cAAAA;AACAiN,cAAAA,WAAW,CAAC;AAAErB,gBAAAA,QAAQ,EAAE,IAAA,GAAA,CAAQ5L,KAAK,CAAb,QAAA;AAAZ,eAAD,CAAXiN;AAEI6B,cAAAA,kBApDR,GAoD0B,QAAA,CAAA;AACpB9O,gBAAAA,KAAK,EADe,SAAA;AAEpBC,gBAAAA,QAAQ,EAAEC,cAAc,CAACF,KAAK,CAAN,QAAA,EAAiByQ,YAAY,CAA7B,QAAA;AAFJ,eAAA,EAAtB,UAAsB,CApD1B;AAAA;AAAA,qBAyDU1B,uBAAuB,CAAA,YAAA,EAA7B,kBAA6B,CAzDjC;;AAAA;AAAA;;AAAA;AAAA,mBA8DMC,aAAa,CAAjB,YAAiB,CA9DnB;AAAA;AAAA;AAAA;;AA+DImB,cAAAA,eAAe,CAAA,GAAA,EAAA,OAAA,EAAeM,YAAY,CAA1CN,KAAe,CAAfA;AA/DJ;;AAAA;AAmEE,kBAAIhB,gBAAgB,CAApB,YAAoB,CAApB,EAAoC;AAClCvM,gBAAAA,SAAS,CAAA,KAAA,EAATA,qCAAS,CAATA;AA/DoB,eALxB,CAKwB;AAmEtB;;;AACIlC,cAAAA,YAzEN,GAyEqBV,KAAK,CAALA,UAAAA,CAAAA,QAAAA,IAA6BA,KAAK,CAArD,QAzEF;AA0EM2Q,cAAAA,mBA1EN,GA0E4B1C,aAAa,CAAA,YAAA,EAErCsC,eAAe,CAFjB,MAAuC,CA1EzC;AA8EMjN,cAAAA,OA9EN,GA+EItD,KAAK,CAALA,UAAAA,CAAAA,KAAAA,KAAAA,MAAAA,GACI+K,WAAW,CAAA,UAAA,EAAa/K,KAAK,CAALA,UAAAA,CAAb,QAAA,EAAwCkI,IAAI,CAD3DlI,QACe,CADfA,GAEIA,KAAK,CAHX,OA9EF;AAmFE4C,cAAAA,SAAS,CAAA,OAAA,EAATA,8CAAS,CAATA;AAEIgO,cAAAA,MArFN,GAqFe,EAAb,kBArFF;AAsFErE,cAAAA,cAAc,CAAdA,GAAAA,CAAAA,GAAAA,EAAAA,MAAAA;AAEIsE,cAAAA,WAxFN,GAwFiB,QAAA,CAAA;AACb7Q,gBAAAA,KAAK,EADQ,SAAA;AAEbwI,gBAAAA,IAAI,EAAEiI,YAAY,CAACjI;AAFN,eAAA,EAAf,UAAe,CAxFjB;AA6FExI,cAAAA,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAAAA,GAAAA,EAAAA,WAAAA;AA7FF,mCA+F8CoP,gBAAgB,CAAA,KAAA,EAAA,OAAA,EAAA,UAAA,EAAA,YAAA,EAAA,sBAAA,EAAA,uBAAA,EAAA,qBAAA,sBAQvD7J,KAAK,CAALA,KAAAA,CAAD,EARwD,EAQtCkL,YAAY,CAACjI,IARyB,GAAA,SAAA,EAAA;AA1FtC,cAAA,gBA0FsC,CA/F9D,8DA+FM,aA/FN,0BA+FM,oBA/FN,0BAKwB;AAwGtB;AACA;;AACA+G,cAAAA,oBAAoB,CAApBA,MAAAA,CACU,UAAA,KAAA,EAAA;AAAA,4CAAA,KAAA;AAAA,oBAAA,QAAA;;AAAA,uBAAgBuB,QAAQ,KAAxB,GAAA;AADVvB,eAAAA,EAAAA,OAAAA,CAEW,UAAA,KAAe,EAAA;AAAA,oBAAA,oBAAA;;AAAd,4CAAc,KAAd;AAAA,oBAAA,QAAA;;AACR,oBAAIC,mBAAmB,GAA6B;AAClDxP,kBAAAA,KAAK,EAD6C,SAAA;AAElDwI,kBAAAA,IAAI,EAAA,CAAA,oBAAA,GAAExI,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAAF,QAAEA,CAAF,KAAEA,IAAF,GAAEA,KAAAA,CAAF,GAAEA,oBAAAA,CAF4C,IAAA;AAGlDkK,kBAAAA,UAAU,EAHwC,SAAA;AAIlDC,kBAAAA,UAAU,EAJwC,SAAA;AAKlDC,kBAAAA,WAAW,EALuC,SAAA;AAMlDC,kBAAAA,QAAQ,EAAErH;AANwC,iBAApD;AAQAhD,gBAAAA,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAAAA,QAAAA,EAAAA,mBAAAA;AACAoM,gBAAAA,gBAAgB,CAAhBA,GAAAA,CAAAA,QAAAA,EAAAA,eAAAA;AAZJmD,eAAAA;AAeAtC,cAAAA,WAAW,CAAC;AAAErB,gBAAAA,QAAQ,EAAE,IAAA,GAAA,CAAQ5L,KAAK,CAAb,QAAA;AAAZ,eAAD,CAAXiN;AA9HF;AAAA,qBAiIUyC,8BAA8B,CAClC1P,KAAK,CAD6B,OAAA,EAAA,aAAA,EAAA,oBAAA,EADtC,mBACsC,CAjIxC;;AAAA;AAAA;AAgIM,cAAA,OAhIN,0BAgIM,OAhIN;AAgIM,cAAA,aAhIN,0BAgIM,aAhIN;AAgIgCyP,cAAAA,cAhIhC,0BAgIgCA,cAhIhC;;AAAA,mBAwIMc,eAAe,CAAfA,MAAAA,CAAJ,OAxIF;AAAA;AAAA;AAAA;;AAAA;;AAAA;AA4IEhE,cAAAA,cAAc,CAAdA,MAAAA,CAAAA,GAAAA;AACAH,cAAAA,gBAAgB,CAAhBA,MAAAA,CAAAA,GAAAA;AACAmD,cAAAA,oBAAoB,CAApBA,OAAAA,CAA6B,UAAA,KAAA,EAAA;AAAA,4CAAA,KAAA;AAAA,oBAAA,QAAA;;AAAA,uBAC3BnD,gBAAgB,CAAhBA,MAAAA,CAD2B,QAC3BA,CAD2B;AAA7BmD,eAAAA;AAII1F,cAAAA,QAlJN,GAkJiB8F,YAAY,CAA3B,OAA2B,CAlJ7B;;AAAA,mBAmJE,QAnJF;AAAA;AAAA;AAAA;;AAoJQb,cAAAA,mBApJR,GAoJ6Bc,iBAAiB,CAAA,KAAA,EAA1C,QAA0C,CApJ9C;AAAA;AAAA,qBAqJUb,uBAAuB,CAAA,QAAA,EAA7B,mBAA6B,CArJjC;;AAAA;AAAA;;AAAA;AAKwB;AALxB,oCA0J+Bc,iBAAiB,CAAA,KAAA,EAE5C7P,KAAK,CAFuC,OAAA,EAAA,aAAA,EAAA,aAAA,EAAA,SAAA,EAAA,oBAAA,EAAA,cAAA,EAA9C,eAA8C,CA1JhD,EA0JM,UA1JN,uBA0JM,UA1JN,EA0JoB2L,MA1JpB,uBA0JoBA,MA1JpB;AAqKMoF,cAAAA,WArKN,GAqK2C;AACvC/Q,gBAAAA,KAAK,EADkC,MAAA;AAEvCwI,gBAAAA,IAAI,EAAEiI,YAAY,CAFqB,IAAA;AAGvCvG,gBAAAA,UAAU,EAH6B,SAAA;AAIvCC,gBAAAA,UAAU,EAJ6B,SAAA;AAKvCC,gBAAAA,WAAW,EAL4B,SAAA;AAMvCC,gBAAAA,QAAQ,EAAErH;AAN6B,eArK3C;AA6KEhD,cAAAA,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAAAA,GAAAA,EAAAA,WAAAA;AAEIgQ,cAAAA,kBA/KN,GA+K2BC,oBAAoB,CA1KvB,MA0KuB,CA/K/C,EAKwB;AA6KtB;AACA;;AACA,kBACEjQ,KAAK,CAALA,UAAAA,CAAAA,KAAAA,KAAAA,SAAAA,IACA4Q,MAAM,GAFR,uBAAA,EAGE;AACAhO,gBAAAA,SAAS,CAAA,aAAA,EAATA,yBAAS,CAATA;AACA,iBAAA,sBAAA,GAAA,2BAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,sBAAA,CAAA,KAAA,EAAA;AAEAkL,gBAAAA,kBAAkB,CAAC9N,KAAK,CAALA,UAAAA,CAAD,QAAA,EAA4B;AAC5CsD,kBAAAA,OAD4C,EAC5CA,OAD4C;AAE5CmI,kBAAAA,UAF4C,EAE5CA,UAF4C;AAG5CE,kBAAAA,MAH4C,EAG5CA,MAH4C;AAI5CC,kBAAAA,QAAQ,EAAE,IAAA,GAAA,CAAQ5L,KAAK,CAAb,QAAA;AAJkC,iBAA5B,CAAlB8N;AAPF,eAAA,MAaO;AACL;AACA;AACA;AACAb,gBAAAA,WAAW,CAAA,QAAA,CAAA;AACTtB,kBAAAA,MADS,EACTA,MADS;AAETF,kBAAAA,UAAU,EAAEsB,eAAe,CAAC/M,KAAK,CAAN,UAAA,EAAA,UAAA,EAAA,OAAA;AAFlB,iBAAA,EAGLgQ,kBAAkB,GAAG;AAAEpE,kBAAAA,QAAQ,EAAE,IAAA,GAAA,CAAQ5L,KAAK,CAAb,QAAA;AAAZ,iBAAH,GAHxBiN,EAAW,CAAA,CAAXA;AAKAhB,gBAAAA,sBAAsB,GAAtBA,KAAAA;AACD;;AA3MH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA/pB2C;AAAA;AAAA;;AAAA,WA82B3C,mBA92B2C;AAAA;AAAA;AAo8B3C;;;;;;;;;;;;;;;;;;AAkBG;;;AAt9BwC;AAAA,oFA82B3C,kBAAA,GAAA,EAAA,OAAA,EAAA,IAAA,EAAA,KAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAME;AACIyE,cAAAA,cAPN,GAOiD;AAC7C1Q,gBAAAA,KAAK,EADwC,SAAA;AAE7CkK,gBAAAA,UAAU,EAFmC,SAAA;AAG7CC,gBAAAA,UAAU,EAHmC,SAAA;AAI7CC,gBAAAA,WAAW,EAJkC,SAAA;AAK7CC,gBAAAA,QAAQ,EALqC,SAAA;AAM7C7B,gBAAAA,IAAI,EAAE,CAAA,CAAA,oBAAA,GAAA,KAAK,CAAL,QAAA,CAAA,GAAA,CAAA,GAAA,CAAA,KAAyBA,IAAzB,GAAyBA,KAAAA,CAAzB,GAAyBA,oBAAAA,CAAzB,IAAA,KAAiCxF;AANM,eAPjD;AAeEhD,cAAAA,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAAAA,GAAAA,EAAAA,cAAAA;AACAiN,cAAAA,WAAW,CAAC;AAAErB,gBAAAA,QAAQ,EAAE,IAAA,GAAA,CAAQ5L,KAAK,CAAb,QAAA;AAAZ,eAAD,CAAXiN,CAhBF,CAI+B;;AAezBsD,cAAAA,eAnBN,GAmBwB,IAAtB,eAAsB,EAnBxB;AAoBMC,cAAAA,YApBN,GAoBqBvC,aAAa,CAAA,IAAA,EAAOsC,eAAe,CAAtD,MAAgC,CApBlC;AAqBEnE,cAAAA,gBAAgB,CAAhBA,GAAAA,CAAAA,GAAAA,EAAAA,eAAAA;AArBF;AAAA,qBAsBiCuC,kBAAkB,CAAA,QAAA,EAAA,YAAA,EAlBpB,KAkBoB,CAtBnD;;AAAA;AAsBMF,cAAAA,MAtBN;;AAAA,mBAgCMU,gBAAgB,CAApB,MAAoB,CAhCtB;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAkCa6B,mBAAmB,CAAA,MAAA,EAASR,YAAY,CAArB,MAAA,EAA1B,IAA0B,CAlChC;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA,6BAiCI/B,MAjCJ;;AAAA;AAiCIA,cAAAA,MAjCJ;;AAAA;AAI+B;AAmC7B;AACA,kBAAIrC,gBAAgB,CAAhBA,GAAAA,CAAAA,GAAAA,MAAJ,eAAA,EAAmD;AACjDA,gBAAAA,gBAAgB,CAAhBA,MAAAA,CAAAA,GAAAA;AACD;;AA1CH,mBA4CMoE,YAAY,CAAZA,MAAAA,CAAJ,OA5CF;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,mBAiDM3B,gBAAgB,CAApB,MAAoB,CAjDtB;AAAA;AAAA;AAAA;;AAkDQC,cAAAA,kBAlDR,GAkD6Bc,iBAAiB,CAAA,KAAA,EAA1C,MAA0C,CAlD9C;AAAA;AAAA,qBAmDUb,uBAAuB,CAAA,MAAA,EAA7B,kBAA6B,CAnDjC;;AAAA;AAAA;;AAAA;AAAA,mBAwDMC,aAAa,CAAjB,MAAiB,CAxDnB;AAAA;AAAA;AAAA;;AAyDQC,cAAAA,aAzDR,GAyDwBf,mBAAmB,CAAClO,KAAK,CAAN,OAAA,EAAvC,OAAuC,CAzD3C;AA0DIA,cAAAA,KAAK,CAALA,QAAAA,CAAAA,MAAAA,CAFyB,GAEzBA,EA1DJ,CAwD6B;AAIzB;AACA;;AACAiN,cAAAA,WAAW,CAAC;AACVrB,gBAAAA,QAAQ,EAAE,IAAA,GAAA,CAAQ5L,KAAK,CADb,QACA,CADA;AAEV2L,gBAAAA,MAAM,sBACHsD,aAAa,CAAbA,KAAAA,CAAD,EADI,EACsBR,MAAM,CAAC1F,KAD7B;AAFI,eAAD,CAAXkE;AA9DJ;;AAAA;AAuEErK,cAAAA,SAAS,CAAC,CAACuM,gBAAgB,CAAlB,MAAkB,CAAlB,EAnEoB,iCAmEpB,CAATvM,CAvEF,CAI+B;;AAsEzBmO,cAAAA,WA1EN,GA0E2C;AACvC/Q,gBAAAA,KAAK,EADkC,MAAA;AAEvCwI,gBAAAA,IAAI,EAAEiG,MAAM,CAF2B,IAAA;AAGvCvE,gBAAAA,UAAU,EAH6B,SAAA;AAIvCC,gBAAAA,UAAU,EAJ6B,SAAA;AAKvCC,gBAAAA,WAAW,EAL4B,SAAA;AAMvCC,gBAAAA,QAAQ,EAAErH;AAN6B,eA1E3C;AAkFEhD,cAAAA,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAAAA,GAAAA,EAAAA,WAAAA;AACAiN,cAAAA,WAAW,CAAC;AAAErB,gBAAAA,QAAQ,EAAE,IAAA,GAAA,CAAQ5L,KAAK,CAAb,QAAA;AAAZ,eAAD,CAAXiN;;AAnFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA92B2C;AAAA;AAAA;;AAAA,WAu9B3C,uBAv9B2C;AAAA;AAAA;;AAAA;AAAA,wFAu9B3C,kBAAA,QAAA,EAAA,UAAA,EAAA,OAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKE,kBAAIpD,QAAQ,CAAZ,UAAA,EAAyB;AACvBoC,gBAAAA,sBAAsB,GAAtBA,IAAAA;AACD;;AACDrJ,cAAAA,SAAS,CACPyI,UAAU,CADH,QAAA,EALQ,gDAKR,CAATzI,CARF,CAGmB;AAUjB;;AACA8K,cAAAA,2BAA2B,GAA3BA,IAAAA;AAEIuD,cAAAA,qBAhBN,GAiBItQ,OAAO,KAAPA,IAAAA,GAAmBmL,MAAa,CAAhCnL,OAAAA,GAA2CmL,MAAa,CAD1D,IAhBF;AAAA;AAAA,qBAkBQa,eAAe,CAAA,qBAAA,EAAwBtB,UAAU,CAAlC,QAAA,EAA6C;AAChEoC,gBAAAA,kBAAkB,EAAEpC;AAD4C,eAA7C,CAlBvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAv9B2C;AAAA;AAAA;;AAAA,WA8+B3C,8BA9+B2C;AAAA;AAAA;;AAAA;AAAA,+FA8+B3C,kBAAA,cAAA,EAAA,aAAA,EAAA,cAAA,EAAA,OAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBASsB,OAAO,CAAP,GAAA,8BACfiE,aAAa,CAAbA,GAAAA,CAAmBnE,UAAAA,CAAD;AAAA,uBAAOwD,kBAAkB,CAAA,QAAA,EAAA,OAAA,EADhB,CACgB,CAAzB;AAAA,eAAlBW,CADe,sBAEf,cAAc,CAAd,GAAA,CAAmB,UAAA,KAAA,EAAA;AAAA,4CAAA,KAAA;AAAA,oBAAC,IAAD;AAAA,oBAAA,KAAA;;AAAA,uBACpBX,kBAAkB,CAAA,QAAA,EAAWV,aAAa,CAAA,IAAA,EAAOD,OAAO,CAAtC,MAAwB,CAAxB,EADE,KACF,CADE;AAFxB,eAEK,CAFe,GATtB;;AAAA;AASMkD,cAAAA,OATN;AAeMC,cAAAA,aAfN,GAesBD,OAAO,CAAPA,KAAAA,CAAAA,CAAAA,EAAiB5B,aAAa,CAAlD,MAAoB4B,CAftB;AAgBMzB,cAAAA,cAhBN,GAgBuByB,OAAO,CAAPA,KAAAA,CAAc5B,aAAa,CAAhD,MAAqB4B,CAhBvB;AAAA;AAAA,qBAkBQpI,OAAO,CAAPA,GAAAA,CAAY,CAChBsI,sBAAsB,CAAA,cAAA,EAAA,aAAA,EAAA,aAAA,EAIpBpD,OAAO,CAJa,MAAA,EAAA,KAAA,EAMpBhO,KAAK,CAPS,UACM,CADN,EAShBoR,sBAAsB,CAAA,cAAA,EAEpB,cAAc,CAAd,GAAA,CAAmB,UAAA,KAAA,EAAA;AAAA,4CAAA,KAAA;AAAA,oBAAA,KAAA;;AAAA,uBAAA,KAAA;AAFC,eAEpB,CAFoB,EAAA,cAAA,EAIpBpD,OAAO,CAJa,MAAA,EATxB,IASwB,CATN,CAAZlF,CAlBR;;AAAA;AAAA,gDAoCS;AAAEoI,gBAAAA,OAAF,EAAEA,OAAF;AAAWC,gBAAAA,aAAX,EAAWA,aAAX;AAA0B1B,gBAAAA,cAAAA,EAAAA;AAA1B,eApCT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA9+B2C;AAAA;AAAA;;AAqhC3C,WAAA,oBAAA,GAA6B;AAAA;;AAC3B;AACAxD,IAAAA,sBAAsB,GAFK,IAE3BA,CAF2B,CAAA;AAK3B;;AACAC,6BAAAA,uBAAuB,EAAvBA,IAAAA,iDAAgC2B,qBANL,EAM3B3B,GAN2B,CAAA;;;AAS3BO,IAAAA,gBAAgB,CAAhBA,OAAAA,CAAyB,UAAA,CAAA,EAAA,GAAA,EAAW;AAClC,UAAIL,gBAAgB,CAAhBA,GAAAA,CAAJ,GAAIA,CAAJ,EAA+B;AAC7BD,QAAAA,qBAAqB,CAArBA,IAAAA,CAAAA,GAAAA;AACA+D,QAAAA,YAAY,CAAZA,GAAY,CAAZA;AACD;AAJHzD,KAAAA;AAMD;;AAED,WAAA,eAAA,CAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAiE;AAC/D,QAAIwC,aAAa,GAAGf,mBAAmB,CAAClO,KAAK,CAAN,OAAA,EAAvC,OAAuC,CAAvC;AACA4M,IAAAA,aAAa,CAAbA,GAAa,CAAbA;AACAK,IAAAA,WAAW,CAAC;AACVtB,MAAAA,MAAM,sBACHsD,aAAa,CAAbA,KAAAA,CAAD,EADI,EACsBlG,KADtB,CADI;AAIV6C,MAAAA,QAAQ,EAAE,IAAA,GAAA,CAAQ5L,KAAK,CAAb,QAAA;AAJA,KAAD,CAAXiN;AAMD;;AAED,WAAA,aAAA,CAAA,GAAA,EAAkC;AAChC,QAAIb,gBAAgB,CAAhBA,GAAAA,CAAJ,GAAIA,CAAJ,EAA+B8D,YAAY,CAAZA,GAAY,CAAZA;AAC/BzD,IAAAA,gBAAgB,CAAhBA,MAAAA,CAAAA,GAAAA;AACAF,IAAAA,cAAc,CAAdA,MAAAA,CAAAA,GAAAA;AACAC,IAAAA,gBAAgB,CAAhBA,MAAAA,CAAAA,GAAAA;AACAxM,IAAAA,KAAK,CAALA,QAAAA,CAAAA,MAAAA,CAAAA,GAAAA;AACD;;AAED,WAAA,YAAA,CAAA,GAAA,EAAiC;AAC/B,QAAIqR,UAAU,GAAGjF,gBAAgB,CAAhBA,GAAAA,CAAjB,GAAiBA,CAAjB;AACAxJ,IAAAA,SAAS,CAAA,UAAA,EAA2ClB,gCAApDkB,GAAS,CAATA;AACAyO,IAAAA,UAAU,CAAVA,KAAAA;AACAjF,IAAAA,gBAAgB,CAAhBA,MAAAA,CAAAA,GAAAA;AACD;;AAED,WAAA,gBAAA,CAAA,IAAA,EAAwC;AAAA,+CACtC,IADsC;AAAA;;AAAA;AACtC,0DAAsB;AAAA,YAAtB,GAAsB;AACpB,YAAIkE,OAAO,GAAGgB,UAAU,CAAxB,GAAwB,CAAxB;AACA,YAAIP,WAAW,GAA0B;AACvC/Q,UAAAA,KAAK,EADkC,MAAA;AAEvCwI,UAAAA,IAAI,EAAE8H,OAAO,CAF0B,IAAA;AAGvCpG,UAAAA,UAAU,EAH6B,SAAA;AAIvCC,UAAAA,UAAU,EAJ6B,SAAA;AAKvCC,UAAAA,WAAW,EAL4B,SAAA;AAMvCC,UAAAA,QAAQ,EAAErH;AAN6B,SAAzC;AAQAhD,QAAAA,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAAAA,GAAAA,EAAAA,WAAAA;AACD;AAZqC;AAAA;AAAA;AAAA;AAAA;AAavC;;AAED,WAAA,sBAAA,GAA+B;AAC7B,QAAIuR,QAAQ,GAAZ,EAAA;;AAD6B,gDAE7B,gBAF6B;AAAA;;AAAA;AAE7B,6DAAkC;AAAA,YAAlC,GAAkC;AAChC,YAAIjB,OAAO,GAAGtQ,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAAd,GAAcA,CAAd;AACA4C,QAAAA,SAAS,CAAA,OAAA,EAA+BlB,uBAAxCkB,GAAS,CAATA;;AACA,YAAI0N,OAAO,CAAPA,KAAAA,KAAJ,SAAA,EAAiC;AAC/B9D,UAAAA,gBAAgB,CAAhBA,MAAAA,CAAAA,GAAAA;AACA+E,UAAAA,QAAQ,CAARA,IAAAA,CAAAA,GAAAA;AACD;AACF;AAT4B;AAAA;AAAA;AAAA;AAAA;;AAU7BC,IAAAA,gBAAgB,CAAhBA,QAAgB,CAAhBA;AACD;;AAED,WAAA,oBAAA,CAAA,QAAA,EAA8C;AAC5C,QAAIC,UAAU,GAAd,EAAA;;AAD4C,gDAE5C,cAF4C;AAAA;;AAAA;AAE5C,6DAAsC;AAAA;AAAA,YAA7B,GAA6B;AAAA,YAAtC,EAAsC;;AACpC,YAAI/O,EAAE,GAAN,QAAA,EAAmB;AACjB,cAAI4N,OAAO,GAAGtQ,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAAd,GAAcA,CAAd;AACA4C,UAAAA,SAAS,CAAA,OAAA,EAA+BlB,uBAAxCkB,GAAS,CAATA;;AACA,cAAI0N,OAAO,CAAPA,KAAAA,KAAJ,SAAA,EAAiC;AAC/BJ,YAAAA,YAAY,CAAZA,GAAY,CAAZA;AACA3D,YAAAA,cAAc,CAAdA,MAAAA,CAAAA,GAAAA;AACAkF,YAAAA,UAAU,CAAVA,IAAAA,CAAAA,GAAAA;AACD;AACF;AACF;AAZ2C;AAAA;AAAA;AAAA;AAAA;;AAa5CD,IAAAA,gBAAgB,CAAhBA,UAAgB,CAAhBA;AACA,WAAOC,UAAU,CAAVA,MAAAA,GAAP,CAAA;AACD;;AAED,WAAA,qBAAA,CAAA,SAAA,EAC0C;AAExC,QAAIC,iBAAiB,GAArB,EAAA;AACAhF,IAAAA,eAAe,CAAfA,OAAAA,CAAwB,UAAA,GAAA,EAAA,OAAA,EAAiB;AACvC,UAAI,CAAA,SAAA,IAAciF,SAAS,CAA3B,OAA2B,CAA3B,EAAsC;AACpC;AACA;AACA;AACAC,QAAAA,GAAG,CAAHA,MAAAA;AACAF,QAAAA,iBAAiB,CAAjBA,IAAAA,CAAAA,OAAAA;AACAhF,QAAAA,eAAe,CAAfA,MAAAA,CAAAA,OAAAA;AACD;AARHA,KAAAA;AAUA,WAAA,iBAAA;AA3nCyC,GAAA,CAAA;AA+nC3C;;;AACA,WAAA,uBAAA,CAAA,SAAA,EAAA,WAAA,EAAA,MAAA,EAG0C;AAExChC,IAAAA,oBAAoB,GAApBA,SAAAA;AACAE,IAAAA,iBAAiB,GAAjBA,WAAAA;;AACAD,IAAAA,uBAAuB,GAAGkH,MAAM,IAAM5R,UAAAA,QAAD;AAAA,aAAcA,QAAQ,CAJnB,GAIH;AAAA,KAArC0K,CAJwC,CAAA;AAOxC;AACA;;;AACA,QAAI,CAAA,qBAAA,IAA0B3K,KAAK,CAALA,UAAAA,KAA9B,eAAA,EAAoE;AAClE6K,MAAAA,qBAAqB,GAArBA,IAAAA;AACA,UAAIiH,CAAC,GAAG5E,sBAAsB,CAAClN,KAAK,CAAN,QAAA,EAAiBA,KAAK,CAApD,OAA8B,CAA9B;;AACA,UAAI8R,CAAC,IAAL,IAAA,EAAe;AACb7E,QAAAA,WAAW,CAAC;AAAE3B,UAAAA,qBAAqB,EAAEwG;AAAzB,SAAD,CAAX7E;AACD;AACF;;AAED,WAAO,YAAK;AACVvC,MAAAA,oBAAoB,GAApBA,IAAAA;AACAE,MAAAA,iBAAiB,GAAjBA,IAAAA;AACAD,MAAAA,uBAAuB,GAAvBA,IAAAA;AAHF,KAAA;AAKD;;AAED,WAAA,kBAAA,CAAA,QAAA,EAAA,OAAA,EAEmC;AAEjC,QAAID,oBAAoB,IAApBA,uBAAAA,IAAJ,iBAAA,EAA0E;AACxE,UAAIqH,WAAW,GAAGzO,OAAO,CAAPA,GAAAA,CAAa6H,UAAAA,CAAD;AAAA,eAC5B6G,qBAAqB,CAAA,CAAA,EAAIhS,KAAK,CADhC,UACuB,CADO;AAAA,OAAZsD,CAAlB;AAGA,UAAI5B,GAAG,GAAGiJ,uBAAuB,CAAA,QAAA,EAAvBA,WAAuB,CAAvBA,IAAkD1K,QAAQ,CAApE,GAAA;AACAyK,MAAAA,oBAAoB,CAApBA,GAAoB,CAApBA,GAA4BE,iBAA5BF,EAAAA;AACD;AACF;;AAED,WAAA,sBAAA,CAAA,QAAA,EAAA,OAAA,EAEmC;AAEjC,QAAIA,oBAAoB,IAApBA,uBAAAA,IAAJ,iBAAA,EAA0E;AACxE,UAAIqH,WAAW,GAAGzO,OAAO,CAAPA,GAAAA,CAAa6H,UAAAA,CAAD;AAAA,eAC5B6G,qBAAqB,CAAA,CAAA,EAAIhS,KAAK,CADhC,UACuB,CADO;AAAA,OAAZsD,CAAlB;AAGA,UAAI5B,GAAG,GAAGiJ,uBAAuB,CAAA,QAAA,EAAvBA,WAAuB,CAAvBA,IAAkD1K,QAAQ,CAApE,GAAA;AACA,UAAI6R,CAAC,GAAGpH,oBAAoB,CAA5B,GAA4B,CAA5B;;AACA,UAAI,OAAA,CAAA,KAAJ,QAAA,EAA2B;AACzB,eAAA,CAAA;AACD;AACF;;AACD,WAAA,IAAA;AACD;;AAEDuH,EAAAA,MAAM,GAAG;AACP,QAAA,QAAA,GAAY;AACV,aAAO/J,IAAI,CAAX,QAAA;AAFK,KAAA;;AAIP,QAAA,KAAA,GAAS;AACP,aAAA,KAAA;AALK,KAAA;;AAOP,QAAA,MAAA,GAAU;AACR,aAAA,UAAA;AARK,KAAA;;AAUPgK,IAAAA,UAVO,EAUPA,UAVO;AAWP/I,IAAAA,SAXO,EAWPA,SAXO;AAYPgJ,IAAAA,uBAZO,EAYPA,uBAZO;AAaPC,IAAAA,QAbO,EAaPA,QAbO;AAcPC,IAAAA,KAdO,EAcPA,KAdO;AAePC,IAAAA,UAfO,EAePA,UAfO;AAgBP/R,IAAAA,UAhBO,EAgBPA,UAhBO;AAiBP+Q,IAAAA,UAjBO,EAiBPA,UAjBO;AAkBP1E,IAAAA,aAlBO,EAkBPA,aAlBO;AAmBP2F,IAAAA,OAnBO,EAmBPA,OAnBO;AAoBPC,IAAAA,yBAAyB,EApBlB,gBAAA;AAqBPC,IAAAA,wBAAwB,EAAE/F;AArBnB,GAATuF;AAwBA,SAAA,MAAA;AACD,C,CAAA;AAGD;AACA;AACA;;;AAEM,SAAA,4BAAA,CAAA,MAAA,EACyB;AAE7BrP,EAAAA,SAAS,CACPc,MAAM,CAANA,MAAAA,GADO,CAAA,EAATd,2EAAS,CAATA;AAKA,MAAI2H,UAAU,GAAGxH,yBAAyB,CAA1C,MAA0C,CAA1C;;AAP6B,WAS7B,KAT6B;AAAA;AAAA;;AAAA;AAAA,sEAS7B,mBAAA,OAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAGmC2P,SAAS,CAA1C,OAA0C,CAH5C;;AAAA;AAAA;AAGM,cAAA,QAHN,oBAGM,QAHN;AAGkBjE,cAAAA,MAHlB,oBAGkBA,MAHlB;;AAAA,oBAIMA,MAAM,YAAV,QAJF;AAAA;AAAA;AAAA;;AAAA,iDAKI,MALJ;;AAAA;AAAA,iDAUE,QAAA,CAAA;AAASxO,gBAAAA,QAAAA,EAAAA;AAAT,eAAA,EAAA,MAAA,CAVF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAT6B;AAAA;AAAA;;AAAA,WAsB7B,UAtB6B;AAAA;AAAA;;AAAA;AAAA,2EAsB7B,mBAAA,OAAA,EAAA,OAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACyByS,SAAS,CAAA,OAAA,EAAhC,OAAgC,CADlC;;AAAA;AAAA;AACQjE,cAAAA,MADR,qBACQA,MADR;;AAAA,oBAEMA,MAAM,YAAV,QAFF;AAAA;AAAA;AAAA;;AAAA,iDAGI,MAHJ;;AAAA;AAA2D;AAOrDkE,cAAAA,SAPN,GAOkB,CAAClE,MAAM,CAAP,MAAA,EAAgBA,MAAM,CAAtB,UAAA,EAAmCA,MAAM,CAAzC,UAAA,EAAA,IAAA,CACbmE,UAAAA,CAAD;AAAA,uBADF,CACE;AAAA,eADc,CAPlB;AAUM/L,cAAAA,KAVN,GAUcpB,MAAM,CAANA,MAAAA,CAAckN,SAAS,IAAvBlN,EAAAA,EAAZ,CAAYA,CAVd;;AAAA,mBAYMoN,oBAAoB,CAAxB,KAAwB,CAZ1B;AAAA;AAAA;AAAA;;AAAA,iDAaW,IAAA,QAAA,CAAahM,KAAK,CAAlB,IAAA,EAAyB;AAC9BuB,gBAAAA,MAAM,EAAEvB,KAAK,CADiB,MAAA;AAE9BkD,gBAAAA,UAAU,EAAElD,KAAK,CAACkD;AAFY,eAAzB,CAbX;;AAAA;AAAA,iDAmBE,KAnBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAtB6B;AAAA;AAAA;;AAAA,WA4C7B,SA5C6B;AAAA;AAAA;;AAAA;AAAA,0EA4C7B,mBAAA,OAAA,EAAA,OAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAOEnH,cAAAA,SAAS,CACPoL,OAAO,CAAPA,MAAAA,KADO,MAAA,EAATpL,mDAAS,CAATA;AAIAA,cAAAA,SAAS,CACPoL,OAAO,CADA,MAAA,EAATpL,sEAAS,CAATA;AAXF,8BAgBiDmQ,YAAY,CAAA,OAAA,EAA3D,OAA2D,CAhB7D,EAgBM,QAhBN,iBAgBM,QAhBN,EAgBM,OAhBN,iBAgBM,OAhBN,EAgB2BD,iBAhB3B,iBAgB2BA,iBAhB3B;AAAA;;AAAA,mBAsBI,iBAtBJ;AAAA;AAAA;AAAA;;AAAA,iDAuBa;AAAE7S,gBAAAA,QAAF,EAAEA,QAAF;AAAYwO,gBAAAA,MAAM,EAAEqE;AAApB,eAvBb;;AAAA;AAAA,oBA0BQ9E,OAAO,CAAPA,MAAAA,KAAJ,KA1BJ;AAAA;AAAA;AAAA;;AAAA;AAAA,qBA2ByBgF,MAAM,CAAA,OAAA,EAAA,OAAA,EAGvBxE,cAAc,CAAA,OAAA,EAHS,QAGT,CAHS,EAIvBa,OAAO,IAJT,IAAyB,CA3B/B;;AAAA;AA2BUZ,cAAAA,OA3BV;AAAA,iDAiCa;AAAExO,gBAAAA,QAAF,EAAEA,QAAF;AAAYwO,gBAAAA,MAAAA,EAAAA;AAAZ,eAjCb;;AAAA;AAAA;AAAA,qBAoCuBwE,aAAa,CAAA,OAAA,EAAA,OAAA,EAAmB5D,OAAO,IAA1D,IAAgC,CApCpC;;AAAA;AAoCQZ,cAAAA,MApCR;AAAA,iDAqCW;AACLxO,gBAAAA,QADK,EACLA,QADK;AAELwO,gBAAAA,MAAM,EAAA,QAAA,CAAA,EAAA,EAAA,MAAA,EAAA;AAEJ/C,kBAAAA,UAAU,EAFN,IAAA;AAGJwH,kBAAAA,aAAa,EAAE;AAHX,iBAAA;AAFD,eArCX;;AAAA;AAAA;AAAA;;AAAA,oBA8CQlJ,yBAAJ,QA9CJ;AAAA;AAAA;AAAA;;AAAA,iDA+Ca;AAAE/J,gBAAAA,QAAF,EAAEA,QAAF;AAAYwO,gBAAAA,MAAM;AAAlB,eA/Cb;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA5C6B;AAAA;AAAA;;AAAA,WAiG7B,MAjG6B;AAAA;AAAA;;AAAA;AAAA,uEAiG7B,mBAAA,OAAA,EAAA,OAAA,EAAA,WAAA,EAAA,cAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOOF,WAAW,CAAXA,KAAAA,CAAL,MAPF;AAAA;AAAA;AAAA;;AAQQjN,cAAAA,IARR,GAQef,UAAU,CAAC,IAAA,GAAA,CAAQyN,OAAO,CAArC,GAAsB,CAAD,CARzB;AASIS,cAAAA,MAAM,GAAGC,yBAAyB,CAAlCD,IAAkC,CAAlCA;AATJ;AAAA;;AAAA;AAAA;AAAA,qBAWmBE,kBAAkB,CAAA,QAAA,EAAA,OAAA,EAAA,WAAA,EAAA,IAAA,EAAjCF,cAAiC,CAXrC;;AAAA;AAWIA,cAAAA,MAXJ;;AAAA,mBAmBQT,OAAO,CAAPA,MAAAA,CAAJ,OAnBJ;AAAA;AAAA;AAAA;;AAoBUmF,cAAAA,MApBV,GAoBmBC,cAAc,GAAA,YAAA,GAA3B,OApBN;AAAA,oBAqBY,IAAA,KAAA,CAAaD,MAAb,GAAN,iBAAM,CArBZ;;AAAA;AAAA,mBAyBMtE,gBAAgB,CAApB,MAAoB,CAzBtB;AAAA;AAAA;AAAA;;AAAA,oBA8BU,IAAA,QAAA,CAAA,IAAA,EAAmB;AACvBzG,gBAAAA,MAAM,EAAEqG,MAAM,CADS,MAAA;AAEvBpG,gBAAAA,OAAO,EAAE;AACPgL,kBAAAA,QAAQ,EAAE5E,MAAM,CAACxO;AADV;AAFc,eAAnB,CA9BV;;AAAA;AAAA,mBAsCMkP,gBAAgB,CAApB,MAAoB,CAtCtB;AAAA;AAAA;AAAA;;AAAA,oBAuCU,IAAA,KAAA,CAAN,qCAAM,CAvCV;;AAAA;AAAA,mBA0CE,cA1CF;AAAA;AAAA;AAAA;;AAAA,mBA2CQH,aAAa,CAAjB,MAAiB,CA3CrB;AAAA;AAAA;AAAA;;AA4CUC,cAAAA,aA5CV,GA4C0Bf,mBAAmB,CAAA,OAAA,EAAUK,WAAW,CAAXA,KAAAA,CAAjD,EAAuC,CA5C7C;AAAA,iDA6Ca;AACLjL,gBAAAA,OAAO,EAAE,CADJ,WACI,CADJ;AAELmI,gBAAAA,UAAU,EAFL,EAAA;AAGLC,gBAAAA,UAAU,EAHL,IAAA;AAILC,gBAAAA,MAAM,sBACHsD,aAAa,CAAbA,KAAAA,CAAD,EADI,EACsBR,MAAM,CAAC1F,KAD7B,CAJD;AAOL;AACA;AACAuK,gBAAAA,UAAU,EATL,GAAA;AAULC,gBAAAA,aAAa,EAVR,EAAA;AAWLL,gBAAAA,aAAa,EAAE;AAXV,eA7Cb;;AAAA;AAAA,iDA4DW;AACL5P,gBAAAA,OAAO,EAAE,CADJ,WACI,CADJ;AAELmI,gBAAAA,UAAU,EAFL,EAAA;AAGLC,gBAAAA,UAAU,sBAAK6C,WAAW,CAAXA,KAAAA,CAAD,EAAJ,EAA4BE,MAAM,CAACjG,IAAnC,CAHL;AAILmD,gBAAAA,MAAM,EAJD,IAAA;AAKL;AACA;AACA2H,gBAAAA,UAAU,EAPL,GAAA;AAQLC,gBAAAA,aAAa,EARR,EAAA;AASLL,gBAAAA,aAAa,EAAE;AATV,eA5DX;;AAAA;AAAA,mBAyEMlE,aAAa,CAAjB,MAAiB,CAzEnB;AAAA;AAAA;AAAA;;AA0EI;AACA;AACIC,cAAAA,cA5ER,GA4EwBf,mBAAmB,CAAA,OAAA,EAAUK,WAAW,CAAXA,KAAAA,CAAjD,EAAuC,CA5E3C;AAAA;AAAA,qBA6EwB0E,aAAa,CAAA,OAAA,EAAA,OAAA,EAAA,cAAA,sBAC9BhE,cAAa,CAAbA,KAAAA,CAAD,EAD+B,EACLR,MAAM,CAAC1F,KADF,EA7ErC;;AAAA;AA6EQyK,cAAAA,UA7ER;AAAA,iDAkFI,QAAA,CAAA,EAAA,EAAA,UAAA,EAAA;AAEEF,gBAAAA,UAAU,EAAET,oBAAoB,CAACpE,MAAM,CAA3BoE,KAAoB,CAApBA,GACRpE,MAAM,CAANA,KAAAA,CADQoE,MAAAA,GAFd,GAAA;AAKEnH,gBAAAA,UAAU,EALZ,IAAA;AAMEwH,gBAAAA,aAAa,EACP,QAAA,CAAA,EAAA,EAAA,MAAM,CAAN,OAAA,uBAAoB3E,WAAW,CAAXA,KAAAA,CAAD,EAAnB,EAA2CE,MAAM,CAACpG,OAAlD,IADO,EACP;AAPR,eAAA,CAlFJ;;AAAA;AAAA;AAAA,qBA8FsB4K,aAAa,CAAA,OAAA,EAAA,OAAA,EAAjC,cAAiC,CA9FnC;;AAAA;AA8FMO,cAAAA,OA9FN;AAAA,iDAgGE,QAAA,CAAA,EAAA,EAAA,OAAA,EAGM,MAAM,CAAN,UAAA,GAAoB;AAAEF,gBAAAA,UAAU,EAAE7E,MAAM,CAAC6E;AAArB,eAApB,GAHN,EAAA,EAAA;AAIE5H,gBAAAA,UAAU,sBACP6C,WAAW,CAAXA,KAAAA,CAAD,EADQ,EACgBE,MAAM,CAACjG,IADvB,CAJZ;AAOE0K,gBAAAA,aAAa,EACP,QAAA,CAAA,EAAA,EAAA,MAAM,CAAN,OAAA,uBAAoB3E,WAAW,CAAXA,KAAAA,CAAD,EAAnB,EAA2CE,MAAM,CAACpG,OAAlD,IADO,EACP;AARR,eAAA,CAhGF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAjG6B;AAAA;AAAA;;AAAA,WA8M7B,aA9M6B;AAAA;AAAA;;AAAA;AAAA,8EA8M7B,mBAAA,OAAA,EAAA,OAAA,EAAA,cAAA,EAAA,kBAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASMiH,cAAAA,aATN,GASsBmE,6BAA6B,CAAA,OAAA,EAE/ChO,MAAM,CAANA,IAAAA,CAAYyJ,kBAAkB,IAA9BzJ,EAAAA,EAFkBgO,CAElBhO,CAF+C,CAA7BgO,CAAAA,MAAAA,CAGVtI,UAAAA,CAAD;AAAA,uBAAOA,CAAC,CAADA,KAAAA,CARc,MAQrB;AAAA,eAHWsI,CATtB,EAIgC;;AAJhC,oBAeMnE,aAAa,CAAbA,MAAAA,KAAJ,CAfF;AAAA;AAAA;AAAA;;AAAA,iDAgBW;AACLhM,gBAAAA,OADK,EACLA,OADK;AAELmI,gBAAAA,UAAU,EAFL,EAAA;AAGLE,gBAAAA,MAAM,EAAEuD,kBAAkB,IAHrB,IAAA;AAILoE,gBAAAA,UAAU,EAJL,GAAA;AAKLC,gBAAAA,aAAa,EAAE;AALV,eAhBX;;AAAA;AAAA;AAAA,qBAyBsBzK,OAAO,CAAPA,GAAAA,oBACfwG,aAAa,CAAbA,GAAAA,CAAmBnE,UAAAA,CAAD;AAAA,uBACnBwD,kBAAkB,CAAA,QAAA,EAAA,OAAA,EAAA,CAAA,EAAA,IAAA,EAFtB,cAEsB,CADC;AAAA,eAAlBW,CADexG,EAzBtB;;AAAA;AAyBMoI,cAAAA,OAzBN;;AAAA,mBA+BMlD,OAAO,CAAPA,MAAAA,CAAJ,OA/BF;AAAA;AAAA;AAAA;;AAgCQmF,cAAAA,MAhCR,GAgCiBC,cAAc,GAAA,YAAA,GAA3B,OAhCJ;AAAA,oBAiCU,IAAA,KAAA,CAAaD,MAAb,GAAN,iBAAM,CAjCV;;AAAA;AAIgC;AAiC9B;AACAjC,cAAAA,OAAO,CAAPA,OAAAA,CAAiBzC,UAAAA,MAAD,EAAW;AACzB,oBAAIU,gBAAgB,CAApB,MAAoB,CAApB,EAA8B;AAC5BV,kBAAAA,MAAM,CAANA,YAAAA,CAAAA,MAAAA;AACD;AArC2B,eAkC9ByC,EAtCF,CAIgC;;AAyC1BsC,cAAAA,OA7CN,GA6CgBE,sBAAsB,CAAA,OAAA,EAAA,aAAA,EAAA,OAAA,EAApC,kBAAoC,CA7CtC;AAAA,iDAoDE,QAAA,CAAA,EAAA,EAAA,OAAA,EAAA;AAEEpQ,gBAAAA,OAAAA,EAAAA;AAFF,eAAA,CApDF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA9M6B;AAAA;AAAA;;AAwQ7B,WAAA,YAAA,CAAA,GAAA,EAAA,OAAA,EAEkB;AAOhB,QAAI/B,GAAG,GAAG,IAAA,GAAA,CAAQoS,GAAG,CAArB,GAAU,CAAV;AACA,QAAI1T,QAAQ,GAAGC,cAAc,CAAA,EAAA,EAAKM,UAAU,CAAf,GAAe,CAAf,EAAA,IAAA,EAA7B,SAA6B,CAA7B;AACA,QAAI8C,OAAO,GAAGyH,WAAW,CAAA,UAAA,EAAzB,QAAyB,CAAzB;;AACA,QAAIzH,OAAO,IAAX,OAAA,EAAwB;AACtBA,MAAAA,OAAO,GAAGA,OAAO,CAAPA,MAAAA,CAAgB6H,UAAAA,CAAD;AAAA,eAAOA,CAAC,CAADA,KAAAA,CAAAA,EAAAA,KAAhC7H,OAAyB;AAAA,OAAfA,CAAVA;AAXc,KAAA,CAAA;;;AAehB,QAAI,CAAJ,OAAA,EAAc;AACZ,iCAII2H,kBAAkB,CAJtB,UAIsB,CAJtB;AAAA,UAAI,eAAJ,wBACE3H,OADF;AAAA,UAAI,KAAJ,wBAAI,KAAJ;AAAA,UAGEyF,KAHF,wBAGEA,KAHF;;AAKA,aAAO;AACL9I,QAAAA,QADK,EACLA,QADK;AAELqD,QAAAA,OAAO,EAFF,eAAA;AAGLwP,QAAAA,iBAAiB,EAAE;AACjBxP,UAAAA,OAAO,EADU,eAAA;AAEjBmI,UAAAA,UAAU,EAFO,EAAA;AAGjBC,UAAAA,UAAU,EAHO,IAAA;AAIjBC,UAAAA,MAAM,sBACHhJ,KAAK,CAAN,EADI,EACQoG,KADR,CAJW;AAOjBuK,UAAAA,UAAU,EAPO,GAAA;AAQjBC,UAAAA,aAAa,EARI,EAAA;AASjBL,UAAAA,aAAa,EAAE;AATE;AAHd,OAAP;AAeD;;AAED,WAAO;AAAEjT,MAAAA,QAAF,EAAEA,QAAF;AAAYqD,MAAAA,OAAAA,EAAAA;AAAZ,KAAP;AACD;;AAED,SAAO;AACLiH,IAAAA,UADK,EACLA,UADK;AAELqJ,IAAAA,KAFK,EAELA,KAFK;AAGLC,IAAAA,UAAAA,EAAAA;AAHK,GAAP;AAKD,C,CAAA;AAID;AACA;AACA;;AAEA;;;AAGG;;;SACaC,yB,CACdpQ,M,EACA8P,O,EACAzK,K,EAAU;AAEV,MAAIgL,UAAU,GAAA,QAAA,CAAA,EAAA,EAAA,OAAA,EAAA;AAEZT,IAAAA,UAAU,EAFE,GAAA;AAGZ3H,IAAAA,MAAM,sBACH6H,OAAO,CAAPA,0BAAAA,IAAsC9P,MAAM,CAANA,CAAM,CAANA,CAAvC,EADI,EACkDqF,KADlD;AAHM,GAAA,CAAd;;AAOA,SAAA,UAAA;AACD,C,CAAA;AAGD;;;AACA,SAAA,wBAAA,CAAA,EAAA,EAAA,IAAA,EAE8B;AAM5B,MAAIjH,IAAI,GAAG,OAAA,EAAA,KAAA,QAAA,GAAA,EAAA,GAA8BtB,UAAU,CANvB,EAMuB,CAAnD,CAN4B,CAAA;;AAS5B,MAAI,CAAA,IAAA,IAAU,EAAE,gBAAF,IAAA,KAA2B,EAAE,cAA3C,IAAyC,CAAzC,EAAiE;AAC/D,WAAO;AAAEsB,MAAAA,IAAAA,EAAAA;AAAF,KAAP;AAV0B,GAAA,CAAA;;;AAc5B,MAAIsL,IAAI,CAAJA,UAAAA,IAAAA,IAAAA,IAA2BA,IAAI,CAAJA,UAAAA,KAA/B,KAAA,EAA0D;AACxD,WAAO;AACLtL,MAAAA,IADK,EACLA,IADK;AAELuL,MAAAA,UAAU,EAAE;AACVnD,QAAAA,UAAU,EAAEkD,IAAI,CADN,UAAA;AAEVjD,QAAAA,UAAU,EAAE5J,UAAU,CAACa,SAAS,CAFtB,IAEsB,CAAV,CAFZ;AAGVgJ,QAAAA,WAAW,EAAE,CAAA,IAAI,IAAJ,IAAA,GAAA,KAAA,CAAA,GAAA,IAAI,CAAJ,WAAA,KAHH,mCAAA;AAIVC,QAAAA,QAAQ,EAAE+C,IAAI,CAAC/C;AAJL;AAFP,KAAP;AAf0B,GAAA,CAAA;;;AA2B5B,MAAI,CAAC+C,IAAI,CAAT,QAAA,EAAoB;AAClB,WAAO;AAAEtL,MAAAA,IAAAA,EAAAA;AAAF,KAAP;AA5B0B,GAAA,CAAA;;;AAgC5B,MAAID,UAAU,GAAGT,SAAS,CAA1B,IAA0B,CAA1B;;AACA,MAAI;AACF,QAAI4S,YAAY,GAAGC,6BAA6B,CAAC7G,IAAI,CAArD,QAAgD,CAAhD;AACAvL,IAAAA,UAAU,CAAVA,MAAAA,GAAAA,MAAAA,YAAAA;AAFF,GAAA,CAGE,OAAA,CAAA,EAAU;AACV,WAAO;AACLC,MAAAA,IADK,EACLA,IADK;AAELiH,MAAAA,KAAK,EAAE,IAAA,aAAA,CAAA,GAAA,EAAA,aAAA,EAAA,0CAAA;AAFF,KAAP;AAQD;;AAED,SAAO;AAAEjH,IAAAA,IAAI,EAAEtB,UAAU,CAAA,UAAA;AAAlB,GAAP;AACD;;AAED,SAAA,iBAAA,CAAA,KAAA,EAAA,QAAA,EAE0B;AAExB,0BAAwDR,KAAK,CAA7D,UAAA;AAAA,MAAI,UAAJ,qBAAI,UAAJ;AAAA,MAAI,UAAJ,qBAAI,UAAJ;AAAA,MAAI,WAAJ,qBAAI,WAAJ;AAAA,MAA2CqK,QAA3C,qBAA2CA,QAA3C;AACA,MAAIgB,UAAU,GAAgC;AAC5CrL,IAAAA,KAAK,EADuC,SAAA;AAE5CC,IAAAA,QAAQ,EAAEC,cAAc,CAACF,KAAK,CAAN,QAAA,EAAiB6J,QAAQ,CAFL,QAEpB,CAFoB;AAG5CK,IAAAA,UAAU,EAAEA,UAAU,IAHsB,SAAA;AAI5CC,IAAAA,UAAU,EAAEA,UAAU,IAJsB,SAAA;AAK5CC,IAAAA,WAAW,EAAEA,WAAW,IALoB,SAAA;AAM5CC,IAAAA,QAAQ,EAAEA,QAAQ,IAAIrH;AANsB,GAA9C;AAQA,SAAA,UAAA;AACD,C,CAAA;AAGD;;;AACA,SAAA,6BAAA,CAAA,OAAA,EAAA,UAAA,EAEqB;AAEnB,MAAIkR,eAAe,GAAnB,OAAA;;AACA,MAAA,UAAA,EAAgB;AACd,QAAIxU,KAAK,GAAG4D,OAAO,CAAPA,SAAAA,CAAmB6H,UAAAA,CAAD;AAAA,aAAOA,CAAC,CAADA,KAAAA,CAAAA,EAAAA,KAArC,UAA8B;AAAA,KAAlB7H,CAAZ;;AACA,QAAI5D,KAAK,IAAT,CAAA,EAAgB;AACdwU,MAAAA,eAAe,GAAG5Q,OAAO,CAAPA,KAAAA,CAAAA,CAAAA,EAAlB4Q,KAAkB5Q,CAAlB4Q;AACD;AACF;;AACD,SAAA,eAAA;AACD;;AAED,SAAA,gBAAA,CAAA,KAAA,EAAA,OAAA,EAAA,UAAA,EAAA,QAAA,EAAA,sBAAA,EAAA,uBAAA,EAAA,qBAAA,EAAA,iBAAA,EAAA,YAAA,EAAA,gBAAA,EAUgD;AAE9C,MAAIzD,YAAY,GAAGnD,YAAY,GAC3B7H,MAAM,CAANA,MAAAA,CAAAA,YAAAA,EAD2B,CAC3BA,CAD2B,GAE3B4I,iBAAiB,GACjB5I,MAAM,CAANA,MAAAA,CAAAA,iBAAAA,EADiB,CACjBA,CADiB,GAJyB,IAE9C,CAF8C,CAAA;;AAS9C,MAAI0O,UAAU,GAAG7G,YAAY,GAAG7H,MAAM,CAANA,IAAAA,CAAAA,YAAAA,EAAH,CAAGA,CAAH,GAA7B,SAAA;AACA,MAAIyO,eAAe,GAAGT,6BAA6B,CAAA,OAAA,EAAnD,UAAmD,CAAnD;AACA,MAAIW,iBAAiB,GAAGF,eAAe,CAAfA,MAAAA,CACtB,UAAA,KAAA,EAAA,KAAA;AAAA,WACE3O,KAAK,CAALA,KAAAA,CAAAA,MAAAA,IAAAA,IAAAA,KACC,WAAW,CAACvF,KAAK,CAAN,UAAA,EAAmBA,KAAK,CAALA,OAAAA,CAAnB,KAAmBA,CAAnB,EAAX,KAAW,CAAX,IAAA;AAECkM,IAAAA,uBAAuB,CAAvBA,IAAAA,CAA8BxJ,UAAAA,EAAD;AAAA,aAAQA,EAAE,KAAK6C,KAAK,CAALA,KAAAA,CAF7C,EAE8B;AAAA,KAA7B2G,CAFD,IAGCmI,sBAAsB,CACpBrU,KAAK,CADe,QAAA,EAEpBA,KAAK,CAALA,OAAAA,CAFoB,KAEpBA,CAFoB,EAAA,UAAA,EAAA,QAAA,EAAA,KAAA,EAAA,sBAAA,EAjBkB,YAiBlB,CAJxBuF,CADF;AAAA,GADsB2O,CAAxB,CAX8C,CAAA;;AA6B9C,MAAI3E,oBAAoB,GAAxB,EAAA;AACA9C,EAAAA,gBAAgB,IAAhBA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,gBAAgB,CAAhBA,OAAAA,CAA0B,UAAA,MAAA,EAAA,GAAA,EAAuB;AAAtB,gCAAsB,MAAtB;AAAA,QAAA,IAAA;AAAA,QAAA,KAAA,aAAsB,CAC/C;;;AACA,QAAIN,qBAAqB,CAArBA,QAAAA,CAAJ,GAAIA,CAAJ,EAAyC;AACvCoD,MAAAA,oBAAoB,CAApBA,IAAAA,CAA0B,CAAA,GAAA,EAAA,IAAA,EAA1BA,KAA0B,CAA1BA;AADF,KAAA,MAEO,IAAA,sBAAA,EAA4B;AACjC,UAAI+E,gBAAgB,GAAGD,sBAAsB,CAAA,IAAA,EAAA,KAAA,EAAA,UAAA,EAAA,IAAA,EAAA,KAAA,EAAA,sBAAA,EAA7C,YAA6C,CAA7C;;AASA,UAAA,gBAAA,EAAsB;AACpB9E,QAAAA,oBAAoB,CAApBA,IAAAA,CAA0B,CAAA,GAAA,EAAA,IAAA,EAA1BA,KAA0B,CAA1BA;AACD;AACF;AAjBH9C,GAAAA,CAAAA;AAoBA,SAAO,CAAA,iBAAA,EAAP,oBAAO,CAAP;AACD;;AAED,SAAA,WAAA,CAAA,iBAAA,EAAA,YAAA,EAAA,KAAA,EAG+B;AAE7B,MAAI8H,KAAK,GAAA;AAEP,GAAA,YAAA,IAAA;AAEAhP,EAAAA,KAAK,CAALA,KAAAA,CAAAA,EAAAA,KAAmBiP,YAAY,CAAZA,KAAAA,CANQ,EAE7B,CAF6B,CAAA;AAS7B;;AACA,MAAIC,aAAa,GAAGC,iBAAiB,CAACnP,KAAK,CAALA,KAAAA,CAAlBmP,EAAiB,CAAjBA,KAVS,SAU7B,CAV6B,CAAA;;AAa7B,SAAOH,KAAK,IAAZ,aAAA;AACD;;AAED,SAAA,kBAAA,CAAA,YAAA,EAAA,KAAA,EAE+B;AAAA,MAAA,qBAAA;;AAE7B,SAAA;AAEEC,IAAAA,YAAY,CAAZA,QAAAA,KAA0BjP,KAAK,CAA/BiP,QAAAA,IAAAA;AAEA;AACC,KAAA,CAAA,qBAAA,GAAA,YAAY,CAAZ,KAAA,CAAA,IAAA,KAAyBG,IAAzB,GAAyBA,KAAAA,CAAzB,GAAyBA,qBAAAA,CAAzB,QAAyBA,CAAzB,GAAyBA,CAAzB,KACCH,YAAY,CAAZA,MAAAA,CAAAA,GAAAA,MAA6BjP,KAAK,CAALA,MAAAA,CAAAA,GAAAA;AANjC;AAQD;;AAED,SAAA,sBAAA,CAAA,eAAA,EAAA,YAAA,EAAA,UAAA,EAAA,QAAA,EAAA,KAAA,EAAA,sBAAA,EAAA,YAAA,EAOsC;AAEpC,MAAIqP,UAAU,GAAGC,SAAS,CAA1B,eAA0B,CAA1B;AACA,MAAIC,aAAa,GAAGN,YAAY,CAAhC,MAAA;AACA,MAAIO,OAAO,GAAGF,SAAS,CAAvB,QAAuB,CAAvB;AACA,MAAIG,UAAU,GAAGzP,KAAK,CALc,MAKpC,CALoC,CAAA;AAQpC;AACA;AACA;AACA;AACA;;AACA,MAAI0P,uBAAuB,GACzBC,kBAAkB,CAAA,YAAA,EAAlBA,KAAkB,CAAlBA,IAAAA;AAEAN,EAAAA,UAAU,CAAVA,QAAAA,OAA0BG,OAAO,CAFjCG,QAE0BH,EAF1BG,IAAAA;AAIAN,EAAAA,UAAU,CAAVA,MAAAA,KAAsBG,OAAO,CAJ7BG,MAAAA,IAAAA;AADF,EAAA,sBAAA;;AASA,MAAI3P,KAAK,CAALA,KAAAA,CAAJ,gBAAA,EAAkC;AAChC,QAAI4P,WAAW,GAAG,KAAK,CAAL,KAAA,CAAA,gBAAA,CAAA,QAAA,CAAA;AAChBP,MAAAA,UADgB,EAChBA,UADgB;AAEhBE,MAAAA,aAFgB,EAEhBA,aAFgB;AAGhBC,MAAAA,OAHgB,EAGhBA,OAHgB;AAIhBC,MAAAA,UAAAA,EAAAA;AAJgB,KAAA,EAAA,UAAA,EAAA;AAMhBvE,MAAAA,YANgB,EAMhBA,YANgB;AAOhBwE,MAAAA,uBAAAA,EAAAA;AAPgB,KAAA,CAAA,CAAlB;;AASA,QAAI,OAAA,WAAA,KAAJ,SAAA,EAAsC;AACpC,aAAA,WAAA;AACD;AACF;;AAED,SAAA,uBAAA;AACD;;SAED,kB;;;;;iFAAA,mBAAA,IAAA,EAAA,OAAA,EAAA,KAAA,EAAA,aAAA,EAAA,cAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKiC,gBAD/BG,aAC+B,KAAA,KAAA,CAAA,EAAA;AAD/BA,cAAAA,aAC+B,GADN,KAAzBA;AAC+B;;AAAA,gBAA/BhC,cAA+B,KAAA,KAAA,CAAA,EAAA;AAA/BA,cAAAA,cAA+B,GAAL,KAA1BA;AAA+B;;AAO3BiC,YAAAA,YAZN,GAYqB,IAAA,OAAA,CAAY,UAAA,CAAA,EAAA,CAAA;AAAA,qBAAW3M,MAAM,GAAhD,CAA+B;AAAA,aAAZ,CAZrB;;AAaM4M,YAAAA,QAbN,GAaiB,SAAXA,QAAW;AAAA,qBAAM5M,MAArB,EAAe;AAAA,aAbjB;;AAcEsF,YAAAA,OAAO,CAAPA,MAAAA,CAAAA,gBAAAA,CAAAA,OAAAA,EAAAA,QAAAA;AAdF;AAiBQuH,YAAAA,OAjBR,GAiBkBhQ,KAAK,CAALA,KAAAA,CAAd,IAAcA,CAjBlB;AAkBI3C,YAAAA,SAAS,CAAA,OAAA,EAAA,wBAAA,IAAA,GAAA,mBAAA,GAEsC2C,KAAK,CAALA,KAAAA,CAFtC,EAAA,GAAT3C,UAAS,CAATA;AAlBJ;AAAA,mBAuBmBkG,OAAO,CAAPA,IAAAA,CAAa,CAC1ByM,OAAO,CAAC;AAAEvH,cAAAA,OAAF,EAAEA,OAAF;AAAWtI,cAAAA,MAAM,EAAEH,KAAK,CAACG;AAAzB,aAAD,CADmB,EAA5B+I,YAA4B,CAAb3F,CAvBnB;;AAAA;AAuBI2F,YAAAA,MAvBJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AA4BI+G,YAAAA,UAAU,GAAGlT,UAAU,CAAvBkT,KAAAA;AACA/G,YAAAA,MAAAA,gBAAAA;;AA7BJ;AAAA;AA+BIT,YAAAA,OAAO,CAAPA,MAAAA,CAAAA,mBAAAA,CAAAA,OAAAA,EAAAA,QAAAA;AA/BJ;;AAAA;AAAA,kBAkCMS,MAAM,YAAV,QAlCF;AAAA;AAAA;AAAA;;AAmCI;AACIrG,YAAAA,MApCR,GAoCiBqG,MAAM,CAAnB,MApCJ;AAqCQxO,YAAAA,QArCR,GAqCmBwO,MAAM,CAANA,OAAAA,CAAAA,GAAAA,CAHe,UAGfA,CArCnB,EAkCkC;AAM9B;;AAxCJ,iBAyCI,cAzCJ;AAAA;AAAA;AAAA;;AAAA,kBA0CM,MA1CN;;AAAA;AAAA,kBA6CQrG,MAAM,IAANA,GAAAA,IAAiBA,MAAM,IAAvBA,GAAAA,IAAkCnI,QAAQ,IAA9C,IA7CJ;AAAA;AAAA;AAAA;;AAAA,iBAiDM,aAjDN;AAAA;AAAA;AAAA;;AAAA,kBAkDQ,MAlDR;;AAAA;AAAA,+CAoDa;AACLwV,cAAAA,IAAI,EAAEnT,UAAU,CADX,QAAA;AAEL8F,cAAAA,MAFK,EAELA,MAFK;AAGLnI,cAAAA,QAHK,EAGLA,QAHK;AAILqS,cAAAA,UAAU,EAAE7D,MAAM,CAANA,OAAAA,CAAAA,GAAAA,CAAAA,oBAAAA,MAA6C;AAJpD,aApDb;;AAAA;AAAA,kBA6DI,CAAA,mBAAA,GAAIA,MAAM,CAANA,OAAAA,CAAAA,GAAAA,CAAJ,cAAIA,CAAJ,KAAA,IAAA,IAAIA,mBAAoCiH,CAApCjH,UAAAA,CAAJ,kBAAIA,CA7DR;AAAA;AAAA;AAAA;;AAAA;AAAA,mBA8DmBA,MAAM,CAAnBjG,IAAaiG,EA9DnB;;AAAA;AA8DMjG,YAAAA,IA9DN;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAgEmBiG,MAAM,CAAnBjG,IAAaiG,EAhEnB;;AAAA;AAgEMjG,YAAAA,IAhEN;;AAAA;AAAA,kBAmEQgN,UAAU,KAAKlT,UAAU,CAA7B,KAnEJ;AAAA;AAAA;AAAA;;AAAA,+CAoEa;AACLmT,cAAAA,IAAI,EADC,UAAA;AAEL1M,cAAAA,KAAK,EAAE,IAAA,aAAA,CAAA,MAAA,EAA0B0F,MAAM,CAAhC,UAAA,EAFF,IAEE,CAFF;AAGLpG,cAAAA,OAAO,EAAEoG,MAAM,CAACpG;AAHX,aApEb;;AAAA;AAAA,+CA2EW;AACLoN,cAAAA,IAAI,EAAEnT,UAAU,CADX,IAAA;AAELkG,cAAAA,IAFK,EAELA,IAFK;AAGL8K,cAAAA,UAAU,EAAE7E,MAAM,CAHb,MAAA;AAILpG,cAAAA,OAAO,EAAEoG,MAAM,CAACpG;AAJX,aA3EX;;AAAA;AAAA,kBAmFMmN,UAAU,KAAKlT,UAAU,CAA7B,KAnFF;AAAA;AAAA;AAAA;;AAAA,+CAoFW;AAAEmT,cAAAA,IAAI,EAAN,UAAA;AAAoB1M,cAAAA,KAAK,EAAE0F;AAA3B,aApFX;;AAAA;AAAA,kBAuFMA,MAAM,YAAV,YAvFF;AAAA;AAAA;AAAA;;AAAA,+CAwFW;AAAEgH,cAAAA,IAAI,EAAEnT,UAAU,CAAlB,QAAA;AAA6BwN,cAAAA,YAAY,EAAErB;AAA3C,aAxFX;;AAAA;AAAA,+CA2FS;AAAEgH,cAAAA,IAAI,EAAEnT,UAAU,CAAlB,IAAA;AAAyBkG,cAAAA,IAAI,EAAEiG;AAA/B,aA3FT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA8FA,SAAA,aAAA,CAAA,QAAA,EAAA,MAAA,EAAA,UAAA,EAGyB;AAEvB,MAAIlN,GAAG,GAAGsT,SAAS,CAATA,QAAS,CAATA,CAAV,QAAUA,EAAV;AACA,MAAI3M,IAAI,GAAgB;AAAEqB,IAAAA,MAAAA,EAAAA;AAAF,GAAxB;;AAEA,MAAA,UAAA,EAAgB;AACd,QAAI,UAAJ,GAAA,UAAA,CAAI,UAAJ;AAAA,QAAI,WAAJ,GAAA,UAAA,CAAI,WAAJ;AAAA,QAA+Bc,QAA/B,GAAA,UAAA,CAA+BA,QAA/B;AACAnC,IAAAA,IAAI,CAAJA,MAAAA,GAAcgC,UAAU,CAAxBhC,WAAcgC,EAAdhC;AACAA,IAAAA,IAAI,CAAJA,IAAAA,GACEkC,WAAW,KAAXA,mCAAAA,GACI6J,6BAA6B,CADjC7J,QACiC,CADjCA,GADFlC,QAAAA;AARqB,GAAA,CAAA;;;AAevB,SAAO,IAAA,OAAA,CAAA,GAAA,EAAP,IAAO,CAAP;AACD;;AAED,SAAA,6BAAA,CAAA,QAAA,EAAyD;AACvD,MAAI8L,YAAY,GAAG,IAAnB,eAAmB,EAAnB;;AADuD,8CAG9B3J,QAAQ,CAAjC,OAAyBA,EAH8B;AAAA;;AAAA;AAGvD,2DAA6C;AAAA;AAAA,UAApC,GAAoC;AAAA,UAA7C,KAA6C;;AAC3CzH,MAAAA,SAAS,CACP,OAAA,KAAA,KADO,QAAA,EAEP,qFAFFA,2CAAS,CAATA;AAKAoR,MAAAA,YAAY,CAAZA,MAAAA,CAAAA,GAAAA,EAAAA,KAAAA;AACD;AAVsD;AAAA;AAAA;AAAA;AAAA;;AAYvD,SAAA,YAAA;AACD;;AAED,SAAA,sBAAA,CAAA,OAAA,EAAA,aAAA,EAAA,OAAA,EAAA,YAAA,EAAA,eAAA,EAK6C;AAO3C;AACA,MAAIvI,UAAU,GAAd,EAAA;AACA,MAAIE,MAAM,GAAV,IAAA;AACA,MAAA,UAAA;AACA,MAAIgK,UAAU,GAAd,KAAA;AACA,MAAIpC,aAAa,GAZ0B,EAY3C,CAZ2C,CAAA;;AAe3CrC,EAAAA,OAAO,CAAPA,OAAAA,CAAgB,UAAA,MAAA,EAAA,KAAA,EAAkB;AAChC,QAAIxO,EAAE,GAAG4M,aAAa,CAAbA,KAAa,CAAbA,CAAAA,KAAAA,CAAT,EAAA;AACA1M,IAAAA,SAAS,CACP,CAACiM,gBAAgB,CADV,MACU,CADV,EAATjM,qDAAS,CAATA;;AAIA,QAAIoM,aAAa,CAAjB,MAAiB,CAAjB,EAA2B;AACzB;AACA;AACA,UAAIC,aAAa,GAAGf,mBAAmB,CAAA,OAAA,EAAvC,EAAuC,CAAvC;AACA,UAAInF,KAAK,GAAG0F,MAAM,CAJO,KAIzB,CAJyB,CAAA;AAMzB;AACA;;AACA,UAAA,YAAA,EAAkB;AAChB1F,QAAAA,KAAK,GAAGtD,MAAM,CAANA,MAAAA,CAAAA,YAAAA,EAARsD,CAAQtD,CAARsD;AACAuE,QAAAA,YAAY,GAAZA,SAAAA;AACD;;AACD3B,MAAAA,MAAM,GAAG,MAAM,CAAN,MAAA,CAAcA,MAAM,IAApB,EAAA,sBACNsD,aAAa,CAAbA,KAAAA,CAAD,EADO,EACmBlG,KADnB,EAAT4C,CAZyB,CAAA;AAgBzB;;AACA,UAAI,CAAJ,UAAA,EAAiB;AACfgK,QAAAA,UAAU,GAAVA,IAAAA;AACArC,QAAAA,UAAU,GAAGT,oBAAoB,CAACpE,MAAM,CAA3BoE,KAAoB,CAApBA,GACTpE,MAAM,CAANA,KAAAA,CADSoE,MAAAA,GAAbS,GAAAA;AAGD;;AACD,UAAI7E,MAAM,CAAV,OAAA,EAAoB;AAClB8E,QAAAA,aAAa,CAAbA,EAAa,CAAbA,GAAoB9E,MAAM,CAA1B8E,OAAAA;AACD;AAzBH,KAAA,MA0BO,IAAIpE,gBAAgB,CAApB,MAAoB,CAApB,EAA8B;AACnCzC,MAAAA,eAAe,IAAfA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,eAAe,CAAfA,GAAAA,CAAAA,EAAAA,EAAyB+B,MAAM,CAA/B/B,YAAAA,CAAAA;AACAjB,MAAAA,UAAU,CAAVA,EAAU,CAAVA,GAAiBgD,MAAM,CAANA,YAAAA,CAFkB,IAEnChD,CAFmC,CAAA;AAA9B,KAAA,MAIA;AACLA,MAAAA,UAAU,CAAVA,EAAU,CAAVA,GAAiBgD,MAAM,CADlB,IACLhD,CADK,CAAA;AAGL;;AACA,UAAIgD,MAAM,CAANA,UAAAA,KAAAA,GAAAA,IAA6B,CAAjC,UAAA,EAA8C;AAC5C6E,QAAAA,UAAU,GAAG7E,MAAM,CAAnB6E,UAAAA;AACD;;AACD,UAAI7E,MAAM,CAAV,OAAA,EAAoB;AAClB8E,QAAAA,aAAa,CAAbA,EAAa,CAAbA,GAAoB9E,MAAM,CAA1B8E,OAAAA;AACD;AACF;AA7DwC,GAe3CrC,EAf2C,CAAA;AAiE3C;;AACA,MAAA,YAAA,EAAkB;AAChBvF,IAAAA,MAAM,GAANA,YAAAA;AACD;;AAED,SAAO;AACLF,IAAAA,UADK,EACLA,UADK;AAELE,IAAAA,MAFK,EAELA,MAFK;AAGL2H,IAAAA,UAAU,EAAEA,UAAU,IAHjB,GAAA;AAILC,IAAAA,aAAAA,EAAAA;AAJK,GAAP;AAMD;;AAED,SAAA,iBAAA,CAAA,KAAA,EAAA,OAAA,EAAA,aAAA,EAAA,OAAA,EAAA,YAAA,EAAA,oBAAA,EAAA,cAAA,EAAA,eAAA,EAQ4C;AAK1C,8BAA6BG,sBAAsB,CAAA,OAAA,EAAA,aAAA,EAAA,OAAA,EAAA,YAAA,EALT,eAKS,CAAnD;AAAA,MAAI,UAAJ,yBAAI,UAAJ;AAAA,MAAkB/H,MAAlB,yBAAkBA,MAAlB,CAL0C,CAAA;;;AAc1C,OAAK,IAAIjM,KAAK,GAAd,CAAA,EAAoBA,KAAK,GAAG6P,oBAAoB,CAAhD,MAAA,EAAyD7P,KAAzD,EAAA,EAAkE;AAChE,+CAAqB6P,oBAAoB,CAAzC,KAAyC,CAAzC;AAAA,QAAI,GAAJ;AAAA,QAAI,KAAJ;;AACA3M,IAAAA,SAAS,CACP6M,cAAc,KAAdA,SAAAA,IAAgCA,cAAc,CAAdA,KAAc,CAAdA,KADzB,SAAA,EAAT7M,2CAAS,CAATA;AAIA,QAAI6L,MAAM,GAAGgB,cAAc,CANqC,KAMrC,CAA3B,CANgE,CAAA;;AAShE,QAAIT,aAAa,CAAjB,MAAiB,CAAjB,EAA2B;AAAA,UAAA,OAAA;;AACzB,UAAIC,aAAa,GAAGf,mBAAmB,CAAClO,KAAK,CAAN,OAAA,EAAgBuF,KAAK,CAALA,KAAAA,CAAvD,EAAuC,CAAvC;;AACA,UAAI,EAAA,CAAA,OAAA,GAAA,MAAA,KAAA,IAAA,IAACoG,OAASsD,CAAAA,aAAa,CAAbA,KAAAA,CAAd,EAAcA,CAAV,CAAJ,EAAuC;AACrCtD,QAAAA,MAAM,GAAA,QAAA,CAAA,EAAA,EAAA,MAAA,sBAEHsD,aAAa,CAAbA,KAAAA,CAAD,EAFI,EAEsBR,MAAM,CAAC1F,KAF7B,EAAN4C;AAID;;AACD3L,MAAAA,KAAK,CAALA,QAAAA,CAAAA,MAAAA,CAAAA,GAAAA;AARF,KAAA,MASO,IAAI6O,gBAAgB,CAApB,MAAoB,CAApB,EAA8B;AACnC;AACA;AACA,YAAM,IAAA,KAAA,CAAN,yCAAM,CAAN;AAHK,KAAA,MAIA,IAAIM,gBAAgB,CAApB,MAAoB,CAApB,EAA8B;AACnC;AACA;AACA,YAAM,IAAA,KAAA,CAAN,iCAAM,CAAN;AAHK,KAAA,MAIA;AACL,UAAI4B,WAAW,GAA0B;AACvC/Q,QAAAA,KAAK,EADkC,MAAA;AAEvCwI,QAAAA,IAAI,EAAEiG,MAAM,CAF2B,IAAA;AAGvCvE,QAAAA,UAAU,EAH6B,SAAA;AAIvCC,QAAAA,UAAU,EAJ6B,SAAA;AAKvCC,QAAAA,WAAW,EAL4B,SAAA;AAMvCC,QAAAA,QAAQ,EAAErH;AAN6B,OAAzC;AAQAhD,MAAAA,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAAAA,GAAAA,EAAAA,WAAAA;AACD;AACF;;AAED,SAAO;AAAEyL,IAAAA,UAAF,EAAEA,UAAF;AAAcE,IAAAA,MAAAA,EAAAA;AAAd,GAAP;AACD;;AAED,SAAA,eAAA,CAAA,UAAA,EAAA,aAAA,EAAA,OAAA,EAGmC;AAEjC,MAAIiK,gBAAgB,GAAQ9I,QAAAA,CAAAA,EAAAA,EAA5B,aAA4BA,CAA5B;;AACAxJ,EAAAA,OAAO,CAAPA,OAAAA,CAAiBiC,UAAAA,KAAD,EAAU;AACxB,QAAI7C,EAAE,GAAG6C,KAAK,CAALA,KAAAA,CAAT,EAAA;;AACA,QAAIuH,aAAa,CAAbA,EAAa,CAAbA,KAAAA,SAAAA,IAAmCrB,UAAU,CAAVA,EAAU,CAAVA,KAAvC,SAAA,EAAqE;AACnEmK,MAAAA,gBAAgB,CAAhBA,EAAgB,CAAhBA,GAAuBnK,UAAU,CAAjCmK,EAAiC,CAAjCA;AACD;AAJHtS,GAAAA;AAMA,SAAA,gBAAA;AACD,C,CAAA;AAGD;AACA;;;AACA,SAAA,mBAAA,CAAA,OAAA,EAAA,OAAA,EAEkB;AAEhB,MAAIuS,eAAe,GAAGxG,OAAO,GACzB/L,OAAO,CAAPA,KAAAA,CAAAA,CAAAA,EAAiBA,OAAO,CAAPA,SAAAA,CAAmB6H,UAAAA,CAAD;AAAA,WAAOA,CAAC,CAADA,KAAAA,CAAAA,EAAAA,KAAzB7H,OAAkB;AAAA,GAAlBA,IADQ,CACzBA,CADyB,sBAA7B,OAA6B,CAA7B;AAGA,SACEuS,eAAe,CAAfA,OAAAA,GAAAA,IAAAA,CAAgC1K,UAAAA,CAAD;AAAA,WAAOA,CAAC,CAADA,KAAAA,CAAAA,gBAAAA,KAAtC0K,IAA+B;AAAA,GAA/BA,KACAvS,OAAO,CAFT,CAES,CAFT;AAID;;AAED,SAAA,kBAAA,CAAA,MAAA,EAA6D;AAK3D;AACA,MAAIX,KAAK,GAAGe,MAAM,CAANA,IAAAA,CACToS,UAAAA,CAAD;AAAA,WAAOA,CAAC,CAADA,KAAAA,IAAWA,CAAC,CAADA,IAAAA,KAAXA,EAAAA,IAA4BA,CAAC,CAADA,IAAAA,KADzBpS,GACV;AAAA,GADUA,KAEP;AACHhB,IAAAA,EAAE,EAAE;AADD,GAFL;AAMA,SAAO;AACLY,IAAAA,OAAO,EAAE,CACP;AACEoC,MAAAA,MAAM,EADR,EAAA;AAEE1E,MAAAA,QAAQ,EAFV,EAAA;AAGE2E,MAAAA,YAAY,EAHd,EAAA;AAIEhD,MAAAA,KAAAA,EAAAA;AAJF,KADO,CADJ;AASLA,IAAAA,KATK,EASLA,KATK;AAULoG,IAAAA,KAAK,EAAE,IAAA,aAAA,CAAA,GAAA,EAAA,WAAA,EAAA,IAAA;AAVF,GAAP;AAYD;;AAED,SAAA,yBAAA,CAAA,IAAA,EAA0D;AACxD,MAAIzH,IAAI,GAAG,OAAA,IAAA,KAAA,QAAA,GAAA,IAAA,GAAkCf,UAAU,CAAvD,IAAuD,CAAvD;AACAkB,EAAAA,OAAO,CAAPA,IAAAA,CACE,0EAAA,6DAAA,IAAA,MAAA,IAAA,GADFA,GACE,CADFA;AAKA,SAAO;AACLgU,IAAAA,IAAI,EAAEnT,UAAU,CADX,KAAA;AAELyG,IAAAA,KAAK,EAAE,IAAA,aAAA,CAAA,GAAA,EAAA,oBAAA,EAAA,0BAAA,IAAA,GAAA,GAAA;AAFF,GAAP;AAQD,C,CAAA;;;AAGD,SAAA,YAAA,CAAA,OAAA,EAA2C;AACzC,OAAK,IAAIxF,CAAC,GAAG2N,OAAO,CAAPA,MAAAA,GAAb,CAAA,EAAiC3N,CAAC,IAAlC,CAAA,EAAyCA,CAAzC,EAAA,EAA8C;AAC5C,QAAIkL,MAAM,GAAGyC,OAAO,CAApB,CAAoB,CAApB;;AACA,QAAIrC,gBAAgB,CAApB,MAAoB,CAApB,EAA8B;AAC5B,aAAA,MAAA;AACD;AACF;AACF,C,CAAA;;;AAGD,SAAA,UAAA,CAAA,QAAA,EAA4D;AAC1D,SAAO,CAAC5O,QAAQ,CAARA,QAAAA,IAAD,EAAA,KAA6BA,QAAQ,CAARA,MAAAA,IAApC,EAAO,CAAP;AACD;;AAED,SAAA,gBAAA,CAAA,CAAA,EAAA,CAAA,EAAkD;AAChD,SACEkE,CAAC,CAADA,QAAAA,KAAeC,CAAC,CAAhBD,QAAAA,IAA6BA,CAAC,CAADA,MAAAA,KAAaC,CAAC,CAA3CD,MAAAA,IAAsDA,CAAC,CAADA,IAAAA,KAAWC,CAAC,CADpE,IAAA;AAGD;;AAED,SAAA,gBAAA,CAAA,MAAA,EAA4C;AAC1C,SAAOqK,MAAM,CAANA,IAAAA,KAAgBnM,UAAU,CAAjC,QAAA;AACD;;AAED,SAAA,aAAA,CAAA,MAAA,EAAyC;AACvC,SAAOmM,MAAM,CAANA,IAAAA,KAAgBnM,UAAU,CAAjC,KAAA;AACD;;AAED,SAAA,gBAAA,CAAA,MAAA,EAA6C;AAC3C,SAAO,CAAA,MAAM,IAAN,IAAA,GAAA,KAAA,CAAA,GAAA,MAAM,CAAN,IAAA,MAAiBA,UAAU,CAAlC,QAAA;AACD;;SAED,sB;;;;;qFAAA,mBAAA,cAAA,EAAA,aAAA,EAAA,OAAA,EAAA,MAAA,EAAA,SAAA,EAAA,iBAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,yEAQW5C,KARX;AAAA;AAAA;AAAA;AAAA;AAAA;AASQ+O,sBAAAA,MATR,GASiByC,OAAO,CAApB,KAAoB,CATxB;AAUQ3L,sBAAAA,KAVR,GAUgB+J,aAAa,CAAzB,KAAyB,CAV7B;AAWQkF,sBAAAA,YAXR,GAWuBuB,cAAc,CAAdA,IAAAA,CAChB5K,UAAAA,CAAD;AAAA,+BAAOA,CAAC,CAADA,KAAAA,CAAAA,EAAAA,KAAe5F,KAAK,CAALA,KAAAA,CADxB,EACE;AAAA,uBADiBwQ,CAXvB;AAcQC,sBAAAA,oBAdR,GAeMxB,YAAY,IAAZA,IAAAA,IACA,CAACU,kBAAkB,CAAA,YAAA,EADnBV,KACmB,CADnBA,IAEA,CAAA,iBAAiB,IAAjB,IAAA,GAAA,KAAA,CAAA,GAAA,iBAAiB,CAAGjP,KAAK,CAALA,KAAAA,CAApB,EAAiB,CAAjB,MAHF,SAdJ;;AAAA,4BAmBQ4J,gBAAgB,CAAhBA,MAAgB,CAAhBA,KAA6B8G,SAAS,IAA1C,oBAAI9G,CAnBR;AAAA;AAAA;AAAA;;AAAA;AAAA,6BAuBY,mBAAmB,CAAA,MAAA,EAAA,MAAA,EAAnB,SAAmB,CAAnB,CAAA,IAAA,CAAqDV,UAAAA,MAAD,EAAW;AACnE,4BAAA,MAAA,EAAY;AACVyC,0BAAAA,OAAO,CAAPA,KAAO,CAAPA,GAAiBzC,MAAM,IAAIyC,OAAO,CAAlCA,KAAkC,CAAlCA;AACD;AAHH,uBAAM,CAvBZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQWxR,YAAAA,KARX,GAQE,CARF;;AAAA;AAAA,kBAQsBA,KAAK,GAAGwR,OAAO,CAAnC,MARF;AAAA;AAAA;AAAA;;AAAA,kDAQWxR,KARX;;AAAA;AAQ8CA,YAAAA,KAA5C,EARF;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAgCA,mB;;;;;kFAAA,mBAAA,MAAA,EAAA,MAAA,EAAA,MAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGgB,gBAAdwW,MAAc,KAAA,KAAA,CAAA,EAAA;AAAdA,cAAAA,MAAc,GAAL,KAATA;AAAc;;AAHhB;AAAA,mBAKsBzH,MAAM,CAANA,YAAAA,CAAAA,WAAAA,CAApB,MAAoBA,CALtB;;AAAA;AAKMnF,YAAAA,OALN;;AAAA,iBAME,OANF;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,iBAUE,MAVF;AAAA;AAAA;AAAA;;AAAA;AAAA,+CAYa;AACLmM,cAAAA,IAAI,EAAEnT,UAAU,CADX,IAAA;AAELkG,cAAAA,IAAI,EAAEiG,MAAM,CAANA,YAAAA,CAAoB/E;AAFrB,aAZb;;AAAA;AAAA;AAAA;AAAA,+CAkBa;AACL+L,cAAAA,IAAI,EAAEnT,UAAU,CADX,KAAA;AAELyG,cAAAA,KAAK;AAFA,aAlBb;;AAAA;AAAA,+CAyBS;AACL0M,cAAAA,IAAI,EAAEnT,UAAU,CADX,IAAA;AAELkG,cAAAA,IAAI,EAAEiG,MAAM,CAANA,YAAAA,CAAoBjG;AAFrB,aAzBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA+BA,SAAA,kBAAA,CAAA,MAAA,EAA0C;AACxC,SAAO,IAAA,eAAA,CAAA,MAAA,EAAA,MAAA,CAAA,OAAA,EAAA,IAAA,CAAkDoK,UAAAA,CAAD;AAAA,WAAOA,CAAC,KAAhE,EAAwD;AAAA,GAAjD,CAAP;AACD,C,CAAA;AAGD;;;AACA,SAAA,qBAAA,CAAA,KAAA,EAAA,UAAA,EAEuB;AAErB,MAAI,KAAJ,GAAA,KAAA,CAAI,KAAJ;AAAA,MAAI,QAAJ,GAAA,KAAA,CAAI,QAAJ;AAAA,MAAuBlN,MAAvB,GAAA,KAAA,CAAuBA,MAAvB;AACA,SAAO;AACLhD,IAAAA,EAAE,EAAEC,KAAK,CADJ,EAAA;AAEL3B,IAAAA,QAFK,EAELA,QAFK;AAGL0E,IAAAA,MAHK,EAGLA,MAHK;AAIL8C,IAAAA,IAAI,EAAEiD,UAAU,CAAC9I,KAAK,CAJjB,EAIW,CAJX;AAKLwT,IAAAA,MAAM,EAAExT,KAAK,CAACwT;AALT,GAAP;AAOD;;AAED,SAAA,cAAA,CAAA,OAAA,EAAA,QAAA,EAE6B;AAE3B,MAAIlV,MAAM,GACR,OAAA,QAAA,KAAA,QAAA,GAA+BG,SAAS,CAATA,QAAS,CAATA,CAA/B,MAAA,GAA4DnB,QAAQ,CADtE,MAAA;;AAEA,MACEqD,OAAO,CAACA,OAAO,CAAPA,MAAAA,GAARA,CAAO,CAAPA,CAAAA,KAAAA,CAAAA,KAAAA,IACA,CAAC8S,kBAAkB,CAACnV,MAAM,IAF5B,EAEqB,CAFrB,EAGE;AACA,WAAOqC,OAAO,CAAPA,KAAAA,CAAc,CAAdA,CAAAA,EAAP,CAAOA,CAAP;AACD;;AACD,SAAOA,OAAO,CAAPA,KAAAA,CAAc,CAAdA,CAAAA,EAAP,CAAOA,CAAP;AACD;;AAED,SAAA,SAAA,CAAA,QAAA,EAA8C;AAC5C,MAAIjC,IAAI,GACN,OAAA,MAAA,KAAA,WAAA,IAAiC,OAAON,MAAM,CAAb,QAAA,KAAjC,WAAA,GACIA,MAAM,CAANA,QAAAA,CADJ,MAAA,GADF,mBAAA;AAIA,MAAIO,IAAI,GAAG,OAAA,QAAA,KAAA,QAAA,GAAA,QAAA,GAA0Cf,UAAU,CAA/D,QAA+D,CAA/D;AACA,SAAO,IAAA,GAAA,CAAA,IAAA,EAAP,IAAO,CAAP;AACD,C,CAAA","sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(entry, null, index === 0 ? \"default\" : undefined)\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n      if (listener) {\n        listener({ action, location: getCurrentLocation() });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      globalHistory.state?.usr || null,\n      globalHistory.state?.key || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      globalHistory.state?.usr || null,\n      globalHistory.state?.key || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\nfunction warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to as Location)?.key || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function handlePop() {\n    action = Action.Pop;\n    if (listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    validateLocation?.(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    validateLocation?.(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: location });\n    }\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\nexport type FormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: Exclude<FormMethod, \"get\">;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport interface AgnosticRouteObject {\n  caseSensitive?: boolean;\n  children?: AgnosticRouteObject[];\n  index?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n}\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport interface AgnosticDataRouteObject extends AgnosticRouteObject {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n}\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `${string}:${infer Param}`\n    ? Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  parentPath: number[] = [],\n  allIds: Set<string> = new Set<string>()\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      !allIds.has(id),\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n    allIds.add(id);\n    let dataRoute: AgnosticDataRouteObject = {\n      ...route,\n      id,\n      children: route.children\n        ? convertRoutesToDataRoutes(route.children, treePath, allIds)\n        : undefined,\n    };\n    return dataRoute;\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(branches[i], pathname);\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  routes.forEach((route, index) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({ path, score: computeScore(path, route.index), routesMeta });\n  });\n\n  return branches;\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  path: Path,\n  params: {\n    [key in PathParam<Path>]: string;\n  } = {} as any\n): string {\n  return path\n    .replace(/:(\\w+)/g, (_, key: PathParam<Path>) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return params[key]!;\n    })\n    .replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n      const star = \"*\" as PathParam<Path>;\n\n      if (params[star] == null) {\n        // If no splat was provided, trim the trailing slash _unless_ it's\n        // the entire path\n        return str === \"/*\" ? \"/\" : \"\";\n      }\n\n      // Apply the splat\n      return `${prefix}${params[star]}`;\n    });\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else {\n    regexpSource += end\n      ? \"\\\\/*$\" // When matching to the end, ignore trailing slashes\n      : // Otherwise, match a word boundary or a proceeding /. The word boundary restricts\n        // parent routes to matching only their own words and nothing more, e.g. parent\n        // route \"/home\" should not match \"/home2\".\n        // Additionally, allow paths starting with `.`, `-`, `~`, and url-encoded entities,\n        // but do not consume the character in the matched path so they can match against\n        // nested paths.\n        \"(?:(?=[@.~-]|%[0-9A-F]{2})|\\\\b|\\\\/|$)\";\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\n/**\n * @private\n */\nexport function warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to = typeof toArg === \"string\" ? parsePath(toArg) : { ...toArg };\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeys: Set<string | number> = new Set<string | number>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscriber?: (aborted: boolean) => void = undefined;\n  data: Record<string, unknown>;\n\n  constructor(data: Record<string, unknown>) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n  }\n\n  private trackPromise(\n    key: string | number,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.pendingKeys.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string | number,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeys.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.subscriber?.(false);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.subscriber?.(false);\n    return data;\n  }\n\n  subscribe(fn: (aborted: boolean) => void) {\n    this.subscriber = fn;\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    this.subscriber?.(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport function defer(data: Record<string, unknown>) {\n  return new DeferredData(data);\n}\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n\n  constructor(status: number, statusText: string | undefined, data: any) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.data = data;\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\nexport function isRouteErrorResponse(e: any): e is ErrorResponse {\n  return e instanceof ErrorResponse;\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  parsePath,\n} from \"./history\";\nimport type {\n  DataResult,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n} from \"./utils\";\nimport {\n  DeferredData,\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  invariant,\n  isRouteErrorResponse,\n  matchRoutes,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): void;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To, opts?: RouterNavigateOptions): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  basename?: string;\n  routes: AgnosticRouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(request: Request): Promise<StaticHandlerContext | Response>;\n  queryRoute(request: Request, routeId?: string): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Tuple of [key, href, DataRouterMatch] for a revalidating fetcher.load()\n */\ntype RevalidatingFetcher = [string, string, AgnosticDataRouteMatch];\n\n/**\n * Tuple of [href, DataRouteMatch] for an active fetcher.load()\n */\ntype FetchLoadMatch = [string, AgnosticDataRouteMatch];\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes);\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  let initialScrollRestored = false;\n\n  let initialMatches = matchRoutes(\n    dataRoutes,\n    init.history.location,\n    init.basename\n  );\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let { matches, route, error } = getNotFoundMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    !initialMatches.some((m) => m.route.loader) || init.hydrationData != null;\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData?.loaderData || {},\n    actionData: init.hydrationData?.actionData || null,\n    errors: init.hydrationData?.errors || initialErrors,\n    fetchers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location }) =>\n        startNavigation(historyAction, location)\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController?.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - This should not be susceptible to false positives for\n    //   loading/submissionRedirect since there would not be actionData in the\n    //   state since the prior action would have returned a redirect response\n    //   and short circuited\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      state.navigation.state === \"loading\";\n\n    // Always preserve any existing loaderData from re-used routes\n    let newLoaderData = newState.loaderData\n      ? {\n          loaderData: mergeLoaderData(\n            state.loaderData,\n            newState.loaderData,\n            newState.matches || []\n          ),\n        }\n      : {};\n\n    updateState({\n      // Clear existing actionData on any completed navigation beyond the original\n      // action, unless we're currently finishing the loading/actionReload state.\n      // Do this prior to spreading in newState in case we got back to back actions\n      ...(isActionReload ? {} : { actionData: null }),\n      ...newState,\n      ...newLoaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData\n        ? false\n        : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset,\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(to, opts);\n\n    let location = createLocation(state.location, path, opts?.state);\n    let historyAction =\n      opts?.replace === true || submission != null\n        ? HistoryAction.Replace\n        : HistoryAction.Push;\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts?.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController?.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = opts?.startUninterruptedRevalidation === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = opts?.preventScrollReset === true;\n\n    let loadingNavigation = opts?.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error,\n      } = getNotFoundMatches(dataRoutes);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createRequest(\n      location,\n      pendingNavigationController.signal,\n      opts?.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts?.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (opts?.submission) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts?.submission,\n      opts?.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = getMethodNotAllowedResult(location);\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch);\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let redirectNavigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location: createLocation(state.location, result.location),\n        ...submission,\n      };\n      await startRedirectNavigation(result, redirectNavigation, opts?.replace);\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if (opts?.replace !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      loadingNavigation = navigation;\n    }\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      pendingActionData,\n      pendingError,\n      fetchLoadMatches\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !matches?.some((m) => m.route.id === routeId) ||\n        matchesToLoad?.some((m) => m.route.id === routeId)\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: mergeLoaderData(state.loaderData, {}, matches),\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        actionData: pendingActionData || null,\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(([key]) => {\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: state.fetchers.get(key)?.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState({\n        navigation: loadingNavigation,\n        actionData: pendingActionData || state.actionData || null,\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(([key]) =>\n      fetchControllers.set(key, pendingNavigationController!)\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    revalidatingFetchers.forEach(([key]) => fetchControllers.delete(key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation, replace);\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterFetchOptions\n  ) {\n    if (typeof AbortController === \"undefined\") {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n    if (!matches) {\n      setFetcherError(key, routeId, new ErrorResponse(404, \"Not Found\", null));\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(href, opts);\n    let match = getTargetMatch(matches, path);\n\n    if (submission) {\n      handleFetcherAction(key, routeId, path, match, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, [path, match]);\n    handleFetcherLoader(key, routeId, path, match);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let { error } = getMethodNotAllowedResult(path);\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: state.fetchers.get(key)?.data || undefined,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match);\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      let redirectNavigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location: createLocation(state.location, actionResult.location),\n        ...submission,\n      };\n      await startRedirectNavigation(actionResult, redirectNavigation);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"defer() is not supported in actions\");\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createRequest(\n      nextLocation,\n      abortController.signal\n    );\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(dataRoutes, state.navigation.location, init.basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      { [match.route.id]: actionResult.data },\n      undefined, // No need to send through errors since we short circuit above\n      fetchLoadMatches\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter(([staleKey]) => staleKey !== key)\n      .forEach(([staleKey]) => {\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: state.fetchers.get(staleKey)?.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(([staleKey]) =>\n      fetchControllers.delete(staleKey)\n    );\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation);\n      return;\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController?.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch\n  ) {\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      data: state.fetchers.get(key)?.data || undefined,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match\n    );\n\n    // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      let redirectNavigation = getLoaderRedirect(state, result);\n      await startRedirectNavigation(result, redirectNavigation);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    redirect: RedirectResult,\n    navigation: Navigation,\n    replace?: boolean\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    invariant(\n      navigation.location,\n      \"Expected a location on the redirect navigation\"\n    );\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n    await startNavigation(redirectHistoryAction, navigation.location, {\n      overrideNavigation: navigation,\n    });\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((m) => callLoaderOrAction(\"loader\", request, m)),\n      ...fetchersToLoad.map(([, href, match]) =>\n        callLoaderOrAction(\"loader\", createRequest(href, request.signal), match)\n      ),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        request.signal,\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map(([, , match]) => match),\n        fetcherResults,\n        request.signal,\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    createHref,\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport function unstable_createStaticHandler(\n  routes: AgnosticRouteObject[]\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to unstable_createStaticHandler\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n\n  async function query(\n    request: Request\n  ): Promise<StaticHandlerContext | Response> {\n    let { location, result } = await queryImpl(request);\n    if (result instanceof Response) {\n      return result;\n    }\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, ...result };\n  }\n\n  async function queryRoute(request: Request, routeId: string): Promise<any> {\n    let { result } = await queryImpl(request, routeId);\n    if (result instanceof Response) {\n      return result;\n    }\n\n    // Pick off the right state value to return\n    let routeData = [result.errors, result.actionData, result.loaderData].find(\n      (v) => v\n    );\n    let value = Object.values(routeData || {})[0];\n\n    if (isRouteErrorResponse(value)) {\n      return new Response(value.data, {\n        status: value.status,\n        statusText: value.statusText,\n      });\n    }\n\n    return value;\n  }\n\n  async function queryImpl(\n    request: Request,\n    routeId?: string\n  ): Promise<{\n    location: Location;\n    result: Omit<StaticHandlerContext, \"location\"> | Response;\n  }> {\n    invariant(\n      request.method !== \"HEAD\",\n      \"query()/queryRoute() do not support HEAD requests\"\n    );\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    let { location, matches, shortCircuitState } = matchRequest(\n      request,\n      routeId\n    );\n\n    try {\n      if (shortCircuitState) {\n        return { location, result: shortCircuitState };\n      }\n\n      if (request.method !== \"GET\") {\n        let result = await submit(\n          request,\n          matches,\n          getTargetMatch(matches, location),\n          routeId != null\n        );\n        return { location, result };\n      }\n\n      let result = await loadRouteData(request, matches, routeId != null);\n      return {\n        location,\n        result: {\n          ...result,\n          actionData: null,\n          actionHeaders: {},\n        },\n      };\n    } catch (e) {\n      if (e instanceof Response) {\n        return { location, result: e };\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\"> | Response> {\n    let result: DataResult;\n    if (!actionMatch.route.action) {\n      let href = createHref(new URL(request.url));\n      result = getMethodNotAllowedResult(href);\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        true,\n        isRouteRequest\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // calLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    if (isRouteRequest) {\n      if (isErrorResult(result)) {\n        let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n        return {\n          matches: [actionMatch],\n          loaderData: {},\n          actionData: null,\n          errors: {\n            [boundaryMatch.route.id]: result.error,\n          },\n          // Note: statusCode + headers are unused here since queryRoute will\n          // return the raw Response or value\n          statusCode: 500,\n          loaderHeaders: {},\n          actionHeaders: {},\n        };\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, isRouteRequest, {\n        [boundaryMatch.route.id]: result.error,\n      });\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    let context = await loadRouteData(request, matches, isRouteRequest);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    isRouteRequest: boolean,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<StaticHandlerContext, \"location\" | \"actionData\" | \"actionHeaders\">\n    | Response\n  > {\n    let matchesToLoad = getLoaderMatchesUntilBoundary(\n      matches,\n      Object.keys(pendingActionError || {})[0]\n    ).filter((m) => m.route.loader);\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        loaderData: {},\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((m) =>\n        callLoaderOrAction(\"loader\", request, m, true, isRouteRequest)\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Can't do anything with these without the Remix side of things, so just\n    // cancel them for now\n    results.forEach((result) => {\n      if (isDeferredResult(result)) {\n        result.deferredData.cancel();\n      }\n    });\n\n    // Process and commit output from loaders\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError\n    );\n\n    return {\n      ...context,\n      matches,\n    };\n  }\n\n  function matchRequest(\n    req: Request,\n    routeId?: string\n  ): {\n    location: Location;\n    matches: AgnosticDataRouteMatch[];\n    routeMatch?: AgnosticDataRouteMatch;\n    shortCircuitState?: Omit<StaticHandlerContext, \"location\">;\n  } {\n    let url = new URL(req.url);\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location);\n    if (matches && routeId) {\n      matches = matches.filter((m) => m.route.id === routeId);\n    }\n\n    // Short circuit with a 404 if we match nothing\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error,\n      } = getNotFoundMatches(dataRoutes);\n      return {\n        location,\n        matches: notFoundMatches,\n        shortCircuitState: {\n          matches: notFoundMatches,\n          loaderData: {},\n          actionData: null,\n          errors: {\n            [route.id]: error,\n          },\n          statusCode: 404,\n          loaderHeaders: {},\n          actionHeaders: {},\n        },\n      };\n    }\n\n    return { location, matches };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  to: To,\n  opts?: RouterNavigateOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  let path = typeof to === \"string\" ? to : createPath(to);\n\n  // Return location verbatim on non-submission navigations\n  if (!opts || (!(\"formMethod\" in opts) && !(\"formData\" in opts))) {\n    return { path };\n  }\n\n  // Create a Submission on non-GET navigations\n  if (opts.formMethod != null && opts.formMethod !== \"get\") {\n    return {\n      path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: createHref(parsePath(path)),\n        formEncType: opts?.formEncType || \"application/x-www-form-urlencoded\",\n        formData: opts.formData,\n      },\n    };\n  }\n\n  // No formData to flatten for GET submission\n  if (!opts.formData) {\n    return { path };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  try {\n    let searchParams = convertFormDataToSearchParams(opts.formData);\n    parsedPath.search = `?${searchParams}`;\n  } catch (e) {\n    return {\n      path,\n      error: new ErrorResponse(\n        400,\n        \"Bad Request\",\n        \"Cannot submit binary form data using GET\"\n      ),\n    };\n  }\n\n  return { path: createPath(parsedPath) };\n}\n\nfunction getLoaderRedirect(\n  state: RouterState,\n  redirect: RedirectResult\n): Navigation {\n  let { formMethod, formAction, formEncType, formData } = state.navigation;\n  let navigation: NavigationStates[\"Loading\"] = {\n    state: \"loading\",\n    location: createLocation(state.location, redirect.location),\n    formMethod: formMethod || undefined,\n    formAction: formAction || undefined,\n    formEncType: formEncType || undefined,\n    formData: formData || undefined,\n  };\n  return navigation;\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  pendingActionData?: RouteData,\n  pendingError?: RouteData,\n  fetchLoadMatches?: Map<string, FetchLoadMatch>\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : null;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter(\n    (match, index) =>\n      match.route.loader != null &&\n      (isNewLoader(state.loaderData, state.matches[index], match) ||\n        // If this route had a pending deferred cancelled it must be revalidated\n        cancelledDeferredRoutes.some((id) => id === match.route.id) ||\n        shouldRevalidateLoader(\n          state.location,\n          state.matches[index],\n          submission,\n          location,\n          match,\n          isRevalidationRequired,\n          actionResult\n        ))\n  );\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches?.forEach(([href, match], key) => {\n    // This fetcher was cancelled from a prior action submission - force reload\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push([key, href, match]);\n    } else if (isRevalidationRequired) {\n      let shouldRevalidate = shouldRevalidateLoader(\n        href,\n        match,\n        submission,\n        href,\n        match,\n        isRevalidationRequired,\n        actionResult\n      );\n      if (shouldRevalidate) {\n        revalidatingFetchers.push([key, href, match]);\n      }\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentMatch.route.path?.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  currentLocation: string | Location,\n  currentMatch: AgnosticDataRouteMatch,\n  submission: Submission | undefined,\n  location: string | Location,\n  match: AgnosticDataRouteMatch,\n  isRevalidationRequired: boolean,\n  actionResult: DataResult | undefined\n) {\n  let currentUrl = createURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createURL(location);\n  let nextParams = match.params;\n\n  // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n  let defaultShouldRevalidate =\n    isNewRouteInstance(currentMatch, match) ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search ||\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    let routeChoice = match.route.shouldRevalidate({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate,\n    });\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  skipRedirects: boolean = false,\n  isRouteRequest: boolean = false\n): Promise<DataResult> {\n  let resultType;\n  let result;\n\n  // Setup a promise we can race against so that abort signals short circuit\n  let reject: () => void;\n  let abortPromise = new Promise((_, r) => (reject = r));\n  let onReject = () => reject();\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant<Function>(\n      handler,\n      `Could not find the ${type} to run on the \"${match.route.id}\" route`\n    );\n\n    result = await Promise.race([\n      handler({ request, params: match.params }),\n      abortPromise,\n    ]);\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (result instanceof Response) {\n    // Process redirects\n    let status = result.status;\n    let location = result.headers.get(\"Location\");\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping\n    if (isRouteRequest) {\n      throw result;\n    }\n\n    if (status >= 300 && status <= 399 && location != null) {\n      // Don't process redirects in the router during SSR document requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect\n      if (skipRedirects) {\n        throw result;\n      }\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    let data: any;\n    if (result.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (result instanceof DeferredData) {\n    return { type: ResultType.deferred, deferredData: result };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\nfunction createRequest(\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = createURL(location).toString();\n  let init: RequestInit = { signal };\n\n  if (submission) {\n    let { formMethod, formEncType, formData } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    invariant(\n      typeof value === \"string\",\n      'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' +\n        'please use \"multipart/form-data\" instead.'\n    );\n    searchParams.append(key, value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds?: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = Object.assign(errors || {}, {\n        [boundaryMatch.route.id]: error,\n      });\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds?.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data;\n      // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data;\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n  if (pendingError) {\n    errors = pendingError;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key, , match] = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!errors?.[boundaryMatch.route.id]) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[]\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  matches.forEach((match) => {\n    let id = match.route.id;\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getNotFoundMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n  error: ErrorResponse;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(\n    (r) => r.index || r.path === \"\" || r.path === \"/\"\n  ) || {\n    id: \"__shim-404-route__\",\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n    error: new ErrorResponse(404, \"Not Found\", null),\n  };\n}\n\nfunction getMethodNotAllowedResult(path: Location | string): ErrorResult {\n  let href = typeof path === \"string\" ? path : createHref(path);\n  console.warn(\n    \"You're trying to submit to a route that does not have an action.  To \" +\n      \"fix this, please add an `action` function to the route for \" +\n      `[${href}]`\n  );\n  return {\n    type: ResultType.error,\n    error: new ErrorResponse(\n      405,\n      \"Method Not Allowed\",\n      `No action found for [${href}]`\n    ),\n  };\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\n// Create an href to represent a \"server\" URL without the hash\nfunction createHref(location: Partial<Path> | Location | URL) {\n  return (location.pathname || \"\") + (location.search || \"\");\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return result?.type === ResultType.redirect;\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  signal: AbortSignal,\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      currentLoaderData?.[match.route.id] !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    !hasNakedIndexQuery(search || \"\")\n  ) {\n    return matches.slice(-2)[0];\n  }\n  return matches.slice(-1)[0];\n}\n\nfunction createURL(location: Location | string): URL {\n  let base =\n    typeof window !== \"undefined\" && typeof window.location !== \"undefined\"\n      ? window.location.origin\n      : \"unknown://unknown\";\n  let href = typeof location === \"string\" ? location : createHref(location);\n  return new URL(href, base);\n}\n//#endregion\n"]},"metadata":{},"sourceType":"module"}